// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fix64_sqrt,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35ticsg325-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.073000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=476,HLS_SYN_LUT=1331}" *)

module fix64_sqrt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv63_4000000000000000 = 63'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv63_0 = 63'b000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv48_0 = 48'b000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_FFFFFFFFFFFFC000 = 64'b1111111111111111111111111111111111111111111111111100000000000000;
parameter    ap_const_lv64_4000 = 64'b100000000000000;
parameter    ap_const_lv63_4000 = 63'b100000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] num;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [62:0] bit_5_fu_167_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_42;
wire   [0:0] tmp_fu_152_p2;
wire   [1:0] i_1_fu_177_p2;
reg   [1:0] i_1_reg_403;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_56;
wire   [63:0] result_2_fu_255_p3;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_65;
wire   [0:0] tmp_5_fu_211_p2;
wire   [63:0] num_assign_7_fu_263_p3;
wire   [62:0] bit_6_fu_281_p1;
wire   [0:0] tmp_6_fu_285_p2;
reg   [0:0] tmp_6_reg_426;
wire   [63:0] result_4_fu_357_p3;
reg   [63:0] result_4_reg_432;
wire   [63:0] num_assign_5_fu_365_p3;
reg   [63:0] num_assign_5_reg_437;
wire   [62:0] bit_3_cast_cast_fu_373_p3;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_89;
wire   [63:0] num_assign_6_fu_380_p3;
reg   [62:0] bit_reg_60;
reg   [1:0] i_reg_72;
reg   [62:0] bit_1_reg_84;
reg   [63:0] result_reg_95;
reg   [63:0] p_0_reg_107;
reg   [62:0] bit_2_reg_117;
wire   [0:0] exitcond_fu_171_p2;
reg   [63:0] result_1_reg_127;
reg   [63:0] p_1_reg_137;
wire   [63:0] bit_cast_fu_148_p1;
wire   [60:0] bit_3_fu_157_p4;
wire   [31:0] tmp_1_fu_189_p1;
wire   [0:0] tmp_2_fu_183_p2;
wire   [31:0] tmp_s_fu_193_p2;
wire   [63:0] bit_2_cast_fu_207_p1;
wire   [63:0] tmp_7_fu_217_p2;
wire   [62:0] result_3_fu_229_p4;
wire   [63:0] result_9_fu_239_p1;
wire   [0:0] tmp_8_fu_223_p2;
wire   [63:0] result_5_fu_249_p2;
wire   [63:0] num_assign_fu_243_p2;
wire   [60:0] bit_4_fu_271_p4;
wire   [47:0] tmp_4_fu_291_p4;
wire   [63:0] num_assign_1_fu_307_p2;
wire   [63:0] tmp_9_fu_313_p2;
wire   [63:0] result_7_fu_325_p2;
wire   [0:0] icmp_fu_301_p2;
wire   [0:0] sel_tmp5_fu_343_p2;
wire   [63:0] result_6_fu_331_p2;
wire   [63:0] result_8_fu_349_p3;
wire   [63:0] num_assign_2_fu_319_p2;
wire   [63:0] tmp_11_fu_337_p2;
reg   [4:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_152_p2 == ap_const_lv1_0))) begin
                bit_1_reg_84[0] <= bit_reg_60[0];        bit_1_reg_84[2] <= bit_reg_60[2];        bit_1_reg_84[4] <= bit_reg_60[4];        bit_1_reg_84[6] <= bit_reg_60[6];        bit_1_reg_84[8] <= bit_reg_60[8];        bit_1_reg_84[10] <= bit_reg_60[10];        bit_1_reg_84[12] <= bit_reg_60[12];        bit_1_reg_84[14] <= bit_reg_60[14];        bit_1_reg_84[16] <= bit_reg_60[16];        bit_1_reg_84[18] <= bit_reg_60[18];        bit_1_reg_84[20] <= bit_reg_60[20];        bit_1_reg_84[22] <= bit_reg_60[22];        bit_1_reg_84[24] <= bit_reg_60[24];        bit_1_reg_84[26] <= bit_reg_60[26];        bit_1_reg_84[28] <= bit_reg_60[28];        bit_1_reg_84[30] <= bit_reg_60[30];        bit_1_reg_84[32] <= bit_reg_60[32];        bit_1_reg_84[34] <= bit_reg_60[34];        bit_1_reg_84[36] <= bit_reg_60[36];        bit_1_reg_84[38] <= bit_reg_60[38];        bit_1_reg_84[40] <= bit_reg_60[40];        bit_1_reg_84[42] <= bit_reg_60[42];        bit_1_reg_84[44] <= bit_reg_60[44];        bit_1_reg_84[46] <= bit_reg_60[46];        bit_1_reg_84[48] <= bit_reg_60[48];        bit_1_reg_84[50] <= bit_reg_60[50];        bit_1_reg_84[52] <= bit_reg_60[52];        bit_1_reg_84[54] <= bit_reg_60[54];        bit_1_reg_84[56] <= bit_reg_60[56];        bit_1_reg_84[58] <= bit_reg_60[58];        bit_1_reg_84[60] <= bit_reg_60[60];        bit_1_reg_84[62] <= bit_reg_60[62];
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
                bit_1_reg_84[0] <= bit_3_cast_cast_fu_373_p3[0];        bit_1_reg_84[2] <= bit_3_cast_cast_fu_373_p3[2];        bit_1_reg_84[4] <= bit_3_cast_cast_fu_373_p3[4];        bit_1_reg_84[6] <= bit_3_cast_cast_fu_373_p3[6];        bit_1_reg_84[8] <= bit_3_cast_cast_fu_373_p3[8];        bit_1_reg_84[10] <= bit_3_cast_cast_fu_373_p3[10];        bit_1_reg_84[12] <= bit_3_cast_cast_fu_373_p3[12];        bit_1_reg_84[14] <= bit_3_cast_cast_fu_373_p3[14];        bit_1_reg_84[16] <= bit_3_cast_cast_fu_373_p3[16];        bit_1_reg_84[18] <= bit_3_cast_cast_fu_373_p3[18];        bit_1_reg_84[20] <= bit_3_cast_cast_fu_373_p3[20];        bit_1_reg_84[22] <= bit_3_cast_cast_fu_373_p3[22];        bit_1_reg_84[24] <= bit_3_cast_cast_fu_373_p3[24];        bit_1_reg_84[26] <= bit_3_cast_cast_fu_373_p3[26];        bit_1_reg_84[28] <= bit_3_cast_cast_fu_373_p3[28];        bit_1_reg_84[30] <= bit_3_cast_cast_fu_373_p3[30];        bit_1_reg_84[32] <= bit_3_cast_cast_fu_373_p3[32];        bit_1_reg_84[34] <= bit_3_cast_cast_fu_373_p3[34];        bit_1_reg_84[36] <= bit_3_cast_cast_fu_373_p3[36];        bit_1_reg_84[38] <= bit_3_cast_cast_fu_373_p3[38];        bit_1_reg_84[40] <= bit_3_cast_cast_fu_373_p3[40];        bit_1_reg_84[42] <= bit_3_cast_cast_fu_373_p3[42];        bit_1_reg_84[44] <= bit_3_cast_cast_fu_373_p3[44];        bit_1_reg_84[46] <= bit_3_cast_cast_fu_373_p3[46];        bit_1_reg_84[48] <= bit_3_cast_cast_fu_373_p3[48];        bit_1_reg_84[50] <= bit_3_cast_cast_fu_373_p3[50];        bit_1_reg_84[52] <= bit_3_cast_cast_fu_373_p3[52];        bit_1_reg_84[54] <= bit_3_cast_cast_fu_373_p3[54];        bit_1_reg_84[56] <= bit_3_cast_cast_fu_373_p3[56];        bit_1_reg_84[58] <= bit_3_cast_cast_fu_373_p3[58];        bit_1_reg_84[60] <= bit_3_cast_cast_fu_373_p3[60];        bit_1_reg_84[62] <= bit_3_cast_cast_fu_373_p3[62];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_171_p2))) begin
                bit_2_reg_117[0] <= bit_1_reg_84[0];        bit_2_reg_117[2] <= bit_1_reg_84[2];        bit_2_reg_117[4] <= bit_1_reg_84[4];        bit_2_reg_117[6] <= bit_1_reg_84[6];        bit_2_reg_117[8] <= bit_1_reg_84[8];        bit_2_reg_117[10] <= bit_1_reg_84[10];        bit_2_reg_117[12] <= bit_1_reg_84[12];        bit_2_reg_117[14] <= bit_1_reg_84[14];        bit_2_reg_117[16] <= bit_1_reg_84[16];        bit_2_reg_117[18] <= bit_1_reg_84[18];        bit_2_reg_117[20] <= bit_1_reg_84[20];        bit_2_reg_117[22] <= bit_1_reg_84[22];        bit_2_reg_117[24] <= bit_1_reg_84[24];        bit_2_reg_117[26] <= bit_1_reg_84[26];        bit_2_reg_117[28] <= bit_1_reg_84[28];        bit_2_reg_117[30] <= bit_1_reg_84[30];        bit_2_reg_117[32] <= bit_1_reg_84[32];        bit_2_reg_117[34] <= bit_1_reg_84[34];        bit_2_reg_117[36] <= bit_1_reg_84[36];        bit_2_reg_117[38] <= bit_1_reg_84[38];        bit_2_reg_117[40] <= bit_1_reg_84[40];        bit_2_reg_117[42] <= bit_1_reg_84[42];        bit_2_reg_117[44] <= bit_1_reg_84[44];        bit_2_reg_117[46] <= bit_1_reg_84[46];        bit_2_reg_117[48] <= bit_1_reg_84[48];        bit_2_reg_117[50] <= bit_1_reg_84[50];        bit_2_reg_117[52] <= bit_1_reg_84[52];        bit_2_reg_117[54] <= bit_1_reg_84[54];        bit_2_reg_117[56] <= bit_1_reg_84[56];        bit_2_reg_117[58] <= bit_1_reg_84[58];        bit_2_reg_117[60] <= bit_1_reg_84[60];        bit_2_reg_117[62] <= bit_1_reg_84[62];
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_5_fu_211_p2))) begin
                bit_2_reg_117[0] <= bit_6_fu_281_p1[0];        bit_2_reg_117[2] <= bit_6_fu_281_p1[2];        bit_2_reg_117[4] <= bit_6_fu_281_p1[4];        bit_2_reg_117[6] <= bit_6_fu_281_p1[6];        bit_2_reg_117[8] <= bit_6_fu_281_p1[8];        bit_2_reg_117[10] <= bit_6_fu_281_p1[10];        bit_2_reg_117[12] <= bit_6_fu_281_p1[12];        bit_2_reg_117[14] <= bit_6_fu_281_p1[14];        bit_2_reg_117[16] <= bit_6_fu_281_p1[16];        bit_2_reg_117[18] <= bit_6_fu_281_p1[18];        bit_2_reg_117[20] <= bit_6_fu_281_p1[20];        bit_2_reg_117[22] <= bit_6_fu_281_p1[22];        bit_2_reg_117[24] <= bit_6_fu_281_p1[24];        bit_2_reg_117[26] <= bit_6_fu_281_p1[26];        bit_2_reg_117[28] <= bit_6_fu_281_p1[28];        bit_2_reg_117[30] <= bit_6_fu_281_p1[30];        bit_2_reg_117[32] <= bit_6_fu_281_p1[32];        bit_2_reg_117[34] <= bit_6_fu_281_p1[34];        bit_2_reg_117[36] <= bit_6_fu_281_p1[36];        bit_2_reg_117[38] <= bit_6_fu_281_p1[38];        bit_2_reg_117[40] <= bit_6_fu_281_p1[40];        bit_2_reg_117[42] <= bit_6_fu_281_p1[42];        bit_2_reg_117[44] <= bit_6_fu_281_p1[44];        bit_2_reg_117[46] <= bit_6_fu_281_p1[46];        bit_2_reg_117[48] <= bit_6_fu_281_p1[48];        bit_2_reg_117[50] <= bit_6_fu_281_p1[50];        bit_2_reg_117[52] <= bit_6_fu_281_p1[52];        bit_2_reg_117[54] <= bit_6_fu_281_p1[54];        bit_2_reg_117[56] <= bit_6_fu_281_p1[56];        bit_2_reg_117[58] <= bit_6_fu_281_p1[58];        bit_2_reg_117[60] <= bit_6_fu_281_p1[60];        bit_2_reg_117[62] <= bit_6_fu_281_p1[62];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_152_p2 == ap_const_lv1_0))) begin
                bit_reg_60[0] <= bit_5_fu_167_p1[0];        bit_reg_60[2] <= bit_5_fu_167_p1[2];        bit_reg_60[4] <= bit_5_fu_167_p1[4];        bit_reg_60[6] <= bit_5_fu_167_p1[6];        bit_reg_60[8] <= bit_5_fu_167_p1[8];        bit_reg_60[10] <= bit_5_fu_167_p1[10];        bit_reg_60[12] <= bit_5_fu_167_p1[12];        bit_reg_60[14] <= bit_5_fu_167_p1[14];        bit_reg_60[16] <= bit_5_fu_167_p1[16];        bit_reg_60[18] <= bit_5_fu_167_p1[18];        bit_reg_60[20] <= bit_5_fu_167_p1[20];        bit_reg_60[22] <= bit_5_fu_167_p1[22];        bit_reg_60[24] <= bit_5_fu_167_p1[24];        bit_reg_60[26] <= bit_5_fu_167_p1[26];        bit_reg_60[28] <= bit_5_fu_167_p1[28];        bit_reg_60[30] <= bit_5_fu_167_p1[30];        bit_reg_60[32] <= bit_5_fu_167_p1[32];        bit_reg_60[34] <= bit_5_fu_167_p1[34];        bit_reg_60[36] <= bit_5_fu_167_p1[36];        bit_reg_60[38] <= bit_5_fu_167_p1[38];        bit_reg_60[40] <= bit_5_fu_167_p1[40];        bit_reg_60[42] <= bit_5_fu_167_p1[42];        bit_reg_60[44] <= bit_5_fu_167_p1[44];        bit_reg_60[46] <= bit_5_fu_167_p1[46];        bit_reg_60[48] <= bit_5_fu_167_p1[48];        bit_reg_60[50] <= bit_5_fu_167_p1[50];        bit_reg_60[52] <= bit_5_fu_167_p1[52];        bit_reg_60[54] <= bit_5_fu_167_p1[54];        bit_reg_60[56] <= bit_5_fu_167_p1[56];        bit_reg_60[58] <= bit_5_fu_167_p1[58];        bit_reg_60[60] <= bit_5_fu_167_p1[60];        bit_reg_60[62] <= bit_5_fu_167_p1[62];
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bit_reg_60[0] <= 1'b0;
        bit_reg_60[2] <= 1'b0;
        bit_reg_60[4] <= 1'b0;
        bit_reg_60[6] <= 1'b0;
        bit_reg_60[8] <= 1'b0;
        bit_reg_60[10] <= 1'b0;
        bit_reg_60[12] <= 1'b0;
        bit_reg_60[14] <= 1'b0;
        bit_reg_60[16] <= 1'b0;
        bit_reg_60[18] <= 1'b0;
        bit_reg_60[20] <= 1'b0;
        bit_reg_60[22] <= 1'b0;
        bit_reg_60[24] <= 1'b0;
        bit_reg_60[26] <= 1'b0;
        bit_reg_60[28] <= 1'b0;
        bit_reg_60[30] <= 1'b0;
        bit_reg_60[32] <= 1'b0;
        bit_reg_60[34] <= 1'b0;
        bit_reg_60[36] <= 1'b0;
        bit_reg_60[38] <= 1'b0;
        bit_reg_60[40] <= 1'b0;
        bit_reg_60[42] <= 1'b0;
        bit_reg_60[44] <= 1'b0;
        bit_reg_60[46] <= 1'b0;
        bit_reg_60[48] <= 1'b0;
        bit_reg_60[50] <= 1'b0;
        bit_reg_60[52] <= 1'b0;
        bit_reg_60[54] <= 1'b0;
        bit_reg_60[56] <= 1'b0;
        bit_reg_60[58] <= 1'b0;
        bit_reg_60[60] <= 1'b0;
        bit_reg_60[62] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_152_p2 == ap_const_lv1_0))) begin
        i_reg_72 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_reg_72 <= i_1_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_152_p2 == ap_const_lv1_0))) begin
        p_0_reg_107 <= num;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        p_0_reg_107 <= num_assign_6_fu_380_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_171_p2))) begin
        p_1_reg_137 <= p_0_reg_107;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_5_fu_211_p2))) begin
        p_1_reg_137 <= num_assign_7_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_171_p2))) begin
        result_1_reg_127 <= result_reg_95;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_5_fu_211_p2))) begin
        result_1_reg_127 <= result_2_fu_255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_152_p2 == ap_const_lv1_0))) begin
        result_reg_95 <= ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        result_reg_95 <= result_4_reg_432;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_1_reg_403 <= i_1_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_5_fu_211_p2))) begin
        num_assign_5_reg_437[63 : 14] <= num_assign_5_fu_365_p3[63 : 14];
        result_4_reg_432 <= result_4_fu_357_p3;
        tmp_6_reg_426 <= tmp_6_fu_285_p2;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_171_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_171_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_171_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_171_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_42) begin
    if (ap_sig_bdd_42) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_56) begin
    if (ap_sig_bdd_56) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_65) begin
    if (ap_sig_bdd_65) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_89) begin
    if (ap_sig_bdd_89) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_fu_152_p2 or tmp_5_fu_211_p2 or exitcond_fu_171_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(tmp_fu_152_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_171_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == tmp_5_fu_211_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = ((tmp_2_fu_183_p2[0:0] === 1'b1) ? tmp_s_fu_193_p2 : tmp_1_fu_189_p1);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_42 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_56 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_65 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_89 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

assign bit_2_cast_fu_207_p1 = bit_2_reg_117;

assign bit_3_cast_cast_fu_373_p3 = ((tmp_6_reg_426[0:0] === 1'b1) ? ap_const_lv63_4000 : ap_const_lv63_0);

assign bit_3_fu_157_p4 = {{bit_reg_60[ap_const_lv32_3E : ap_const_lv32_2]}};

assign bit_4_fu_271_p4 = {{bit_2_reg_117[ap_const_lv32_3E : ap_const_lv32_2]}};

assign bit_5_fu_167_p1 = bit_3_fu_157_p4;

assign bit_6_fu_281_p1 = bit_4_fu_271_p4;

assign bit_cast_fu_148_p1 = bit_reg_60;

assign exitcond_fu_171_p2 = (i_reg_72 == ap_const_lv2_2? 1'b1: 1'b0);

assign i_1_fu_177_p2 = (i_reg_72 + ap_const_lv2_1);

assign icmp_fu_301_p2 = (tmp_4_fu_291_p4 != ap_const_lv48_0? 1'b1: 1'b0);

assign num_assign_1_fu_307_p2 = (p_1_reg_137 - result_1_reg_127);

assign num_assign_2_fu_319_p2 = ($signed(ap_const_lv64_FFFFFFFFFFFFC000) + $signed(tmp_9_fu_313_p2));

assign num_assign_5_fu_365_p3 = ((sel_tmp5_fu_343_p2[0:0] === 1'b1) ? num_assign_2_fu_319_p2 : tmp_11_fu_337_p2);

assign num_assign_6_fu_380_p3 = ((tmp_6_reg_426[0:0] === 1'b1) ? num_assign_5_reg_437 : p_1_reg_137);

assign num_assign_7_fu_263_p3 = ((tmp_8_fu_223_p2[0:0] === 1'b1) ? p_1_reg_137 : num_assign_fu_243_p2);

assign num_assign_fu_243_p2 = (p_1_reg_137 - tmp_7_fu_217_p2);

assign result_2_fu_255_p3 = ((tmp_8_fu_223_p2[0:0] === 1'b1) ? result_9_fu_239_p1 : result_5_fu_249_p2);

assign result_3_fu_229_p4 = {{result_1_reg_127[ap_const_lv32_3F : ap_const_lv32_1]}};

assign result_4_fu_357_p3 = ((tmp_6_fu_285_p2[0:0] === 1'b1) ? result_8_fu_349_p3 : result_1_reg_127);

assign result_5_fu_249_p2 = (result_9_fu_239_p1 + bit_2_cast_fu_207_p1);

assign result_6_fu_331_p2 = (result_7_fu_325_p2 | ap_const_lv64_4000);

assign result_7_fu_325_p2 = result_1_reg_127 << ap_const_lv64_10;

assign result_8_fu_349_p3 = ((sel_tmp5_fu_343_p2[0:0] === 1'b1) ? result_6_fu_331_p2 : result_7_fu_325_p2);

assign result_9_fu_239_p1 = result_3_fu_229_p4;

assign sel_tmp5_fu_343_p2 = (tmp_6_fu_285_p2 & icmp_fu_301_p2);

assign tmp_11_fu_337_p2 = p_1_reg_137 << ap_const_lv64_10;

assign tmp_1_fu_189_p1 = result_reg_95[31:0];

assign tmp_2_fu_183_p2 = (p_0_reg_107 > result_reg_95? 1'b1: 1'b0);

assign tmp_4_fu_291_p4 = {{p_1_reg_137[ap_const_lv32_3F : ap_const_lv32_10]}};

assign tmp_5_fu_211_p2 = (bit_2_reg_117 == ap_const_lv63_0? 1'b1: 1'b0);

assign tmp_6_fu_285_p2 = (i_reg_72 == ap_const_lv2_0? 1'b1: 1'b0);

assign tmp_7_fu_217_p2 = (result_1_reg_127 + bit_2_cast_fu_207_p1);

assign tmp_8_fu_223_p2 = (p_1_reg_137 < tmp_7_fu_217_p2? 1'b1: 1'b0);

assign tmp_9_fu_313_p2 = num_assign_1_fu_307_p2 << ap_const_lv64_10;

assign tmp_fu_152_p2 = (bit_cast_fu_148_p1 > num? 1'b1: 1'b0);

assign tmp_s_fu_193_p2 = (ap_const_lv32_1 + tmp_1_fu_189_p1);
always @ (posedge ap_clk) begin
    num_assign_5_reg_437[13:0] <= 14'b00000000000000;
    bit_reg_60[1] <= 1'b0;
    bit_reg_60[3:3] <= 1'b0;
    bit_reg_60[5:5] <= 1'b0;
    bit_reg_60[7:7] <= 1'b0;
    bit_reg_60[9:9] <= 1'b0;
    bit_reg_60[11:11] <= 1'b0;
    bit_reg_60[13:13] <= 1'b0;
    bit_reg_60[15:15] <= 1'b0;
    bit_reg_60[17:17] <= 1'b0;
    bit_reg_60[19:19] <= 1'b0;
    bit_reg_60[21:21] <= 1'b0;
    bit_reg_60[23:23] <= 1'b0;
    bit_reg_60[25:25] <= 1'b0;
    bit_reg_60[27:27] <= 1'b0;
    bit_reg_60[29:29] <= 1'b0;
    bit_reg_60[31:31] <= 1'b0;
    bit_reg_60[33:33] <= 1'b0;
    bit_reg_60[35:35] <= 1'b0;
    bit_reg_60[37:37] <= 1'b0;
    bit_reg_60[39:39] <= 1'b0;
    bit_reg_60[41:41] <= 1'b0;
    bit_reg_60[43:43] <= 1'b0;
    bit_reg_60[45:45] <= 1'b0;
    bit_reg_60[47:47] <= 1'b0;
    bit_reg_60[49:49] <= 1'b0;
    bit_reg_60[51:51] <= 1'b0;
    bit_reg_60[53:53] <= 1'b0;
    bit_reg_60[55:55] <= 1'b0;
    bit_reg_60[57:57] <= 1'b0;
    bit_reg_60[59:59] <= 1'b0;
    bit_reg_60[61] <= 1'b0;
    bit_1_reg_84[1] <= 1'b0;
    bit_1_reg_84[3:3] <= 1'b0;
    bit_1_reg_84[5:5] <= 1'b0;
    bit_1_reg_84[7:7] <= 1'b0;
    bit_1_reg_84[9:9] <= 1'b0;
    bit_1_reg_84[11:11] <= 1'b0;
    bit_1_reg_84[13:13] <= 1'b0;
    bit_1_reg_84[15:15] <= 1'b0;
    bit_1_reg_84[17:17] <= 1'b0;
    bit_1_reg_84[19:19] <= 1'b0;
    bit_1_reg_84[21:21] <= 1'b0;
    bit_1_reg_84[23:23] <= 1'b0;
    bit_1_reg_84[25:25] <= 1'b0;
    bit_1_reg_84[27:27] <= 1'b0;
    bit_1_reg_84[29:29] <= 1'b0;
    bit_1_reg_84[31:31] <= 1'b0;
    bit_1_reg_84[33:33] <= 1'b0;
    bit_1_reg_84[35:35] <= 1'b0;
    bit_1_reg_84[37:37] <= 1'b0;
    bit_1_reg_84[39:39] <= 1'b0;
    bit_1_reg_84[41:41] <= 1'b0;
    bit_1_reg_84[43:43] <= 1'b0;
    bit_1_reg_84[45:45] <= 1'b0;
    bit_1_reg_84[47:47] <= 1'b0;
    bit_1_reg_84[49:49] <= 1'b0;
    bit_1_reg_84[51:51] <= 1'b0;
    bit_1_reg_84[53:53] <= 1'b0;
    bit_1_reg_84[55:55] <= 1'b0;
    bit_1_reg_84[57:57] <= 1'b0;
    bit_1_reg_84[59:59] <= 1'b0;
    bit_1_reg_84[61] <= 1'b0;
    bit_2_reg_117[1] <= 1'b0;
    bit_2_reg_117[3:3] <= 1'b0;
    bit_2_reg_117[5:5] <= 1'b0;
    bit_2_reg_117[7:7] <= 1'b0;
    bit_2_reg_117[9:9] <= 1'b0;
    bit_2_reg_117[11:11] <= 1'b0;
    bit_2_reg_117[13:13] <= 1'b0;
    bit_2_reg_117[15:15] <= 1'b0;
    bit_2_reg_117[17:17] <= 1'b0;
    bit_2_reg_117[19:19] <= 1'b0;
    bit_2_reg_117[21:21] <= 1'b0;
    bit_2_reg_117[23:23] <= 1'b0;
    bit_2_reg_117[25:25] <= 1'b0;
    bit_2_reg_117[27:27] <= 1'b0;
    bit_2_reg_117[29:29] <= 1'b0;
    bit_2_reg_117[31:31] <= 1'b0;
    bit_2_reg_117[33:33] <= 1'b0;
    bit_2_reg_117[35:35] <= 1'b0;
    bit_2_reg_117[37:37] <= 1'b0;
    bit_2_reg_117[39:39] <= 1'b0;
    bit_2_reg_117[41:41] <= 1'b0;
    bit_2_reg_117[43:43] <= 1'b0;
    bit_2_reg_117[45:45] <= 1'b0;
    bit_2_reg_117[47:47] <= 1'b0;
    bit_2_reg_117[49:49] <= 1'b0;
    bit_2_reg_117[51:51] <= 1'b0;
    bit_2_reg_117[53:53] <= 1'b0;
    bit_2_reg_117[55:55] <= 1'b0;
    bit_2_reg_117[57:57] <= 1'b0;
    bit_2_reg_117[59:59] <= 1'b0;
    bit_2_reg_117[61] <= 1'b0;
end



endmodule //fix64_sqrt

