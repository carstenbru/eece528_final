// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module intersect_fix64_sqrt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_FFFFC000 = 32'b11111111111111111100000000000000;
parameter    ap_const_lv32_4000 = 32'b100000000000000;
parameter    ap_const_lv15_4000 = 15'b100000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [15:0] bit_1_cast_fu_122_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_40;
wire   [1:0] i_1_fu_132_p2;
reg   [1:0] i_1_reg_353;
wire   [31:0] result_2_fu_206_p3;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_51;
wire   [0:0] tmp_1_fu_162_p2;
wire   [31:0] num_assign_7_fu_214_p3;
wire  signed [15:0] bit_fu_232_p1;
wire   [14:0] bit_3_fu_294_p3;
wire   [31:0] result_4_fu_316_p3;
wire   [31:0] num_assign_6_fu_332_p3;
reg   [1:0] i_reg_48;
reg   [14:0] bit_1_reg_60;
reg   [31:0] result_reg_71;
reg   [31:0] p_0_reg_83;
reg   [15:0] bit_2_reg_93;
wire   [0:0] exitcond_fu_126_p2;
reg   [31:0] result_1_reg_102;
reg   [31:0] p_1_reg_112;
wire   [0:0] tmp_s_fu_138_p2;
wire   [31:0] result_3_fu_144_p2;
wire  signed [31:0] bit_2_cast_fu_158_p1;
wire   [31:0] tmp_3_fu_168_p2;
wire   [30:0] result_5_fu_180_p4;
wire   [31:0] result_10_fu_190_p1;
wire   [0:0] tmp_4_fu_174_p2;
wire   [31:0] result_6_fu_200_p2;
wire   [31:0] num_assign_fu_194_p2;
wire   [13:0] tmp_5_fu_222_p4;
wire   [15:0] tmp_fu_242_p4;
wire   [31:0] num_assign_1_fu_258_p2;
wire   [31:0] tmp_12_fu_264_p2;
wire   [31:0] result_8_fu_276_p2;
wire   [0:0] tmp_2_fu_236_p2;
wire   [0:0] icmp_fu_252_p2;
wire   [0:0] sel_tmp5_fu_302_p2;
wire   [31:0] result_7_fu_282_p2;
wire   [31:0] result_9_fu_308_p3;
wire   [31:0] num_assign_2_fu_270_p2;
wire   [31:0] tmp_14_fu_288_p2;
wire   [31:0] num_assign_5_fu_324_p3;
wire   [31:0] p_result_fu_150_p3;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond_fu_126_p2))) begin
            ap_return_preg <= p_result_fu_150_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bit_1_reg_60[14] <= 1'b0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
                bit_1_reg_60[14] <= bit_3_fu_294_p3[14];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond_fu_126_p2))) begin
        bit_2_reg_93 <= bit_1_cast_fu_122_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        bit_2_reg_93 <= bit_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_48 <= ap_const_lv2_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        i_reg_48 <= i_1_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_0_reg_83 <= num;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        p_0_reg_83 <= num_assign_6_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond_fu_126_p2))) begin
        p_1_reg_112 <= p_0_reg_83;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        p_1_reg_112 <= num_assign_7_fu_214_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond_fu_126_p2))) begin
        result_1_reg_102 <= result_reg_71;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        result_1_reg_102 <= result_2_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        result_reg_71 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_1_fu_162_p2 == ap_const_lv1_0))) begin
        result_reg_71 <= result_4_fu_316_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_353 <= i_1_fu_132_p2;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_126_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond_fu_126_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_126_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond_fu_126_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_126_p2 or p_result_fu_150_p3 or ap_return_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond_fu_126_p2))) begin
        ap_return = p_result_fu_150_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_40) begin
    if (ap_sig_bdd_40) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_51) begin
    if (ap_sig_bdd_51) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_1_fu_162_p2 or exitcond_fu_126_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_126_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(tmp_1_fu_162_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_40 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_51 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign bit_1_cast_fu_122_p1 = bit_1_reg_60;

assign bit_2_cast_fu_158_p1 = $signed(bit_2_reg_93);

assign bit_3_fu_294_p3 = ((tmp_2_fu_236_p2[0:0] === 1'b1) ? ap_const_lv15_4000 : ap_const_lv15_0);

assign bit_fu_232_p1 = $signed(tmp_5_fu_222_p4);

assign exitcond_fu_126_p2 = (i_reg_48 == ap_const_lv2_2? 1'b1: 1'b0);

assign i_1_fu_132_p2 = (i_reg_48 + ap_const_lv2_1);

assign icmp_fu_252_p2 = (tmp_fu_242_p4 != ap_const_lv16_0? 1'b1: 1'b0);

assign num_assign_1_fu_258_p2 = (p_1_reg_112 - result_1_reg_102);

assign num_assign_2_fu_270_p2 = ($signed(ap_const_lv32_FFFFC000) + $signed(tmp_12_fu_264_p2));

assign num_assign_5_fu_324_p3 = ((sel_tmp5_fu_302_p2[0:0] === 1'b1) ? num_assign_2_fu_270_p2 : tmp_14_fu_288_p2);

assign num_assign_6_fu_332_p3 = ((tmp_2_fu_236_p2[0:0] === 1'b1) ? num_assign_5_fu_324_p3 : p_1_reg_112);

assign num_assign_7_fu_214_p3 = ((tmp_4_fu_174_p2[0:0] === 1'b1) ? p_1_reg_112 : num_assign_fu_194_p2);

assign num_assign_fu_194_p2 = (p_1_reg_112 - tmp_3_fu_168_p2);

assign p_result_fu_150_p3 = ((tmp_s_fu_138_p2[0:0] === 1'b1) ? result_3_fu_144_p2 : result_reg_71);

assign result_10_fu_190_p1 = result_5_fu_180_p4;

assign result_2_fu_206_p3 = ((tmp_4_fu_174_p2[0:0] === 1'b1) ? result_10_fu_190_p1 : result_6_fu_200_p2);

assign result_3_fu_144_p2 = (result_reg_71 + ap_const_lv32_1);

assign result_4_fu_316_p3 = ((tmp_2_fu_236_p2[0:0] === 1'b1) ? result_9_fu_308_p3 : result_1_reg_102);

assign result_5_fu_180_p4 = {{result_1_reg_102[ap_const_lv32_1F : ap_const_lv32_1]}};

assign result_6_fu_200_p2 = ($signed(bit_2_cast_fu_158_p1) + $signed(result_10_fu_190_p1));

assign result_7_fu_282_p2 = (result_8_fu_276_p2 | ap_const_lv32_4000);

assign result_8_fu_276_p2 = result_1_reg_102 << ap_const_lv32_10;

assign result_9_fu_308_p3 = ((sel_tmp5_fu_302_p2[0:0] === 1'b1) ? result_7_fu_282_p2 : result_8_fu_276_p2);

assign sel_tmp5_fu_302_p2 = (tmp_2_fu_236_p2 & icmp_fu_252_p2);

assign tmp_12_fu_264_p2 = num_assign_1_fu_258_p2 << ap_const_lv32_10;

assign tmp_14_fu_288_p2 = p_1_reg_112 << ap_const_lv32_10;

assign tmp_1_fu_162_p2 = (bit_2_reg_93 == ap_const_lv16_0? 1'b1: 1'b0);

assign tmp_2_fu_236_p2 = (i_reg_48 == ap_const_lv2_0? 1'b1: 1'b0);

assign tmp_3_fu_168_p2 = ($signed(bit_2_cast_fu_158_p1) + $signed(result_1_reg_102));

assign tmp_4_fu_174_p2 = (p_1_reg_112 < tmp_3_fu_168_p2? 1'b1: 1'b0);

assign tmp_5_fu_222_p4 = {{bit_2_reg_93[ap_const_lv32_F : ap_const_lv32_2]}};

assign tmp_fu_242_p4 = {{p_1_reg_112[ap_const_lv32_1F : ap_const_lv32_10]}};

assign tmp_s_fu_138_p2 = (p_0_reg_83 > result_reg_71? 1'b1: 1'b0);
always @ (posedge ap_clk) begin
    bit_1_reg_60[13:0] <= 14'b00000000000000;
end



endmodule //intersect_fix64_sqrt

