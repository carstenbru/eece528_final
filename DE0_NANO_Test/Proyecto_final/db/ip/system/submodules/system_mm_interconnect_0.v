// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        clk_sys_clk_clk,                                              //                                            clk_sys_clk.clk
		input  wire        alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset, // alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset.reset
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,                      //                      cpu_reset_n_reset_bridge_in_reset.reset
		input  wire [31:0] alt_vip_vfr_0_avalon_master_address,                          //                            alt_vip_vfr_0_avalon_master.address
		output wire        alt_vip_vfr_0_avalon_master_waitrequest,                      //                                                       .waitrequest
		input  wire [5:0]  alt_vip_vfr_0_avalon_master_burstcount,                       //                                                       .burstcount
		input  wire        alt_vip_vfr_0_avalon_master_read,                             //                                                       .read
		output wire [31:0] alt_vip_vfr_0_avalon_master_readdata,                         //                                                       .readdata
		output wire        alt_vip_vfr_0_avalon_master_readdatavalid,                    //                                                       .readdatavalid
		input  wire [25:0] cpu_data_master_address,                                      //                                        cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                  //                                                       .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                   //                                                       .byteenable
		input  wire        cpu_data_master_read,                                         //                                                       .read
		output wire [31:0] cpu_data_master_readdata,                                     //                                                       .readdata
		input  wire        cpu_data_master_write,                                        //                                                       .write
		input  wire [31:0] cpu_data_master_writedata,                                    //                                                       .writedata
		input  wire        cpu_data_master_debugaccess,                                  //                                                       .debugaccess
		input  wire [25:0] cpu_instruction_master_address,                               //                                 cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                           //                                                       .waitrequest
		input  wire        cpu_instruction_master_read,                                  //                                                       .read
		output wire [31:0] cpu_instruction_master_readdata,                              //                                                       .readdata
		output wire        cpu_instruction_master_readdatavalid,                         //                                                       .readdatavalid
		output wire [4:0]  alt_vip_vfr_0_avalon_slave_address,                           //                             alt_vip_vfr_0_avalon_slave.address
		output wire        alt_vip_vfr_0_avalon_slave_write,                             //                                                       .write
		output wire        alt_vip_vfr_0_avalon_slave_read,                              //                                                       .read
		input  wire [31:0] alt_vip_vfr_0_avalon_slave_readdata,                          //                                                       .readdata
		output wire [31:0] alt_vip_vfr_0_avalon_slave_writedata,                         //                                                       .writedata
		output wire [1:0]  analog1_x_s1_address,                                         //                                           analog1_x_s1.address
		input  wire [31:0] analog1_x_s1_readdata,                                        //                                                       .readdata
		output wire [1:0]  analog1_y_s1_address,                                         //                                           analog1_y_s1.address
		input  wire [31:0] analog1_y_s1_readdata,                                        //                                                       .readdata
		output wire [1:0]  analog2_x_s1_address,                                         //                                           analog2_x_s1.address
		input  wire [31:0] analog2_x_s1_readdata,                                        //                                                       .readdata
		output wire [1:0]  analog2_y_s1_address,                                         //                                           analog2_y_s1.address
		input  wire [31:0] analog2_y_s1_readdata,                                        //                                                       .readdata
		output wire [1:0]  boton_a_s1_address,                                           //                                             boton_a_s1.address
		input  wire [31:0] boton_a_s1_readdata,                                          //                                                       .readdata
		output wire [1:0]  boton_b_s1_address,                                           //                                             boton_b_s1.address
		input  wire [31:0] boton_b_s1_readdata,                                          //                                                       .readdata
		output wire [1:0]  boton_down_s1_address,                                        //                                          boton_down_s1.address
		input  wire [31:0] boton_down_s1_readdata,                                       //                                                       .readdata
		output wire [1:0]  boton_l_s1_address,                                           //                                             boton_l_s1.address
		input  wire [31:0] boton_l_s1_readdata,                                          //                                                       .readdata
		output wire [1:0]  boton_left_s1_address,                                        //                                          boton_left_s1.address
		input  wire [31:0] boton_left_s1_readdata,                                       //                                                       .readdata
		output wire [1:0]  boton_r_s1_address,                                           //                                             boton_r_s1.address
		input  wire [31:0] boton_r_s1_readdata,                                          //                                                       .readdata
		output wire [1:0]  boton_right_s1_address,                                       //                                         boton_right_s1.address
		input  wire [31:0] boton_right_s1_readdata,                                      //                                                       .readdata
		output wire [1:0]  boton_up_s1_address,                                          //                                            boton_up_s1.address
		input  wire [31:0] boton_up_s1_readdata,                                         //                                                       .readdata
		output wire [1:0]  boton_x_s1_address,                                           //                                             boton_x_s1.address
		input  wire [31:0] boton_x_s1_readdata,                                          //                                                       .readdata
		output wire [1:0]  boton_y_s1_address,                                           //                                             boton_y_s1.address
		input  wire [31:0] boton_y_s1_readdata,                                          //                                                       .readdata
		output wire [8:0]  cpu_jtag_debug_module_address,                                //                                  cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                                  //                                                       .write
		output wire        cpu_jtag_debug_module_read,                                   //                                                       .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                               //                                                       .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,                              //                                                       .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,                             //                                                       .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,                            //                                                       .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,                            //                                                       .debugaccess
		output wire [8:0]  epcs_epcs_control_port_address,                               //                                 epcs_epcs_control_port.address
		output wire        epcs_epcs_control_port_write,                                 //                                                       .write
		output wire        epcs_epcs_control_port_read,                                  //                                                       .read
		input  wire [31:0] epcs_epcs_control_port_readdata,                              //                                                       .readdata
		output wire [31:0] epcs_epcs_control_port_writedata,                             //                                                       .writedata
		output wire        epcs_epcs_control_port_chipselect,                            //                                                       .chipselect
		output wire [1:0]  f_engine_frac_cpu_address,                                    //                                      f_engine_frac_cpu.address
		output wire        f_engine_frac_cpu_write,                                      //                                                       .write
		input  wire [31:0] f_engine_frac_cpu_readdata,                                   //                                                       .readdata
		output wire [31:0] f_engine_frac_cpu_writedata,                                  //                                                       .writedata
		output wire        f_engine_frac_cpu_chipselect,                                 //                                                       .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                          //                            jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                            //                                                       .write
		output wire        jtag_uart_avalon_jtag_slave_read,                             //                                                       .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                         //                                                       .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                        //                                                       .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                      //                                                       .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                       //                                                       .chipselect
		output wire [2:0]  pio_led_green_s1_address,                                     //                                       pio_led_green_s1.address
		output wire        pio_led_green_s1_write,                                       //                                                       .write
		input  wire [31:0] pio_led_green_s1_readdata,                                    //                                                       .readdata
		output wire [31:0] pio_led_green_s1_writedata,                                   //                                                       .writedata
		output wire        pio_led_green_s1_chipselect,                                  //                                                       .chipselect
		output wire [1:0]  pio_sw_s1_address,                                            //                                              pio_sw_s1.address
		input  wire [31:0] pio_sw_s1_readdata,                                           //                                                       .readdata
		output wire [23:0] sdram_s1_address,                                             //                                               sdram_s1.address
		output wire        sdram_s1_write,                                               //                                                       .write
		output wire        sdram_s1_read,                                                //                                                       .read
		input  wire [15:0] sdram_s1_readdata,                                            //                                                       .readdata
		output wire [15:0] sdram_s1_writedata,                                           //                                                       .writedata
		output wire [1:0]  sdram_s1_byteenable,                                          //                                                       .byteenable
		input  wire        sdram_s1_readdatavalid,                                       //                                                       .readdatavalid
		input  wire        sdram_s1_waitrequest,                                         //                                                       .waitrequest
		output wire        sdram_s1_chipselect,                                          //                                                       .chipselect
		output wire [0:0]  sysid_control_slave_address,                                  //                                    sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                                 //                                                       .readdata
		output wire [2:0]  timer_0_s1_address,                                           //                                             timer_0_s1.address
		output wire        timer_0_s1_write,                                             //                                                       .write
		input  wire [15:0] timer_0_s1_readdata,                                          //                                                       .readdata
		output wire [15:0] timer_0_s1_writedata,                                         //                                                       .writedata
		output wire        timer_0_s1_chipselect,                                        //                                                       .chipselect
		output wire [1:0]  touch_panel_busy_s1_address,                                  //                                    touch_panel_busy_s1.address
		input  wire [31:0] touch_panel_busy_s1_readdata,                                 //                                                       .readdata
		output wire [1:0]  touch_panel_penirq_n_s1_address,                              //                                touch_panel_penirq_n_s1.address
		output wire        touch_panel_penirq_n_s1_write,                                //                                                       .write
		input  wire [31:0] touch_panel_penirq_n_s1_readdata,                             //                                                       .readdata
		output wire [31:0] touch_panel_penirq_n_s1_writedata,                            //                                                       .writedata
		output wire        touch_panel_penirq_n_s1_chipselect,                           //                                                       .chipselect
		output wire [2:0]  touch_panel_spi_spi_control_port_address,                     //                       touch_panel_spi_spi_control_port.address
		output wire        touch_panel_spi_spi_control_port_write,                       //                                                       .write
		output wire        touch_panel_spi_spi_control_port_read,                        //                                                       .read
		input  wire [15:0] touch_panel_spi_spi_control_port_readdata,                    //                                                       .readdata
		output wire [15:0] touch_panel_spi_spi_control_port_writedata,                   //                                                       .writedata
		output wire        touch_panel_spi_spi_control_port_chipselect                   //                                                       .chipselect
	);

	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // alt_vip_vfr_0_avalon_master_agent:av_waitrequest -> alt_vip_vfr_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdata;      // alt_vip_vfr_0_avalon_master_agent:av_readdata -> alt_vip_vfr_0_avalon_master_translator:uav_readdata
	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // alt_vip_vfr_0_avalon_master_translator:uav_debugaccess -> alt_vip_vfr_0_avalon_master_agent:av_debugaccess
	wire   [31:0] alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_address;       // alt_vip_vfr_0_avalon_master_translator:uav_address -> alt_vip_vfr_0_avalon_master_agent:av_address
	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_read;          // alt_vip_vfr_0_avalon_master_translator:uav_read -> alt_vip_vfr_0_avalon_master_agent:av_read
	wire    [3:0] alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // alt_vip_vfr_0_avalon_master_translator:uav_byteenable -> alt_vip_vfr_0_avalon_master_agent:av_byteenable
	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // alt_vip_vfr_0_avalon_master_agent:av_readdatavalid -> alt_vip_vfr_0_avalon_master_translator:uav_readdatavalid
	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_lock;          // alt_vip_vfr_0_avalon_master_translator:uav_lock -> alt_vip_vfr_0_avalon_master_agent:av_lock
	wire          alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_write;         // alt_vip_vfr_0_avalon_master_translator:uav_write -> alt_vip_vfr_0_avalon_master_agent:av_write
	wire   [31:0] alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_writedata;     // alt_vip_vfr_0_avalon_master_translator:uav_writedata -> alt_vip_vfr_0_avalon_master_agent:av_writedata
	wire    [7:0] alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // alt_vip_vfr_0_avalon_master_translator:uav_burstcount -> alt_vip_vfr_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> alt_vip_vfr_0_avalon_master_agent:rp_valid
	wire  [116:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> alt_vip_vfr_0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                              // alt_vip_vfr_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [26:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> alt_vip_vfr_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> alt_vip_vfr_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> alt_vip_vfr_0_avalon_master_agent:rp_endofpacket
	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;               // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                  // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;               // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;                   // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                      // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;             // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                      // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                     // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                 // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> cpu_data_master_agent:rp_valid
	wire  [116:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> cpu_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                          // cpu_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [26:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> cpu_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;        // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;           // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;        // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;            // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;               // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;         // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;      // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;               // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;              // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;          // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;         // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                     // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                  // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                  // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                      // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                   // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                         // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                         // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                    // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                        // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                   // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                 // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [99:0] sdram_s1_agent_rf_source_data;                                                  // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                 // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                         // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                           // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                              // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [99:0] sdram_s1_agent_rsp_fifo_out_data;                                               // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                              // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                      // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                        // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                            // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                             // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                            // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] epcs_epcs_control_port_agent_m0_readdata;                                       // epcs_epcs_control_port_translator:uav_readdata -> epcs_epcs_control_port_agent:m0_readdata
	wire          epcs_epcs_control_port_agent_m0_waitrequest;                                    // epcs_epcs_control_port_translator:uav_waitrequest -> epcs_epcs_control_port_agent:m0_waitrequest
	wire          epcs_epcs_control_port_agent_m0_debugaccess;                                    // epcs_epcs_control_port_agent:m0_debugaccess -> epcs_epcs_control_port_translator:uav_debugaccess
	wire   [31:0] epcs_epcs_control_port_agent_m0_address;                                        // epcs_epcs_control_port_agent:m0_address -> epcs_epcs_control_port_translator:uav_address
	wire    [3:0] epcs_epcs_control_port_agent_m0_byteenable;                                     // epcs_epcs_control_port_agent:m0_byteenable -> epcs_epcs_control_port_translator:uav_byteenable
	wire          epcs_epcs_control_port_agent_m0_read;                                           // epcs_epcs_control_port_agent:m0_read -> epcs_epcs_control_port_translator:uav_read
	wire          epcs_epcs_control_port_agent_m0_readdatavalid;                                  // epcs_epcs_control_port_translator:uav_readdatavalid -> epcs_epcs_control_port_agent:m0_readdatavalid
	wire          epcs_epcs_control_port_agent_m0_lock;                                           // epcs_epcs_control_port_agent:m0_lock -> epcs_epcs_control_port_translator:uav_lock
	wire   [31:0] epcs_epcs_control_port_agent_m0_writedata;                                      // epcs_epcs_control_port_agent:m0_writedata -> epcs_epcs_control_port_translator:uav_writedata
	wire          epcs_epcs_control_port_agent_m0_write;                                          // epcs_epcs_control_port_agent:m0_write -> epcs_epcs_control_port_translator:uav_write
	wire    [2:0] epcs_epcs_control_port_agent_m0_burstcount;                                     // epcs_epcs_control_port_agent:m0_burstcount -> epcs_epcs_control_port_translator:uav_burstcount
	wire          epcs_epcs_control_port_agent_rf_source_valid;                                   // epcs_epcs_control_port_agent:rf_source_valid -> epcs_epcs_control_port_agent_rsp_fifo:in_valid
	wire  [117:0] epcs_epcs_control_port_agent_rf_source_data;                                    // epcs_epcs_control_port_agent:rf_source_data -> epcs_epcs_control_port_agent_rsp_fifo:in_data
	wire          epcs_epcs_control_port_agent_rf_source_ready;                                   // epcs_epcs_control_port_agent_rsp_fifo:in_ready -> epcs_epcs_control_port_agent:rf_source_ready
	wire          epcs_epcs_control_port_agent_rf_source_startofpacket;                           // epcs_epcs_control_port_agent:rf_source_startofpacket -> epcs_epcs_control_port_agent_rsp_fifo:in_startofpacket
	wire          epcs_epcs_control_port_agent_rf_source_endofpacket;                             // epcs_epcs_control_port_agent:rf_source_endofpacket -> epcs_epcs_control_port_agent_rsp_fifo:in_endofpacket
	wire          epcs_epcs_control_port_agent_rsp_fifo_out_valid;                                // epcs_epcs_control_port_agent_rsp_fifo:out_valid -> epcs_epcs_control_port_agent:rf_sink_valid
	wire  [117:0] epcs_epcs_control_port_agent_rsp_fifo_out_data;                                 // epcs_epcs_control_port_agent_rsp_fifo:out_data -> epcs_epcs_control_port_agent:rf_sink_data
	wire          epcs_epcs_control_port_agent_rsp_fifo_out_ready;                                // epcs_epcs_control_port_agent:rf_sink_ready -> epcs_epcs_control_port_agent_rsp_fifo:out_ready
	wire          epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket;                        // epcs_epcs_control_port_agent_rsp_fifo:out_startofpacket -> epcs_epcs_control_port_agent:rf_sink_startofpacket
	wire          epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket;                          // epcs_epcs_control_port_agent_rsp_fifo:out_endofpacket -> epcs_epcs_control_port_agent:rf_sink_endofpacket
	wire   [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                        // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire          cpu_jtag_debug_module_agent_m0_waitrequest;                                     // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire          cpu_jtag_debug_module_agent_m0_debugaccess;                                     // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] cpu_jtag_debug_module_agent_m0_address;                                         // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire    [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                      // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_agent_m0_read;                                            // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire          cpu_jtag_debug_module_agent_m0_readdatavalid;                                   // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_lock;                                            // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire   [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                       // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire          cpu_jtag_debug_module_agent_m0_write;                                           // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire    [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                      // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire          cpu_jtag_debug_module_agent_rf_source_valid;                                    // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_jtag_debug_module_agent_rf_source_data;                                     // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rf_source_ready;                                    // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire          cpu_jtag_debug_module_agent_rf_source_startofpacket;                            // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rf_source_endofpacket;                              // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                                 // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire  [117:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                                  // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                                 // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                         // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                           // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                  // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                               // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                               // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                   // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                      // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                             // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                      // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                 // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                     // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                              // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                      // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                           // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                           // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_readdata;                                   // alt_vip_vfr_0_avalon_slave_translator:uav_readdata -> alt_vip_vfr_0_avalon_slave_agent:m0_readdata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest;                                // alt_vip_vfr_0_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_0_avalon_slave_agent:m0_waitrequest
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess;                                // alt_vip_vfr_0_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_address;                                    // alt_vip_vfr_0_avalon_slave_agent:m0_address -> alt_vip_vfr_0_avalon_slave_translator:uav_address
	wire    [3:0] alt_vip_vfr_0_avalon_slave_agent_m0_byteenable;                                 // alt_vip_vfr_0_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_0_avalon_slave_translator:uav_byteenable
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_read;                                       // alt_vip_vfr_0_avalon_slave_agent:m0_read -> alt_vip_vfr_0_avalon_slave_translator:uav_read
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid;                              // alt_vip_vfr_0_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_0_avalon_slave_agent:m0_readdatavalid
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_lock;                                       // alt_vip_vfr_0_avalon_slave_agent:m0_lock -> alt_vip_vfr_0_avalon_slave_translator:uav_lock
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_writedata;                                  // alt_vip_vfr_0_avalon_slave_agent:m0_writedata -> alt_vip_vfr_0_avalon_slave_translator:uav_writedata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_write;                                      // alt_vip_vfr_0_avalon_slave_agent:m0_write -> alt_vip_vfr_0_avalon_slave_translator:uav_write
	wire    [2:0] alt_vip_vfr_0_avalon_slave_agent_m0_burstcount;                                 // alt_vip_vfr_0_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_0_avalon_slave_translator:uav_burstcount
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_valid;                               // alt_vip_vfr_0_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [117:0] alt_vip_vfr_0_avalon_slave_agent_rf_source_data;                                // alt_vip_vfr_0_avalon_slave_agent:rf_source_data -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_ready;                               // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rf_source_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket;                       // alt_vip_vfr_0_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket;                         // alt_vip_vfr_0_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid;                            // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_valid
	wire  [117:0] alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data;                             // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready;                            // alt_vip_vfr_0_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                    // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                      // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                          // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                       // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                       // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                           // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                        // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                              // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                     // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                              // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                         // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                             // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                        // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                      // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [117:0] sysid_control_slave_agent_rf_source_data;                                       // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                      // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                              // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                   // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [117:0] sysid_control_slave_agent_rsp_fifo_out_data;                                    // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                   // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                           // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                             // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire   [31:0] f_engine_frac_cpu_agent_m0_readdata;                                            // f_engine_frac_cpu_translator:uav_readdata -> f_engine_frac_cpu_agent:m0_readdata
	wire          f_engine_frac_cpu_agent_m0_waitrequest;                                         // f_engine_frac_cpu_translator:uav_waitrequest -> f_engine_frac_cpu_agent:m0_waitrequest
	wire          f_engine_frac_cpu_agent_m0_debugaccess;                                         // f_engine_frac_cpu_agent:m0_debugaccess -> f_engine_frac_cpu_translator:uav_debugaccess
	wire   [31:0] f_engine_frac_cpu_agent_m0_address;                                             // f_engine_frac_cpu_agent:m0_address -> f_engine_frac_cpu_translator:uav_address
	wire    [3:0] f_engine_frac_cpu_agent_m0_byteenable;                                          // f_engine_frac_cpu_agent:m0_byteenable -> f_engine_frac_cpu_translator:uav_byteenable
	wire          f_engine_frac_cpu_agent_m0_read;                                                // f_engine_frac_cpu_agent:m0_read -> f_engine_frac_cpu_translator:uav_read
	wire          f_engine_frac_cpu_agent_m0_readdatavalid;                                       // f_engine_frac_cpu_translator:uav_readdatavalid -> f_engine_frac_cpu_agent:m0_readdatavalid
	wire          f_engine_frac_cpu_agent_m0_lock;                                                // f_engine_frac_cpu_agent:m0_lock -> f_engine_frac_cpu_translator:uav_lock
	wire   [31:0] f_engine_frac_cpu_agent_m0_writedata;                                           // f_engine_frac_cpu_agent:m0_writedata -> f_engine_frac_cpu_translator:uav_writedata
	wire          f_engine_frac_cpu_agent_m0_write;                                               // f_engine_frac_cpu_agent:m0_write -> f_engine_frac_cpu_translator:uav_write
	wire    [2:0] f_engine_frac_cpu_agent_m0_burstcount;                                          // f_engine_frac_cpu_agent:m0_burstcount -> f_engine_frac_cpu_translator:uav_burstcount
	wire          f_engine_frac_cpu_agent_rf_source_valid;                                        // f_engine_frac_cpu_agent:rf_source_valid -> f_engine_frac_cpu_agent_rsp_fifo:in_valid
	wire  [117:0] f_engine_frac_cpu_agent_rf_source_data;                                         // f_engine_frac_cpu_agent:rf_source_data -> f_engine_frac_cpu_agent_rsp_fifo:in_data
	wire          f_engine_frac_cpu_agent_rf_source_ready;                                        // f_engine_frac_cpu_agent_rsp_fifo:in_ready -> f_engine_frac_cpu_agent:rf_source_ready
	wire          f_engine_frac_cpu_agent_rf_source_startofpacket;                                // f_engine_frac_cpu_agent:rf_source_startofpacket -> f_engine_frac_cpu_agent_rsp_fifo:in_startofpacket
	wire          f_engine_frac_cpu_agent_rf_source_endofpacket;                                  // f_engine_frac_cpu_agent:rf_source_endofpacket -> f_engine_frac_cpu_agent_rsp_fifo:in_endofpacket
	wire          f_engine_frac_cpu_agent_rsp_fifo_out_valid;                                     // f_engine_frac_cpu_agent_rsp_fifo:out_valid -> f_engine_frac_cpu_agent:rf_sink_valid
	wire  [117:0] f_engine_frac_cpu_agent_rsp_fifo_out_data;                                      // f_engine_frac_cpu_agent_rsp_fifo:out_data -> f_engine_frac_cpu_agent:rf_sink_data
	wire          f_engine_frac_cpu_agent_rsp_fifo_out_ready;                                     // f_engine_frac_cpu_agent:rf_sink_ready -> f_engine_frac_cpu_agent_rsp_fifo:out_ready
	wire          f_engine_frac_cpu_agent_rsp_fifo_out_startofpacket;                             // f_engine_frac_cpu_agent_rsp_fifo:out_startofpacket -> f_engine_frac_cpu_agent:rf_sink_startofpacket
	wire          f_engine_frac_cpu_agent_rsp_fifo_out_endofpacket;                               // f_engine_frac_cpu_agent_rsp_fifo:out_endofpacket -> f_engine_frac_cpu_agent:rf_sink_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                   // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                    // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                 // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                       // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                              // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                       // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                  // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                      // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                 // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                               // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [117:0] timer_0_s1_agent_rf_source_data;                                                // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                               // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                       // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                         // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                            // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [117:0] timer_0_s1_agent_rsp_fifo_out_data;                                             // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                            // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                    // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                      // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire   [31:0] pio_led_green_s1_agent_m0_readdata;                                             // pio_led_green_s1_translator:uav_readdata -> pio_led_green_s1_agent:m0_readdata
	wire          pio_led_green_s1_agent_m0_waitrequest;                                          // pio_led_green_s1_translator:uav_waitrequest -> pio_led_green_s1_agent:m0_waitrequest
	wire          pio_led_green_s1_agent_m0_debugaccess;                                          // pio_led_green_s1_agent:m0_debugaccess -> pio_led_green_s1_translator:uav_debugaccess
	wire   [31:0] pio_led_green_s1_agent_m0_address;                                              // pio_led_green_s1_agent:m0_address -> pio_led_green_s1_translator:uav_address
	wire    [3:0] pio_led_green_s1_agent_m0_byteenable;                                           // pio_led_green_s1_agent:m0_byteenable -> pio_led_green_s1_translator:uav_byteenable
	wire          pio_led_green_s1_agent_m0_read;                                                 // pio_led_green_s1_agent:m0_read -> pio_led_green_s1_translator:uav_read
	wire          pio_led_green_s1_agent_m0_readdatavalid;                                        // pio_led_green_s1_translator:uav_readdatavalid -> pio_led_green_s1_agent:m0_readdatavalid
	wire          pio_led_green_s1_agent_m0_lock;                                                 // pio_led_green_s1_agent:m0_lock -> pio_led_green_s1_translator:uav_lock
	wire   [31:0] pio_led_green_s1_agent_m0_writedata;                                            // pio_led_green_s1_agent:m0_writedata -> pio_led_green_s1_translator:uav_writedata
	wire          pio_led_green_s1_agent_m0_write;                                                // pio_led_green_s1_agent:m0_write -> pio_led_green_s1_translator:uav_write
	wire    [2:0] pio_led_green_s1_agent_m0_burstcount;                                           // pio_led_green_s1_agent:m0_burstcount -> pio_led_green_s1_translator:uav_burstcount
	wire          pio_led_green_s1_agent_rf_source_valid;                                         // pio_led_green_s1_agent:rf_source_valid -> pio_led_green_s1_agent_rsp_fifo:in_valid
	wire  [117:0] pio_led_green_s1_agent_rf_source_data;                                          // pio_led_green_s1_agent:rf_source_data -> pio_led_green_s1_agent_rsp_fifo:in_data
	wire          pio_led_green_s1_agent_rf_source_ready;                                         // pio_led_green_s1_agent_rsp_fifo:in_ready -> pio_led_green_s1_agent:rf_source_ready
	wire          pio_led_green_s1_agent_rf_source_startofpacket;                                 // pio_led_green_s1_agent:rf_source_startofpacket -> pio_led_green_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_led_green_s1_agent_rf_source_endofpacket;                                   // pio_led_green_s1_agent:rf_source_endofpacket -> pio_led_green_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_led_green_s1_agent_rsp_fifo_out_valid;                                      // pio_led_green_s1_agent_rsp_fifo:out_valid -> pio_led_green_s1_agent:rf_sink_valid
	wire  [117:0] pio_led_green_s1_agent_rsp_fifo_out_data;                                       // pio_led_green_s1_agent_rsp_fifo:out_data -> pio_led_green_s1_agent:rf_sink_data
	wire          pio_led_green_s1_agent_rsp_fifo_out_ready;                                      // pio_led_green_s1_agent:rf_sink_ready -> pio_led_green_s1_agent_rsp_fifo:out_ready
	wire          pio_led_green_s1_agent_rsp_fifo_out_startofpacket;                              // pio_led_green_s1_agent_rsp_fifo:out_startofpacket -> pio_led_green_s1_agent:rf_sink_startofpacket
	wire          pio_led_green_s1_agent_rsp_fifo_out_endofpacket;                                // pio_led_green_s1_agent_rsp_fifo:out_endofpacket -> pio_led_green_s1_agent:rf_sink_endofpacket
	wire   [31:0] pio_sw_s1_agent_m0_readdata;                                                    // pio_sw_s1_translator:uav_readdata -> pio_sw_s1_agent:m0_readdata
	wire          pio_sw_s1_agent_m0_waitrequest;                                                 // pio_sw_s1_translator:uav_waitrequest -> pio_sw_s1_agent:m0_waitrequest
	wire          pio_sw_s1_agent_m0_debugaccess;                                                 // pio_sw_s1_agent:m0_debugaccess -> pio_sw_s1_translator:uav_debugaccess
	wire   [31:0] pio_sw_s1_agent_m0_address;                                                     // pio_sw_s1_agent:m0_address -> pio_sw_s1_translator:uav_address
	wire    [3:0] pio_sw_s1_agent_m0_byteenable;                                                  // pio_sw_s1_agent:m0_byteenable -> pio_sw_s1_translator:uav_byteenable
	wire          pio_sw_s1_agent_m0_read;                                                        // pio_sw_s1_agent:m0_read -> pio_sw_s1_translator:uav_read
	wire          pio_sw_s1_agent_m0_readdatavalid;                                               // pio_sw_s1_translator:uav_readdatavalid -> pio_sw_s1_agent:m0_readdatavalid
	wire          pio_sw_s1_agent_m0_lock;                                                        // pio_sw_s1_agent:m0_lock -> pio_sw_s1_translator:uav_lock
	wire   [31:0] pio_sw_s1_agent_m0_writedata;                                                   // pio_sw_s1_agent:m0_writedata -> pio_sw_s1_translator:uav_writedata
	wire          pio_sw_s1_agent_m0_write;                                                       // pio_sw_s1_agent:m0_write -> pio_sw_s1_translator:uav_write
	wire    [2:0] pio_sw_s1_agent_m0_burstcount;                                                  // pio_sw_s1_agent:m0_burstcount -> pio_sw_s1_translator:uav_burstcount
	wire          pio_sw_s1_agent_rf_source_valid;                                                // pio_sw_s1_agent:rf_source_valid -> pio_sw_s1_agent_rsp_fifo:in_valid
	wire  [117:0] pio_sw_s1_agent_rf_source_data;                                                 // pio_sw_s1_agent:rf_source_data -> pio_sw_s1_agent_rsp_fifo:in_data
	wire          pio_sw_s1_agent_rf_source_ready;                                                // pio_sw_s1_agent_rsp_fifo:in_ready -> pio_sw_s1_agent:rf_source_ready
	wire          pio_sw_s1_agent_rf_source_startofpacket;                                        // pio_sw_s1_agent:rf_source_startofpacket -> pio_sw_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_sw_s1_agent_rf_source_endofpacket;                                          // pio_sw_s1_agent:rf_source_endofpacket -> pio_sw_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_sw_s1_agent_rsp_fifo_out_valid;                                             // pio_sw_s1_agent_rsp_fifo:out_valid -> pio_sw_s1_agent:rf_sink_valid
	wire  [117:0] pio_sw_s1_agent_rsp_fifo_out_data;                                              // pio_sw_s1_agent_rsp_fifo:out_data -> pio_sw_s1_agent:rf_sink_data
	wire          pio_sw_s1_agent_rsp_fifo_out_ready;                                             // pio_sw_s1_agent:rf_sink_ready -> pio_sw_s1_agent_rsp_fifo:out_ready
	wire          pio_sw_s1_agent_rsp_fifo_out_startofpacket;                                     // pio_sw_s1_agent_rsp_fifo:out_startofpacket -> pio_sw_s1_agent:rf_sink_startofpacket
	wire          pio_sw_s1_agent_rsp_fifo_out_endofpacket;                                       // pio_sw_s1_agent_rsp_fifo:out_endofpacket -> pio_sw_s1_agent:rf_sink_endofpacket
	wire   [31:0] touch_panel_busy_s1_agent_m0_readdata;                                          // touch_panel_busy_s1_translator:uav_readdata -> touch_panel_busy_s1_agent:m0_readdata
	wire          touch_panel_busy_s1_agent_m0_waitrequest;                                       // touch_panel_busy_s1_translator:uav_waitrequest -> touch_panel_busy_s1_agent:m0_waitrequest
	wire          touch_panel_busy_s1_agent_m0_debugaccess;                                       // touch_panel_busy_s1_agent:m0_debugaccess -> touch_panel_busy_s1_translator:uav_debugaccess
	wire   [31:0] touch_panel_busy_s1_agent_m0_address;                                           // touch_panel_busy_s1_agent:m0_address -> touch_panel_busy_s1_translator:uav_address
	wire    [3:0] touch_panel_busy_s1_agent_m0_byteenable;                                        // touch_panel_busy_s1_agent:m0_byteenable -> touch_panel_busy_s1_translator:uav_byteenable
	wire          touch_panel_busy_s1_agent_m0_read;                                              // touch_panel_busy_s1_agent:m0_read -> touch_panel_busy_s1_translator:uav_read
	wire          touch_panel_busy_s1_agent_m0_readdatavalid;                                     // touch_panel_busy_s1_translator:uav_readdatavalid -> touch_panel_busy_s1_agent:m0_readdatavalid
	wire          touch_panel_busy_s1_agent_m0_lock;                                              // touch_panel_busy_s1_agent:m0_lock -> touch_panel_busy_s1_translator:uav_lock
	wire   [31:0] touch_panel_busy_s1_agent_m0_writedata;                                         // touch_panel_busy_s1_agent:m0_writedata -> touch_panel_busy_s1_translator:uav_writedata
	wire          touch_panel_busy_s1_agent_m0_write;                                             // touch_panel_busy_s1_agent:m0_write -> touch_panel_busy_s1_translator:uav_write
	wire    [2:0] touch_panel_busy_s1_agent_m0_burstcount;                                        // touch_panel_busy_s1_agent:m0_burstcount -> touch_panel_busy_s1_translator:uav_burstcount
	wire          touch_panel_busy_s1_agent_rf_source_valid;                                      // touch_panel_busy_s1_agent:rf_source_valid -> touch_panel_busy_s1_agent_rsp_fifo:in_valid
	wire  [117:0] touch_panel_busy_s1_agent_rf_source_data;                                       // touch_panel_busy_s1_agent:rf_source_data -> touch_panel_busy_s1_agent_rsp_fifo:in_data
	wire          touch_panel_busy_s1_agent_rf_source_ready;                                      // touch_panel_busy_s1_agent_rsp_fifo:in_ready -> touch_panel_busy_s1_agent:rf_source_ready
	wire          touch_panel_busy_s1_agent_rf_source_startofpacket;                              // touch_panel_busy_s1_agent:rf_source_startofpacket -> touch_panel_busy_s1_agent_rsp_fifo:in_startofpacket
	wire          touch_panel_busy_s1_agent_rf_source_endofpacket;                                // touch_panel_busy_s1_agent:rf_source_endofpacket -> touch_panel_busy_s1_agent_rsp_fifo:in_endofpacket
	wire          touch_panel_busy_s1_agent_rsp_fifo_out_valid;                                   // touch_panel_busy_s1_agent_rsp_fifo:out_valid -> touch_panel_busy_s1_agent:rf_sink_valid
	wire  [117:0] touch_panel_busy_s1_agent_rsp_fifo_out_data;                                    // touch_panel_busy_s1_agent_rsp_fifo:out_data -> touch_panel_busy_s1_agent:rf_sink_data
	wire          touch_panel_busy_s1_agent_rsp_fifo_out_ready;                                   // touch_panel_busy_s1_agent:rf_sink_ready -> touch_panel_busy_s1_agent_rsp_fifo:out_ready
	wire          touch_panel_busy_s1_agent_rsp_fifo_out_startofpacket;                           // touch_panel_busy_s1_agent_rsp_fifo:out_startofpacket -> touch_panel_busy_s1_agent:rf_sink_startofpacket
	wire          touch_panel_busy_s1_agent_rsp_fifo_out_endofpacket;                             // touch_panel_busy_s1_agent_rsp_fifo:out_endofpacket -> touch_panel_busy_s1_agent:rf_sink_endofpacket
	wire   [31:0] touch_panel_penirq_n_s1_agent_m0_readdata;                                      // touch_panel_penirq_n_s1_translator:uav_readdata -> touch_panel_penirq_n_s1_agent:m0_readdata
	wire          touch_panel_penirq_n_s1_agent_m0_waitrequest;                                   // touch_panel_penirq_n_s1_translator:uav_waitrequest -> touch_panel_penirq_n_s1_agent:m0_waitrequest
	wire          touch_panel_penirq_n_s1_agent_m0_debugaccess;                                   // touch_panel_penirq_n_s1_agent:m0_debugaccess -> touch_panel_penirq_n_s1_translator:uav_debugaccess
	wire   [31:0] touch_panel_penirq_n_s1_agent_m0_address;                                       // touch_panel_penirq_n_s1_agent:m0_address -> touch_panel_penirq_n_s1_translator:uav_address
	wire    [3:0] touch_panel_penirq_n_s1_agent_m0_byteenable;                                    // touch_panel_penirq_n_s1_agent:m0_byteenable -> touch_panel_penirq_n_s1_translator:uav_byteenable
	wire          touch_panel_penirq_n_s1_agent_m0_read;                                          // touch_panel_penirq_n_s1_agent:m0_read -> touch_panel_penirq_n_s1_translator:uav_read
	wire          touch_panel_penirq_n_s1_agent_m0_readdatavalid;                                 // touch_panel_penirq_n_s1_translator:uav_readdatavalid -> touch_panel_penirq_n_s1_agent:m0_readdatavalid
	wire          touch_panel_penirq_n_s1_agent_m0_lock;                                          // touch_panel_penirq_n_s1_agent:m0_lock -> touch_panel_penirq_n_s1_translator:uav_lock
	wire   [31:0] touch_panel_penirq_n_s1_agent_m0_writedata;                                     // touch_panel_penirq_n_s1_agent:m0_writedata -> touch_panel_penirq_n_s1_translator:uav_writedata
	wire          touch_panel_penirq_n_s1_agent_m0_write;                                         // touch_panel_penirq_n_s1_agent:m0_write -> touch_panel_penirq_n_s1_translator:uav_write
	wire    [2:0] touch_panel_penirq_n_s1_agent_m0_burstcount;                                    // touch_panel_penirq_n_s1_agent:m0_burstcount -> touch_panel_penirq_n_s1_translator:uav_burstcount
	wire          touch_panel_penirq_n_s1_agent_rf_source_valid;                                  // touch_panel_penirq_n_s1_agent:rf_source_valid -> touch_panel_penirq_n_s1_agent_rsp_fifo:in_valid
	wire  [117:0] touch_panel_penirq_n_s1_agent_rf_source_data;                                   // touch_panel_penirq_n_s1_agent:rf_source_data -> touch_panel_penirq_n_s1_agent_rsp_fifo:in_data
	wire          touch_panel_penirq_n_s1_agent_rf_source_ready;                                  // touch_panel_penirq_n_s1_agent_rsp_fifo:in_ready -> touch_panel_penirq_n_s1_agent:rf_source_ready
	wire          touch_panel_penirq_n_s1_agent_rf_source_startofpacket;                          // touch_panel_penirq_n_s1_agent:rf_source_startofpacket -> touch_panel_penirq_n_s1_agent_rsp_fifo:in_startofpacket
	wire          touch_panel_penirq_n_s1_agent_rf_source_endofpacket;                            // touch_panel_penirq_n_s1_agent:rf_source_endofpacket -> touch_panel_penirq_n_s1_agent_rsp_fifo:in_endofpacket
	wire          touch_panel_penirq_n_s1_agent_rsp_fifo_out_valid;                               // touch_panel_penirq_n_s1_agent_rsp_fifo:out_valid -> touch_panel_penirq_n_s1_agent:rf_sink_valid
	wire  [117:0] touch_panel_penirq_n_s1_agent_rsp_fifo_out_data;                                // touch_panel_penirq_n_s1_agent_rsp_fifo:out_data -> touch_panel_penirq_n_s1_agent:rf_sink_data
	wire          touch_panel_penirq_n_s1_agent_rsp_fifo_out_ready;                               // touch_panel_penirq_n_s1_agent:rf_sink_ready -> touch_panel_penirq_n_s1_agent_rsp_fifo:out_ready
	wire          touch_panel_penirq_n_s1_agent_rsp_fifo_out_startofpacket;                       // touch_panel_penirq_n_s1_agent_rsp_fifo:out_startofpacket -> touch_panel_penirq_n_s1_agent:rf_sink_startofpacket
	wire          touch_panel_penirq_n_s1_agent_rsp_fifo_out_endofpacket;                         // touch_panel_penirq_n_s1_agent_rsp_fifo:out_endofpacket -> touch_panel_penirq_n_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_a_s1_agent_m0_readdata;                                                   // boton_a_s1_translator:uav_readdata -> boton_a_s1_agent:m0_readdata
	wire          boton_a_s1_agent_m0_waitrequest;                                                // boton_a_s1_translator:uav_waitrequest -> boton_a_s1_agent:m0_waitrequest
	wire          boton_a_s1_agent_m0_debugaccess;                                                // boton_a_s1_agent:m0_debugaccess -> boton_a_s1_translator:uav_debugaccess
	wire   [31:0] boton_a_s1_agent_m0_address;                                                    // boton_a_s1_agent:m0_address -> boton_a_s1_translator:uav_address
	wire    [3:0] boton_a_s1_agent_m0_byteenable;                                                 // boton_a_s1_agent:m0_byteenable -> boton_a_s1_translator:uav_byteenable
	wire          boton_a_s1_agent_m0_read;                                                       // boton_a_s1_agent:m0_read -> boton_a_s1_translator:uav_read
	wire          boton_a_s1_agent_m0_readdatavalid;                                              // boton_a_s1_translator:uav_readdatavalid -> boton_a_s1_agent:m0_readdatavalid
	wire          boton_a_s1_agent_m0_lock;                                                       // boton_a_s1_agent:m0_lock -> boton_a_s1_translator:uav_lock
	wire   [31:0] boton_a_s1_agent_m0_writedata;                                                  // boton_a_s1_agent:m0_writedata -> boton_a_s1_translator:uav_writedata
	wire          boton_a_s1_agent_m0_write;                                                      // boton_a_s1_agent:m0_write -> boton_a_s1_translator:uav_write
	wire    [2:0] boton_a_s1_agent_m0_burstcount;                                                 // boton_a_s1_agent:m0_burstcount -> boton_a_s1_translator:uav_burstcount
	wire          boton_a_s1_agent_rf_source_valid;                                               // boton_a_s1_agent:rf_source_valid -> boton_a_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_a_s1_agent_rf_source_data;                                                // boton_a_s1_agent:rf_source_data -> boton_a_s1_agent_rsp_fifo:in_data
	wire          boton_a_s1_agent_rf_source_ready;                                               // boton_a_s1_agent_rsp_fifo:in_ready -> boton_a_s1_agent:rf_source_ready
	wire          boton_a_s1_agent_rf_source_startofpacket;                                       // boton_a_s1_agent:rf_source_startofpacket -> boton_a_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_a_s1_agent_rf_source_endofpacket;                                         // boton_a_s1_agent:rf_source_endofpacket -> boton_a_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_a_s1_agent_rsp_fifo_out_valid;                                            // boton_a_s1_agent_rsp_fifo:out_valid -> boton_a_s1_agent:rf_sink_valid
	wire  [117:0] boton_a_s1_agent_rsp_fifo_out_data;                                             // boton_a_s1_agent_rsp_fifo:out_data -> boton_a_s1_agent:rf_sink_data
	wire          boton_a_s1_agent_rsp_fifo_out_ready;                                            // boton_a_s1_agent:rf_sink_ready -> boton_a_s1_agent_rsp_fifo:out_ready
	wire          boton_a_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_a_s1_agent_rsp_fifo:out_startofpacket -> boton_a_s1_agent:rf_sink_startofpacket
	wire          boton_a_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_a_s1_agent_rsp_fifo:out_endofpacket -> boton_a_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_b_s1_agent_m0_readdata;                                                   // boton_b_s1_translator:uav_readdata -> boton_b_s1_agent:m0_readdata
	wire          boton_b_s1_agent_m0_waitrequest;                                                // boton_b_s1_translator:uav_waitrequest -> boton_b_s1_agent:m0_waitrequest
	wire          boton_b_s1_agent_m0_debugaccess;                                                // boton_b_s1_agent:m0_debugaccess -> boton_b_s1_translator:uav_debugaccess
	wire   [31:0] boton_b_s1_agent_m0_address;                                                    // boton_b_s1_agent:m0_address -> boton_b_s1_translator:uav_address
	wire    [3:0] boton_b_s1_agent_m0_byteenable;                                                 // boton_b_s1_agent:m0_byteenable -> boton_b_s1_translator:uav_byteenable
	wire          boton_b_s1_agent_m0_read;                                                       // boton_b_s1_agent:m0_read -> boton_b_s1_translator:uav_read
	wire          boton_b_s1_agent_m0_readdatavalid;                                              // boton_b_s1_translator:uav_readdatavalid -> boton_b_s1_agent:m0_readdatavalid
	wire          boton_b_s1_agent_m0_lock;                                                       // boton_b_s1_agent:m0_lock -> boton_b_s1_translator:uav_lock
	wire   [31:0] boton_b_s1_agent_m0_writedata;                                                  // boton_b_s1_agent:m0_writedata -> boton_b_s1_translator:uav_writedata
	wire          boton_b_s1_agent_m0_write;                                                      // boton_b_s1_agent:m0_write -> boton_b_s1_translator:uav_write
	wire    [2:0] boton_b_s1_agent_m0_burstcount;                                                 // boton_b_s1_agent:m0_burstcount -> boton_b_s1_translator:uav_burstcount
	wire          boton_b_s1_agent_rf_source_valid;                                               // boton_b_s1_agent:rf_source_valid -> boton_b_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_b_s1_agent_rf_source_data;                                                // boton_b_s1_agent:rf_source_data -> boton_b_s1_agent_rsp_fifo:in_data
	wire          boton_b_s1_agent_rf_source_ready;                                               // boton_b_s1_agent_rsp_fifo:in_ready -> boton_b_s1_agent:rf_source_ready
	wire          boton_b_s1_agent_rf_source_startofpacket;                                       // boton_b_s1_agent:rf_source_startofpacket -> boton_b_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_b_s1_agent_rf_source_endofpacket;                                         // boton_b_s1_agent:rf_source_endofpacket -> boton_b_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_b_s1_agent_rsp_fifo_out_valid;                                            // boton_b_s1_agent_rsp_fifo:out_valid -> boton_b_s1_agent:rf_sink_valid
	wire  [117:0] boton_b_s1_agent_rsp_fifo_out_data;                                             // boton_b_s1_agent_rsp_fifo:out_data -> boton_b_s1_agent:rf_sink_data
	wire          boton_b_s1_agent_rsp_fifo_out_ready;                                            // boton_b_s1_agent:rf_sink_ready -> boton_b_s1_agent_rsp_fifo:out_ready
	wire          boton_b_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_b_s1_agent_rsp_fifo:out_startofpacket -> boton_b_s1_agent:rf_sink_startofpacket
	wire          boton_b_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_b_s1_agent_rsp_fifo:out_endofpacket -> boton_b_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_x_s1_agent_m0_readdata;                                                   // boton_x_s1_translator:uav_readdata -> boton_x_s1_agent:m0_readdata
	wire          boton_x_s1_agent_m0_waitrequest;                                                // boton_x_s1_translator:uav_waitrequest -> boton_x_s1_agent:m0_waitrequest
	wire          boton_x_s1_agent_m0_debugaccess;                                                // boton_x_s1_agent:m0_debugaccess -> boton_x_s1_translator:uav_debugaccess
	wire   [31:0] boton_x_s1_agent_m0_address;                                                    // boton_x_s1_agent:m0_address -> boton_x_s1_translator:uav_address
	wire    [3:0] boton_x_s1_agent_m0_byteenable;                                                 // boton_x_s1_agent:m0_byteenable -> boton_x_s1_translator:uav_byteenable
	wire          boton_x_s1_agent_m0_read;                                                       // boton_x_s1_agent:m0_read -> boton_x_s1_translator:uav_read
	wire          boton_x_s1_agent_m0_readdatavalid;                                              // boton_x_s1_translator:uav_readdatavalid -> boton_x_s1_agent:m0_readdatavalid
	wire          boton_x_s1_agent_m0_lock;                                                       // boton_x_s1_agent:m0_lock -> boton_x_s1_translator:uav_lock
	wire   [31:0] boton_x_s1_agent_m0_writedata;                                                  // boton_x_s1_agent:m0_writedata -> boton_x_s1_translator:uav_writedata
	wire          boton_x_s1_agent_m0_write;                                                      // boton_x_s1_agent:m0_write -> boton_x_s1_translator:uav_write
	wire    [2:0] boton_x_s1_agent_m0_burstcount;                                                 // boton_x_s1_agent:m0_burstcount -> boton_x_s1_translator:uav_burstcount
	wire          boton_x_s1_agent_rf_source_valid;                                               // boton_x_s1_agent:rf_source_valid -> boton_x_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_x_s1_agent_rf_source_data;                                                // boton_x_s1_agent:rf_source_data -> boton_x_s1_agent_rsp_fifo:in_data
	wire          boton_x_s1_agent_rf_source_ready;                                               // boton_x_s1_agent_rsp_fifo:in_ready -> boton_x_s1_agent:rf_source_ready
	wire          boton_x_s1_agent_rf_source_startofpacket;                                       // boton_x_s1_agent:rf_source_startofpacket -> boton_x_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_x_s1_agent_rf_source_endofpacket;                                         // boton_x_s1_agent:rf_source_endofpacket -> boton_x_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_x_s1_agent_rsp_fifo_out_valid;                                            // boton_x_s1_agent_rsp_fifo:out_valid -> boton_x_s1_agent:rf_sink_valid
	wire  [117:0] boton_x_s1_agent_rsp_fifo_out_data;                                             // boton_x_s1_agent_rsp_fifo:out_data -> boton_x_s1_agent:rf_sink_data
	wire          boton_x_s1_agent_rsp_fifo_out_ready;                                            // boton_x_s1_agent:rf_sink_ready -> boton_x_s1_agent_rsp_fifo:out_ready
	wire          boton_x_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_x_s1_agent_rsp_fifo:out_startofpacket -> boton_x_s1_agent:rf_sink_startofpacket
	wire          boton_x_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_x_s1_agent_rsp_fifo:out_endofpacket -> boton_x_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_y_s1_agent_m0_readdata;                                                   // boton_y_s1_translator:uav_readdata -> boton_y_s1_agent:m0_readdata
	wire          boton_y_s1_agent_m0_waitrequest;                                                // boton_y_s1_translator:uav_waitrequest -> boton_y_s1_agent:m0_waitrequest
	wire          boton_y_s1_agent_m0_debugaccess;                                                // boton_y_s1_agent:m0_debugaccess -> boton_y_s1_translator:uav_debugaccess
	wire   [31:0] boton_y_s1_agent_m0_address;                                                    // boton_y_s1_agent:m0_address -> boton_y_s1_translator:uav_address
	wire    [3:0] boton_y_s1_agent_m0_byteenable;                                                 // boton_y_s1_agent:m0_byteenable -> boton_y_s1_translator:uav_byteenable
	wire          boton_y_s1_agent_m0_read;                                                       // boton_y_s1_agent:m0_read -> boton_y_s1_translator:uav_read
	wire          boton_y_s1_agent_m0_readdatavalid;                                              // boton_y_s1_translator:uav_readdatavalid -> boton_y_s1_agent:m0_readdatavalid
	wire          boton_y_s1_agent_m0_lock;                                                       // boton_y_s1_agent:m0_lock -> boton_y_s1_translator:uav_lock
	wire   [31:0] boton_y_s1_agent_m0_writedata;                                                  // boton_y_s1_agent:m0_writedata -> boton_y_s1_translator:uav_writedata
	wire          boton_y_s1_agent_m0_write;                                                      // boton_y_s1_agent:m0_write -> boton_y_s1_translator:uav_write
	wire    [2:0] boton_y_s1_agent_m0_burstcount;                                                 // boton_y_s1_agent:m0_burstcount -> boton_y_s1_translator:uav_burstcount
	wire          boton_y_s1_agent_rf_source_valid;                                               // boton_y_s1_agent:rf_source_valid -> boton_y_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_y_s1_agent_rf_source_data;                                                // boton_y_s1_agent:rf_source_data -> boton_y_s1_agent_rsp_fifo:in_data
	wire          boton_y_s1_agent_rf_source_ready;                                               // boton_y_s1_agent_rsp_fifo:in_ready -> boton_y_s1_agent:rf_source_ready
	wire          boton_y_s1_agent_rf_source_startofpacket;                                       // boton_y_s1_agent:rf_source_startofpacket -> boton_y_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_y_s1_agent_rf_source_endofpacket;                                         // boton_y_s1_agent:rf_source_endofpacket -> boton_y_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_y_s1_agent_rsp_fifo_out_valid;                                            // boton_y_s1_agent_rsp_fifo:out_valid -> boton_y_s1_agent:rf_sink_valid
	wire  [117:0] boton_y_s1_agent_rsp_fifo_out_data;                                             // boton_y_s1_agent_rsp_fifo:out_data -> boton_y_s1_agent:rf_sink_data
	wire          boton_y_s1_agent_rsp_fifo_out_ready;                                            // boton_y_s1_agent:rf_sink_ready -> boton_y_s1_agent_rsp_fifo:out_ready
	wire          boton_y_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_y_s1_agent_rsp_fifo:out_startofpacket -> boton_y_s1_agent:rf_sink_startofpacket
	wire          boton_y_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_y_s1_agent_rsp_fifo:out_endofpacket -> boton_y_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_l_s1_agent_m0_readdata;                                                   // boton_l_s1_translator:uav_readdata -> boton_l_s1_agent:m0_readdata
	wire          boton_l_s1_agent_m0_waitrequest;                                                // boton_l_s1_translator:uav_waitrequest -> boton_l_s1_agent:m0_waitrequest
	wire          boton_l_s1_agent_m0_debugaccess;                                                // boton_l_s1_agent:m0_debugaccess -> boton_l_s1_translator:uav_debugaccess
	wire   [31:0] boton_l_s1_agent_m0_address;                                                    // boton_l_s1_agent:m0_address -> boton_l_s1_translator:uav_address
	wire    [3:0] boton_l_s1_agent_m0_byteenable;                                                 // boton_l_s1_agent:m0_byteenable -> boton_l_s1_translator:uav_byteenable
	wire          boton_l_s1_agent_m0_read;                                                       // boton_l_s1_agent:m0_read -> boton_l_s1_translator:uav_read
	wire          boton_l_s1_agent_m0_readdatavalid;                                              // boton_l_s1_translator:uav_readdatavalid -> boton_l_s1_agent:m0_readdatavalid
	wire          boton_l_s1_agent_m0_lock;                                                       // boton_l_s1_agent:m0_lock -> boton_l_s1_translator:uav_lock
	wire   [31:0] boton_l_s1_agent_m0_writedata;                                                  // boton_l_s1_agent:m0_writedata -> boton_l_s1_translator:uav_writedata
	wire          boton_l_s1_agent_m0_write;                                                      // boton_l_s1_agent:m0_write -> boton_l_s1_translator:uav_write
	wire    [2:0] boton_l_s1_agent_m0_burstcount;                                                 // boton_l_s1_agent:m0_burstcount -> boton_l_s1_translator:uav_burstcount
	wire          boton_l_s1_agent_rf_source_valid;                                               // boton_l_s1_agent:rf_source_valid -> boton_l_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_l_s1_agent_rf_source_data;                                                // boton_l_s1_agent:rf_source_data -> boton_l_s1_agent_rsp_fifo:in_data
	wire          boton_l_s1_agent_rf_source_ready;                                               // boton_l_s1_agent_rsp_fifo:in_ready -> boton_l_s1_agent:rf_source_ready
	wire          boton_l_s1_agent_rf_source_startofpacket;                                       // boton_l_s1_agent:rf_source_startofpacket -> boton_l_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_l_s1_agent_rf_source_endofpacket;                                         // boton_l_s1_agent:rf_source_endofpacket -> boton_l_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_l_s1_agent_rsp_fifo_out_valid;                                            // boton_l_s1_agent_rsp_fifo:out_valid -> boton_l_s1_agent:rf_sink_valid
	wire  [117:0] boton_l_s1_agent_rsp_fifo_out_data;                                             // boton_l_s1_agent_rsp_fifo:out_data -> boton_l_s1_agent:rf_sink_data
	wire          boton_l_s1_agent_rsp_fifo_out_ready;                                            // boton_l_s1_agent:rf_sink_ready -> boton_l_s1_agent_rsp_fifo:out_ready
	wire          boton_l_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_l_s1_agent_rsp_fifo:out_startofpacket -> boton_l_s1_agent:rf_sink_startofpacket
	wire          boton_l_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_l_s1_agent_rsp_fifo:out_endofpacket -> boton_l_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_r_s1_agent_m0_readdata;                                                   // boton_r_s1_translator:uav_readdata -> boton_r_s1_agent:m0_readdata
	wire          boton_r_s1_agent_m0_waitrequest;                                                // boton_r_s1_translator:uav_waitrequest -> boton_r_s1_agent:m0_waitrequest
	wire          boton_r_s1_agent_m0_debugaccess;                                                // boton_r_s1_agent:m0_debugaccess -> boton_r_s1_translator:uav_debugaccess
	wire   [31:0] boton_r_s1_agent_m0_address;                                                    // boton_r_s1_agent:m0_address -> boton_r_s1_translator:uav_address
	wire    [3:0] boton_r_s1_agent_m0_byteenable;                                                 // boton_r_s1_agent:m0_byteenable -> boton_r_s1_translator:uav_byteenable
	wire          boton_r_s1_agent_m0_read;                                                       // boton_r_s1_agent:m0_read -> boton_r_s1_translator:uav_read
	wire          boton_r_s1_agent_m0_readdatavalid;                                              // boton_r_s1_translator:uav_readdatavalid -> boton_r_s1_agent:m0_readdatavalid
	wire          boton_r_s1_agent_m0_lock;                                                       // boton_r_s1_agent:m0_lock -> boton_r_s1_translator:uav_lock
	wire   [31:0] boton_r_s1_agent_m0_writedata;                                                  // boton_r_s1_agent:m0_writedata -> boton_r_s1_translator:uav_writedata
	wire          boton_r_s1_agent_m0_write;                                                      // boton_r_s1_agent:m0_write -> boton_r_s1_translator:uav_write
	wire    [2:0] boton_r_s1_agent_m0_burstcount;                                                 // boton_r_s1_agent:m0_burstcount -> boton_r_s1_translator:uav_burstcount
	wire          boton_r_s1_agent_rf_source_valid;                                               // boton_r_s1_agent:rf_source_valid -> boton_r_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_r_s1_agent_rf_source_data;                                                // boton_r_s1_agent:rf_source_data -> boton_r_s1_agent_rsp_fifo:in_data
	wire          boton_r_s1_agent_rf_source_ready;                                               // boton_r_s1_agent_rsp_fifo:in_ready -> boton_r_s1_agent:rf_source_ready
	wire          boton_r_s1_agent_rf_source_startofpacket;                                       // boton_r_s1_agent:rf_source_startofpacket -> boton_r_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_r_s1_agent_rf_source_endofpacket;                                         // boton_r_s1_agent:rf_source_endofpacket -> boton_r_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_r_s1_agent_rsp_fifo_out_valid;                                            // boton_r_s1_agent_rsp_fifo:out_valid -> boton_r_s1_agent:rf_sink_valid
	wire  [117:0] boton_r_s1_agent_rsp_fifo_out_data;                                             // boton_r_s1_agent_rsp_fifo:out_data -> boton_r_s1_agent:rf_sink_data
	wire          boton_r_s1_agent_rsp_fifo_out_ready;                                            // boton_r_s1_agent:rf_sink_ready -> boton_r_s1_agent_rsp_fifo:out_ready
	wire          boton_r_s1_agent_rsp_fifo_out_startofpacket;                                    // boton_r_s1_agent_rsp_fifo:out_startofpacket -> boton_r_s1_agent:rf_sink_startofpacket
	wire          boton_r_s1_agent_rsp_fifo_out_endofpacket;                                      // boton_r_s1_agent_rsp_fifo:out_endofpacket -> boton_r_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_up_s1_agent_m0_readdata;                                                  // boton_up_s1_translator:uav_readdata -> boton_up_s1_agent:m0_readdata
	wire          boton_up_s1_agent_m0_waitrequest;                                               // boton_up_s1_translator:uav_waitrequest -> boton_up_s1_agent:m0_waitrequest
	wire          boton_up_s1_agent_m0_debugaccess;                                               // boton_up_s1_agent:m0_debugaccess -> boton_up_s1_translator:uav_debugaccess
	wire   [31:0] boton_up_s1_agent_m0_address;                                                   // boton_up_s1_agent:m0_address -> boton_up_s1_translator:uav_address
	wire    [3:0] boton_up_s1_agent_m0_byteenable;                                                // boton_up_s1_agent:m0_byteenable -> boton_up_s1_translator:uav_byteenable
	wire          boton_up_s1_agent_m0_read;                                                      // boton_up_s1_agent:m0_read -> boton_up_s1_translator:uav_read
	wire          boton_up_s1_agent_m0_readdatavalid;                                             // boton_up_s1_translator:uav_readdatavalid -> boton_up_s1_agent:m0_readdatavalid
	wire          boton_up_s1_agent_m0_lock;                                                      // boton_up_s1_agent:m0_lock -> boton_up_s1_translator:uav_lock
	wire   [31:0] boton_up_s1_agent_m0_writedata;                                                 // boton_up_s1_agent:m0_writedata -> boton_up_s1_translator:uav_writedata
	wire          boton_up_s1_agent_m0_write;                                                     // boton_up_s1_agent:m0_write -> boton_up_s1_translator:uav_write
	wire    [2:0] boton_up_s1_agent_m0_burstcount;                                                // boton_up_s1_agent:m0_burstcount -> boton_up_s1_translator:uav_burstcount
	wire          boton_up_s1_agent_rf_source_valid;                                              // boton_up_s1_agent:rf_source_valid -> boton_up_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_up_s1_agent_rf_source_data;                                               // boton_up_s1_agent:rf_source_data -> boton_up_s1_agent_rsp_fifo:in_data
	wire          boton_up_s1_agent_rf_source_ready;                                              // boton_up_s1_agent_rsp_fifo:in_ready -> boton_up_s1_agent:rf_source_ready
	wire          boton_up_s1_agent_rf_source_startofpacket;                                      // boton_up_s1_agent:rf_source_startofpacket -> boton_up_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_up_s1_agent_rf_source_endofpacket;                                        // boton_up_s1_agent:rf_source_endofpacket -> boton_up_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_up_s1_agent_rsp_fifo_out_valid;                                           // boton_up_s1_agent_rsp_fifo:out_valid -> boton_up_s1_agent:rf_sink_valid
	wire  [117:0] boton_up_s1_agent_rsp_fifo_out_data;                                            // boton_up_s1_agent_rsp_fifo:out_data -> boton_up_s1_agent:rf_sink_data
	wire          boton_up_s1_agent_rsp_fifo_out_ready;                                           // boton_up_s1_agent:rf_sink_ready -> boton_up_s1_agent_rsp_fifo:out_ready
	wire          boton_up_s1_agent_rsp_fifo_out_startofpacket;                                   // boton_up_s1_agent_rsp_fifo:out_startofpacket -> boton_up_s1_agent:rf_sink_startofpacket
	wire          boton_up_s1_agent_rsp_fifo_out_endofpacket;                                     // boton_up_s1_agent_rsp_fifo:out_endofpacket -> boton_up_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_down_s1_agent_m0_readdata;                                                // boton_down_s1_translator:uav_readdata -> boton_down_s1_agent:m0_readdata
	wire          boton_down_s1_agent_m0_waitrequest;                                             // boton_down_s1_translator:uav_waitrequest -> boton_down_s1_agent:m0_waitrequest
	wire          boton_down_s1_agent_m0_debugaccess;                                             // boton_down_s1_agent:m0_debugaccess -> boton_down_s1_translator:uav_debugaccess
	wire   [31:0] boton_down_s1_agent_m0_address;                                                 // boton_down_s1_agent:m0_address -> boton_down_s1_translator:uav_address
	wire    [3:0] boton_down_s1_agent_m0_byteenable;                                              // boton_down_s1_agent:m0_byteenable -> boton_down_s1_translator:uav_byteenable
	wire          boton_down_s1_agent_m0_read;                                                    // boton_down_s1_agent:m0_read -> boton_down_s1_translator:uav_read
	wire          boton_down_s1_agent_m0_readdatavalid;                                           // boton_down_s1_translator:uav_readdatavalid -> boton_down_s1_agent:m0_readdatavalid
	wire          boton_down_s1_agent_m0_lock;                                                    // boton_down_s1_agent:m0_lock -> boton_down_s1_translator:uav_lock
	wire   [31:0] boton_down_s1_agent_m0_writedata;                                               // boton_down_s1_agent:m0_writedata -> boton_down_s1_translator:uav_writedata
	wire          boton_down_s1_agent_m0_write;                                                   // boton_down_s1_agent:m0_write -> boton_down_s1_translator:uav_write
	wire    [2:0] boton_down_s1_agent_m0_burstcount;                                              // boton_down_s1_agent:m0_burstcount -> boton_down_s1_translator:uav_burstcount
	wire          boton_down_s1_agent_rf_source_valid;                                            // boton_down_s1_agent:rf_source_valid -> boton_down_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_down_s1_agent_rf_source_data;                                             // boton_down_s1_agent:rf_source_data -> boton_down_s1_agent_rsp_fifo:in_data
	wire          boton_down_s1_agent_rf_source_ready;                                            // boton_down_s1_agent_rsp_fifo:in_ready -> boton_down_s1_agent:rf_source_ready
	wire          boton_down_s1_agent_rf_source_startofpacket;                                    // boton_down_s1_agent:rf_source_startofpacket -> boton_down_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_down_s1_agent_rf_source_endofpacket;                                      // boton_down_s1_agent:rf_source_endofpacket -> boton_down_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_down_s1_agent_rsp_fifo_out_valid;                                         // boton_down_s1_agent_rsp_fifo:out_valid -> boton_down_s1_agent:rf_sink_valid
	wire  [117:0] boton_down_s1_agent_rsp_fifo_out_data;                                          // boton_down_s1_agent_rsp_fifo:out_data -> boton_down_s1_agent:rf_sink_data
	wire          boton_down_s1_agent_rsp_fifo_out_ready;                                         // boton_down_s1_agent:rf_sink_ready -> boton_down_s1_agent_rsp_fifo:out_ready
	wire          boton_down_s1_agent_rsp_fifo_out_startofpacket;                                 // boton_down_s1_agent_rsp_fifo:out_startofpacket -> boton_down_s1_agent:rf_sink_startofpacket
	wire          boton_down_s1_agent_rsp_fifo_out_endofpacket;                                   // boton_down_s1_agent_rsp_fifo:out_endofpacket -> boton_down_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_left_s1_agent_m0_readdata;                                                // boton_left_s1_translator:uav_readdata -> boton_left_s1_agent:m0_readdata
	wire          boton_left_s1_agent_m0_waitrequest;                                             // boton_left_s1_translator:uav_waitrequest -> boton_left_s1_agent:m0_waitrequest
	wire          boton_left_s1_agent_m0_debugaccess;                                             // boton_left_s1_agent:m0_debugaccess -> boton_left_s1_translator:uav_debugaccess
	wire   [31:0] boton_left_s1_agent_m0_address;                                                 // boton_left_s1_agent:m0_address -> boton_left_s1_translator:uav_address
	wire    [3:0] boton_left_s1_agent_m0_byteenable;                                              // boton_left_s1_agent:m0_byteenable -> boton_left_s1_translator:uav_byteenable
	wire          boton_left_s1_agent_m0_read;                                                    // boton_left_s1_agent:m0_read -> boton_left_s1_translator:uav_read
	wire          boton_left_s1_agent_m0_readdatavalid;                                           // boton_left_s1_translator:uav_readdatavalid -> boton_left_s1_agent:m0_readdatavalid
	wire          boton_left_s1_agent_m0_lock;                                                    // boton_left_s1_agent:m0_lock -> boton_left_s1_translator:uav_lock
	wire   [31:0] boton_left_s1_agent_m0_writedata;                                               // boton_left_s1_agent:m0_writedata -> boton_left_s1_translator:uav_writedata
	wire          boton_left_s1_agent_m0_write;                                                   // boton_left_s1_agent:m0_write -> boton_left_s1_translator:uav_write
	wire    [2:0] boton_left_s1_agent_m0_burstcount;                                              // boton_left_s1_agent:m0_burstcount -> boton_left_s1_translator:uav_burstcount
	wire          boton_left_s1_agent_rf_source_valid;                                            // boton_left_s1_agent:rf_source_valid -> boton_left_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_left_s1_agent_rf_source_data;                                             // boton_left_s1_agent:rf_source_data -> boton_left_s1_agent_rsp_fifo:in_data
	wire          boton_left_s1_agent_rf_source_ready;                                            // boton_left_s1_agent_rsp_fifo:in_ready -> boton_left_s1_agent:rf_source_ready
	wire          boton_left_s1_agent_rf_source_startofpacket;                                    // boton_left_s1_agent:rf_source_startofpacket -> boton_left_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_left_s1_agent_rf_source_endofpacket;                                      // boton_left_s1_agent:rf_source_endofpacket -> boton_left_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_left_s1_agent_rsp_fifo_out_valid;                                         // boton_left_s1_agent_rsp_fifo:out_valid -> boton_left_s1_agent:rf_sink_valid
	wire  [117:0] boton_left_s1_agent_rsp_fifo_out_data;                                          // boton_left_s1_agent_rsp_fifo:out_data -> boton_left_s1_agent:rf_sink_data
	wire          boton_left_s1_agent_rsp_fifo_out_ready;                                         // boton_left_s1_agent:rf_sink_ready -> boton_left_s1_agent_rsp_fifo:out_ready
	wire          boton_left_s1_agent_rsp_fifo_out_startofpacket;                                 // boton_left_s1_agent_rsp_fifo:out_startofpacket -> boton_left_s1_agent:rf_sink_startofpacket
	wire          boton_left_s1_agent_rsp_fifo_out_endofpacket;                                   // boton_left_s1_agent_rsp_fifo:out_endofpacket -> boton_left_s1_agent:rf_sink_endofpacket
	wire   [31:0] boton_right_s1_agent_m0_readdata;                                               // boton_right_s1_translator:uav_readdata -> boton_right_s1_agent:m0_readdata
	wire          boton_right_s1_agent_m0_waitrequest;                                            // boton_right_s1_translator:uav_waitrequest -> boton_right_s1_agent:m0_waitrequest
	wire          boton_right_s1_agent_m0_debugaccess;                                            // boton_right_s1_agent:m0_debugaccess -> boton_right_s1_translator:uav_debugaccess
	wire   [31:0] boton_right_s1_agent_m0_address;                                                // boton_right_s1_agent:m0_address -> boton_right_s1_translator:uav_address
	wire    [3:0] boton_right_s1_agent_m0_byteenable;                                             // boton_right_s1_agent:m0_byteenable -> boton_right_s1_translator:uav_byteenable
	wire          boton_right_s1_agent_m0_read;                                                   // boton_right_s1_agent:m0_read -> boton_right_s1_translator:uav_read
	wire          boton_right_s1_agent_m0_readdatavalid;                                          // boton_right_s1_translator:uav_readdatavalid -> boton_right_s1_agent:m0_readdatavalid
	wire          boton_right_s1_agent_m0_lock;                                                   // boton_right_s1_agent:m0_lock -> boton_right_s1_translator:uav_lock
	wire   [31:0] boton_right_s1_agent_m0_writedata;                                              // boton_right_s1_agent:m0_writedata -> boton_right_s1_translator:uav_writedata
	wire          boton_right_s1_agent_m0_write;                                                  // boton_right_s1_agent:m0_write -> boton_right_s1_translator:uav_write
	wire    [2:0] boton_right_s1_agent_m0_burstcount;                                             // boton_right_s1_agent:m0_burstcount -> boton_right_s1_translator:uav_burstcount
	wire          boton_right_s1_agent_rf_source_valid;                                           // boton_right_s1_agent:rf_source_valid -> boton_right_s1_agent_rsp_fifo:in_valid
	wire  [117:0] boton_right_s1_agent_rf_source_data;                                            // boton_right_s1_agent:rf_source_data -> boton_right_s1_agent_rsp_fifo:in_data
	wire          boton_right_s1_agent_rf_source_ready;                                           // boton_right_s1_agent_rsp_fifo:in_ready -> boton_right_s1_agent:rf_source_ready
	wire          boton_right_s1_agent_rf_source_startofpacket;                                   // boton_right_s1_agent:rf_source_startofpacket -> boton_right_s1_agent_rsp_fifo:in_startofpacket
	wire          boton_right_s1_agent_rf_source_endofpacket;                                     // boton_right_s1_agent:rf_source_endofpacket -> boton_right_s1_agent_rsp_fifo:in_endofpacket
	wire          boton_right_s1_agent_rsp_fifo_out_valid;                                        // boton_right_s1_agent_rsp_fifo:out_valid -> boton_right_s1_agent:rf_sink_valid
	wire  [117:0] boton_right_s1_agent_rsp_fifo_out_data;                                         // boton_right_s1_agent_rsp_fifo:out_data -> boton_right_s1_agent:rf_sink_data
	wire          boton_right_s1_agent_rsp_fifo_out_ready;                                        // boton_right_s1_agent:rf_sink_ready -> boton_right_s1_agent_rsp_fifo:out_ready
	wire          boton_right_s1_agent_rsp_fifo_out_startofpacket;                                // boton_right_s1_agent_rsp_fifo:out_startofpacket -> boton_right_s1_agent:rf_sink_startofpacket
	wire          boton_right_s1_agent_rsp_fifo_out_endofpacket;                                  // boton_right_s1_agent_rsp_fifo:out_endofpacket -> boton_right_s1_agent:rf_sink_endofpacket
	wire   [31:0] analog1_x_s1_agent_m0_readdata;                                                 // analog1_x_s1_translator:uav_readdata -> analog1_x_s1_agent:m0_readdata
	wire          analog1_x_s1_agent_m0_waitrequest;                                              // analog1_x_s1_translator:uav_waitrequest -> analog1_x_s1_agent:m0_waitrequest
	wire          analog1_x_s1_agent_m0_debugaccess;                                              // analog1_x_s1_agent:m0_debugaccess -> analog1_x_s1_translator:uav_debugaccess
	wire   [31:0] analog1_x_s1_agent_m0_address;                                                  // analog1_x_s1_agent:m0_address -> analog1_x_s1_translator:uav_address
	wire    [3:0] analog1_x_s1_agent_m0_byteenable;                                               // analog1_x_s1_agent:m0_byteenable -> analog1_x_s1_translator:uav_byteenable
	wire          analog1_x_s1_agent_m0_read;                                                     // analog1_x_s1_agent:m0_read -> analog1_x_s1_translator:uav_read
	wire          analog1_x_s1_agent_m0_readdatavalid;                                            // analog1_x_s1_translator:uav_readdatavalid -> analog1_x_s1_agent:m0_readdatavalid
	wire          analog1_x_s1_agent_m0_lock;                                                     // analog1_x_s1_agent:m0_lock -> analog1_x_s1_translator:uav_lock
	wire   [31:0] analog1_x_s1_agent_m0_writedata;                                                // analog1_x_s1_agent:m0_writedata -> analog1_x_s1_translator:uav_writedata
	wire          analog1_x_s1_agent_m0_write;                                                    // analog1_x_s1_agent:m0_write -> analog1_x_s1_translator:uav_write
	wire    [2:0] analog1_x_s1_agent_m0_burstcount;                                               // analog1_x_s1_agent:m0_burstcount -> analog1_x_s1_translator:uav_burstcount
	wire          analog1_x_s1_agent_rf_source_valid;                                             // analog1_x_s1_agent:rf_source_valid -> analog1_x_s1_agent_rsp_fifo:in_valid
	wire  [117:0] analog1_x_s1_agent_rf_source_data;                                              // analog1_x_s1_agent:rf_source_data -> analog1_x_s1_agent_rsp_fifo:in_data
	wire          analog1_x_s1_agent_rf_source_ready;                                             // analog1_x_s1_agent_rsp_fifo:in_ready -> analog1_x_s1_agent:rf_source_ready
	wire          analog1_x_s1_agent_rf_source_startofpacket;                                     // analog1_x_s1_agent:rf_source_startofpacket -> analog1_x_s1_agent_rsp_fifo:in_startofpacket
	wire          analog1_x_s1_agent_rf_source_endofpacket;                                       // analog1_x_s1_agent:rf_source_endofpacket -> analog1_x_s1_agent_rsp_fifo:in_endofpacket
	wire          analog1_x_s1_agent_rsp_fifo_out_valid;                                          // analog1_x_s1_agent_rsp_fifo:out_valid -> analog1_x_s1_agent:rf_sink_valid
	wire  [117:0] analog1_x_s1_agent_rsp_fifo_out_data;                                           // analog1_x_s1_agent_rsp_fifo:out_data -> analog1_x_s1_agent:rf_sink_data
	wire          analog1_x_s1_agent_rsp_fifo_out_ready;                                          // analog1_x_s1_agent:rf_sink_ready -> analog1_x_s1_agent_rsp_fifo:out_ready
	wire          analog1_x_s1_agent_rsp_fifo_out_startofpacket;                                  // analog1_x_s1_agent_rsp_fifo:out_startofpacket -> analog1_x_s1_agent:rf_sink_startofpacket
	wire          analog1_x_s1_agent_rsp_fifo_out_endofpacket;                                    // analog1_x_s1_agent_rsp_fifo:out_endofpacket -> analog1_x_s1_agent:rf_sink_endofpacket
	wire   [31:0] analog1_y_s1_agent_m0_readdata;                                                 // analog1_y_s1_translator:uav_readdata -> analog1_y_s1_agent:m0_readdata
	wire          analog1_y_s1_agent_m0_waitrequest;                                              // analog1_y_s1_translator:uav_waitrequest -> analog1_y_s1_agent:m0_waitrequest
	wire          analog1_y_s1_agent_m0_debugaccess;                                              // analog1_y_s1_agent:m0_debugaccess -> analog1_y_s1_translator:uav_debugaccess
	wire   [31:0] analog1_y_s1_agent_m0_address;                                                  // analog1_y_s1_agent:m0_address -> analog1_y_s1_translator:uav_address
	wire    [3:0] analog1_y_s1_agent_m0_byteenable;                                               // analog1_y_s1_agent:m0_byteenable -> analog1_y_s1_translator:uav_byteenable
	wire          analog1_y_s1_agent_m0_read;                                                     // analog1_y_s1_agent:m0_read -> analog1_y_s1_translator:uav_read
	wire          analog1_y_s1_agent_m0_readdatavalid;                                            // analog1_y_s1_translator:uav_readdatavalid -> analog1_y_s1_agent:m0_readdatavalid
	wire          analog1_y_s1_agent_m0_lock;                                                     // analog1_y_s1_agent:m0_lock -> analog1_y_s1_translator:uav_lock
	wire   [31:0] analog1_y_s1_agent_m0_writedata;                                                // analog1_y_s1_agent:m0_writedata -> analog1_y_s1_translator:uav_writedata
	wire          analog1_y_s1_agent_m0_write;                                                    // analog1_y_s1_agent:m0_write -> analog1_y_s1_translator:uav_write
	wire    [2:0] analog1_y_s1_agent_m0_burstcount;                                               // analog1_y_s1_agent:m0_burstcount -> analog1_y_s1_translator:uav_burstcount
	wire          analog1_y_s1_agent_rf_source_valid;                                             // analog1_y_s1_agent:rf_source_valid -> analog1_y_s1_agent_rsp_fifo:in_valid
	wire  [117:0] analog1_y_s1_agent_rf_source_data;                                              // analog1_y_s1_agent:rf_source_data -> analog1_y_s1_agent_rsp_fifo:in_data
	wire          analog1_y_s1_agent_rf_source_ready;                                             // analog1_y_s1_agent_rsp_fifo:in_ready -> analog1_y_s1_agent:rf_source_ready
	wire          analog1_y_s1_agent_rf_source_startofpacket;                                     // analog1_y_s1_agent:rf_source_startofpacket -> analog1_y_s1_agent_rsp_fifo:in_startofpacket
	wire          analog1_y_s1_agent_rf_source_endofpacket;                                       // analog1_y_s1_agent:rf_source_endofpacket -> analog1_y_s1_agent_rsp_fifo:in_endofpacket
	wire          analog1_y_s1_agent_rsp_fifo_out_valid;                                          // analog1_y_s1_agent_rsp_fifo:out_valid -> analog1_y_s1_agent:rf_sink_valid
	wire  [117:0] analog1_y_s1_agent_rsp_fifo_out_data;                                           // analog1_y_s1_agent_rsp_fifo:out_data -> analog1_y_s1_agent:rf_sink_data
	wire          analog1_y_s1_agent_rsp_fifo_out_ready;                                          // analog1_y_s1_agent:rf_sink_ready -> analog1_y_s1_agent_rsp_fifo:out_ready
	wire          analog1_y_s1_agent_rsp_fifo_out_startofpacket;                                  // analog1_y_s1_agent_rsp_fifo:out_startofpacket -> analog1_y_s1_agent:rf_sink_startofpacket
	wire          analog1_y_s1_agent_rsp_fifo_out_endofpacket;                                    // analog1_y_s1_agent_rsp_fifo:out_endofpacket -> analog1_y_s1_agent:rf_sink_endofpacket
	wire   [31:0] analog2_x_s1_agent_m0_readdata;                                                 // analog2_x_s1_translator:uav_readdata -> analog2_x_s1_agent:m0_readdata
	wire          analog2_x_s1_agent_m0_waitrequest;                                              // analog2_x_s1_translator:uav_waitrequest -> analog2_x_s1_agent:m0_waitrequest
	wire          analog2_x_s1_agent_m0_debugaccess;                                              // analog2_x_s1_agent:m0_debugaccess -> analog2_x_s1_translator:uav_debugaccess
	wire   [31:0] analog2_x_s1_agent_m0_address;                                                  // analog2_x_s1_agent:m0_address -> analog2_x_s1_translator:uav_address
	wire    [3:0] analog2_x_s1_agent_m0_byteenable;                                               // analog2_x_s1_agent:m0_byteenable -> analog2_x_s1_translator:uav_byteenable
	wire          analog2_x_s1_agent_m0_read;                                                     // analog2_x_s1_agent:m0_read -> analog2_x_s1_translator:uav_read
	wire          analog2_x_s1_agent_m0_readdatavalid;                                            // analog2_x_s1_translator:uav_readdatavalid -> analog2_x_s1_agent:m0_readdatavalid
	wire          analog2_x_s1_agent_m0_lock;                                                     // analog2_x_s1_agent:m0_lock -> analog2_x_s1_translator:uav_lock
	wire   [31:0] analog2_x_s1_agent_m0_writedata;                                                // analog2_x_s1_agent:m0_writedata -> analog2_x_s1_translator:uav_writedata
	wire          analog2_x_s1_agent_m0_write;                                                    // analog2_x_s1_agent:m0_write -> analog2_x_s1_translator:uav_write
	wire    [2:0] analog2_x_s1_agent_m0_burstcount;                                               // analog2_x_s1_agent:m0_burstcount -> analog2_x_s1_translator:uav_burstcount
	wire          analog2_x_s1_agent_rf_source_valid;                                             // analog2_x_s1_agent:rf_source_valid -> analog2_x_s1_agent_rsp_fifo:in_valid
	wire  [117:0] analog2_x_s1_agent_rf_source_data;                                              // analog2_x_s1_agent:rf_source_data -> analog2_x_s1_agent_rsp_fifo:in_data
	wire          analog2_x_s1_agent_rf_source_ready;                                             // analog2_x_s1_agent_rsp_fifo:in_ready -> analog2_x_s1_agent:rf_source_ready
	wire          analog2_x_s1_agent_rf_source_startofpacket;                                     // analog2_x_s1_agent:rf_source_startofpacket -> analog2_x_s1_agent_rsp_fifo:in_startofpacket
	wire          analog2_x_s1_agent_rf_source_endofpacket;                                       // analog2_x_s1_agent:rf_source_endofpacket -> analog2_x_s1_agent_rsp_fifo:in_endofpacket
	wire          analog2_x_s1_agent_rsp_fifo_out_valid;                                          // analog2_x_s1_agent_rsp_fifo:out_valid -> analog2_x_s1_agent:rf_sink_valid
	wire  [117:0] analog2_x_s1_agent_rsp_fifo_out_data;                                           // analog2_x_s1_agent_rsp_fifo:out_data -> analog2_x_s1_agent:rf_sink_data
	wire          analog2_x_s1_agent_rsp_fifo_out_ready;                                          // analog2_x_s1_agent:rf_sink_ready -> analog2_x_s1_agent_rsp_fifo:out_ready
	wire          analog2_x_s1_agent_rsp_fifo_out_startofpacket;                                  // analog2_x_s1_agent_rsp_fifo:out_startofpacket -> analog2_x_s1_agent:rf_sink_startofpacket
	wire          analog2_x_s1_agent_rsp_fifo_out_endofpacket;                                    // analog2_x_s1_agent_rsp_fifo:out_endofpacket -> analog2_x_s1_agent:rf_sink_endofpacket
	wire   [31:0] analog2_y_s1_agent_m0_readdata;                                                 // analog2_y_s1_translator:uav_readdata -> analog2_y_s1_agent:m0_readdata
	wire          analog2_y_s1_agent_m0_waitrequest;                                              // analog2_y_s1_translator:uav_waitrequest -> analog2_y_s1_agent:m0_waitrequest
	wire          analog2_y_s1_agent_m0_debugaccess;                                              // analog2_y_s1_agent:m0_debugaccess -> analog2_y_s1_translator:uav_debugaccess
	wire   [31:0] analog2_y_s1_agent_m0_address;                                                  // analog2_y_s1_agent:m0_address -> analog2_y_s1_translator:uav_address
	wire    [3:0] analog2_y_s1_agent_m0_byteenable;                                               // analog2_y_s1_agent:m0_byteenable -> analog2_y_s1_translator:uav_byteenable
	wire          analog2_y_s1_agent_m0_read;                                                     // analog2_y_s1_agent:m0_read -> analog2_y_s1_translator:uav_read
	wire          analog2_y_s1_agent_m0_readdatavalid;                                            // analog2_y_s1_translator:uav_readdatavalid -> analog2_y_s1_agent:m0_readdatavalid
	wire          analog2_y_s1_agent_m0_lock;                                                     // analog2_y_s1_agent:m0_lock -> analog2_y_s1_translator:uav_lock
	wire   [31:0] analog2_y_s1_agent_m0_writedata;                                                // analog2_y_s1_agent:m0_writedata -> analog2_y_s1_translator:uav_writedata
	wire          analog2_y_s1_agent_m0_write;                                                    // analog2_y_s1_agent:m0_write -> analog2_y_s1_translator:uav_write
	wire    [2:0] analog2_y_s1_agent_m0_burstcount;                                               // analog2_y_s1_agent:m0_burstcount -> analog2_y_s1_translator:uav_burstcount
	wire          analog2_y_s1_agent_rf_source_valid;                                             // analog2_y_s1_agent:rf_source_valid -> analog2_y_s1_agent_rsp_fifo:in_valid
	wire  [117:0] analog2_y_s1_agent_rf_source_data;                                              // analog2_y_s1_agent:rf_source_data -> analog2_y_s1_agent_rsp_fifo:in_data
	wire          analog2_y_s1_agent_rf_source_ready;                                             // analog2_y_s1_agent_rsp_fifo:in_ready -> analog2_y_s1_agent:rf_source_ready
	wire          analog2_y_s1_agent_rf_source_startofpacket;                                     // analog2_y_s1_agent:rf_source_startofpacket -> analog2_y_s1_agent_rsp_fifo:in_startofpacket
	wire          analog2_y_s1_agent_rf_source_endofpacket;                                       // analog2_y_s1_agent:rf_source_endofpacket -> analog2_y_s1_agent_rsp_fifo:in_endofpacket
	wire          analog2_y_s1_agent_rsp_fifo_out_valid;                                          // analog2_y_s1_agent_rsp_fifo:out_valid -> analog2_y_s1_agent:rf_sink_valid
	wire  [117:0] analog2_y_s1_agent_rsp_fifo_out_data;                                           // analog2_y_s1_agent_rsp_fifo:out_data -> analog2_y_s1_agent:rf_sink_data
	wire          analog2_y_s1_agent_rsp_fifo_out_ready;                                          // analog2_y_s1_agent:rf_sink_ready -> analog2_y_s1_agent_rsp_fifo:out_ready
	wire          analog2_y_s1_agent_rsp_fifo_out_startofpacket;                                  // analog2_y_s1_agent_rsp_fifo:out_startofpacket -> analog2_y_s1_agent:rf_sink_startofpacket
	wire          analog2_y_s1_agent_rsp_fifo_out_endofpacket;                                    // analog2_y_s1_agent_rsp_fifo:out_endofpacket -> analog2_y_s1_agent:rf_sink_endofpacket
	wire   [31:0] touch_panel_spi_spi_control_port_agent_m0_readdata;                             // touch_panel_spi_spi_control_port_translator:uav_readdata -> touch_panel_spi_spi_control_port_agent:m0_readdata
	wire          touch_panel_spi_spi_control_port_agent_m0_waitrequest;                          // touch_panel_spi_spi_control_port_translator:uav_waitrequest -> touch_panel_spi_spi_control_port_agent:m0_waitrequest
	wire          touch_panel_spi_spi_control_port_agent_m0_debugaccess;                          // touch_panel_spi_spi_control_port_agent:m0_debugaccess -> touch_panel_spi_spi_control_port_translator:uav_debugaccess
	wire   [31:0] touch_panel_spi_spi_control_port_agent_m0_address;                              // touch_panel_spi_spi_control_port_agent:m0_address -> touch_panel_spi_spi_control_port_translator:uav_address
	wire    [3:0] touch_panel_spi_spi_control_port_agent_m0_byteenable;                           // touch_panel_spi_spi_control_port_agent:m0_byteenable -> touch_panel_spi_spi_control_port_translator:uav_byteenable
	wire          touch_panel_spi_spi_control_port_agent_m0_read;                                 // touch_panel_spi_spi_control_port_agent:m0_read -> touch_panel_spi_spi_control_port_translator:uav_read
	wire          touch_panel_spi_spi_control_port_agent_m0_readdatavalid;                        // touch_panel_spi_spi_control_port_translator:uav_readdatavalid -> touch_panel_spi_spi_control_port_agent:m0_readdatavalid
	wire          touch_panel_spi_spi_control_port_agent_m0_lock;                                 // touch_panel_spi_spi_control_port_agent:m0_lock -> touch_panel_spi_spi_control_port_translator:uav_lock
	wire   [31:0] touch_panel_spi_spi_control_port_agent_m0_writedata;                            // touch_panel_spi_spi_control_port_agent:m0_writedata -> touch_panel_spi_spi_control_port_translator:uav_writedata
	wire          touch_panel_spi_spi_control_port_agent_m0_write;                                // touch_panel_spi_spi_control_port_agent:m0_write -> touch_panel_spi_spi_control_port_translator:uav_write
	wire    [2:0] touch_panel_spi_spi_control_port_agent_m0_burstcount;                           // touch_panel_spi_spi_control_port_agent:m0_burstcount -> touch_panel_spi_spi_control_port_translator:uav_burstcount
	wire          touch_panel_spi_spi_control_port_agent_rf_source_valid;                         // touch_panel_spi_spi_control_port_agent:rf_source_valid -> touch_panel_spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [117:0] touch_panel_spi_spi_control_port_agent_rf_source_data;                          // touch_panel_spi_spi_control_port_agent:rf_source_data -> touch_panel_spi_spi_control_port_agent_rsp_fifo:in_data
	wire          touch_panel_spi_spi_control_port_agent_rf_source_ready;                         // touch_panel_spi_spi_control_port_agent_rsp_fifo:in_ready -> touch_panel_spi_spi_control_port_agent:rf_source_ready
	wire          touch_panel_spi_spi_control_port_agent_rf_source_startofpacket;                 // touch_panel_spi_spi_control_port_agent:rf_source_startofpacket -> touch_panel_spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          touch_panel_spi_spi_control_port_agent_rf_source_endofpacket;                   // touch_panel_spi_spi_control_port_agent:rf_source_endofpacket -> touch_panel_spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          touch_panel_spi_spi_control_port_agent_rsp_fifo_out_valid;                      // touch_panel_spi_spi_control_port_agent_rsp_fifo:out_valid -> touch_panel_spi_spi_control_port_agent:rf_sink_valid
	wire  [117:0] touch_panel_spi_spi_control_port_agent_rsp_fifo_out_data;                       // touch_panel_spi_spi_control_port_agent_rsp_fifo:out_data -> touch_panel_spi_spi_control_port_agent:rf_sink_data
	wire          touch_panel_spi_spi_control_port_agent_rsp_fifo_out_ready;                      // touch_panel_spi_spi_control_port_agent:rf_sink_ready -> touch_panel_spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          touch_panel_spi_spi_control_port_agent_rsp_fifo_out_startofpacket;              // touch_panel_spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> touch_panel_spi_spi_control_port_agent:rf_sink_startofpacket
	wire          touch_panel_spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                // touch_panel_spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> touch_panel_spi_spi_control_port_agent:rf_sink_endofpacket
	wire          alt_vip_vfr_0_avalon_master_agent_cp_valid;                                     // alt_vip_vfr_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [116:0] alt_vip_vfr_0_avalon_master_agent_cp_data;                                      // alt_vip_vfr_0_avalon_master_agent:cp_data -> router:sink_data
	wire          alt_vip_vfr_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> alt_vip_vfr_0_avalon_master_agent:cp_ready
	wire          alt_vip_vfr_0_avalon_master_agent_cp_startofpacket;                             // alt_vip_vfr_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          alt_vip_vfr_0_avalon_master_agent_cp_endofpacket;                               // alt_vip_vfr_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [116:0] router_src_data;                                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                               // cmd_demux:sink_ready -> router:src_ready
	wire   [26:0] router_src_channel;                                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                 // cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [116:0] cpu_data_master_agent_cp_data;                                                  // cpu_data_master_agent:cp_data -> router_001:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                 // router_001:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                         // cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                           // cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [116:0] router_001_src_data;                                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [26:0] router_001_src_channel;                                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                          // cpu_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [116:0] cpu_instruction_master_agent_cp_data;                                           // cpu_instruction_master_agent:cp_data -> router_002:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                          // router_002:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                  // cpu_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                    // cpu_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_004_src_valid;                                                           // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [116:0] router_004_src_data;                                                            // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                           // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [26:0] router_004_src_channel;                                                         // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [116:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                           // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [26:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                           // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [116:0] router_006_src_data;                                                            // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                           // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [26:0] router_006_src_channel;                                                         // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                   // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                     // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_007_src_valid;                                                           // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [116:0] router_007_src_data;                                                            // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                           // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [26:0] router_007_src_channel;                                                         // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                   // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                     // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_008_src_valid;                                                           // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [116:0] router_008_src_data;                                                            // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                           // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [26:0] router_008_src_channel;                                                         // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                   // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                     // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_009_src_valid;                                                           // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [116:0] router_009_src_data;                                                            // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                           // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [26:0] router_009_src_channel;                                                         // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                   // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                     // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_010_src_valid;                                                           // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [116:0] router_010_src_data;                                                            // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                           // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [26:0] router_010_src_channel;                                                         // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                   // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                     // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_011_src_valid;                                                           // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [116:0] router_011_src_data;                                                            // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                           // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [26:0] router_011_src_channel;                                                         // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                   // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                     // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_012_src_valid;                                                           // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [116:0] router_012_src_data;                                                            // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                           // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [26:0] router_012_src_channel;                                                         // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                   // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                     // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_013_src_valid;                                                           // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [116:0] router_013_src_data;                                                            // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                           // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [26:0] router_013_src_channel;                                                         // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                   // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                     // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_014_src_valid;                                                           // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [116:0] router_014_src_data;                                                            // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                           // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [26:0] router_014_src_channel;                                                         // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                   // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                     // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_015_src_valid;                                                           // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [116:0] router_015_src_data;                                                            // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                           // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [26:0] router_015_src_channel;                                                         // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                   // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                     // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_016_src_valid;                                                           // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [116:0] router_016_src_data;                                                            // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                           // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [26:0] router_016_src_channel;                                                         // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                   // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                     // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_017_src_valid;                                                           // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [116:0] router_017_src_data;                                                            // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                           // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [26:0] router_017_src_channel;                                                         // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                   // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                     // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_018_src_valid;                                                           // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [116:0] router_018_src_data;                                                            // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                           // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [26:0] router_018_src_channel;                                                         // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                   // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                     // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_019_src_valid;                                                           // router_019:src_valid -> rsp_demux_016:sink_valid
	wire  [116:0] router_019_src_data;                                                            // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                           // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [26:0] router_019_src_channel;                                                         // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                                   // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                     // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_020_src_valid;                                                           // router_020:src_valid -> rsp_demux_017:sink_valid
	wire  [116:0] router_020_src_data;                                                            // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                           // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [26:0] router_020_src_channel;                                                         // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                                   // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                     // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_021_src_valid;                                                           // router_021:src_valid -> rsp_demux_018:sink_valid
	wire  [116:0] router_021_src_data;                                                            // router_021:src_data -> rsp_demux_018:sink_data
	wire          router_021_src_ready;                                                           // rsp_demux_018:sink_ready -> router_021:src_ready
	wire   [26:0] router_021_src_channel;                                                         // router_021:src_channel -> rsp_demux_018:sink_channel
	wire          router_021_src_startofpacket;                                                   // router_021:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_021_src_endofpacket;                                                     // router_021:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_022_src_valid;                                                           // router_022:src_valid -> rsp_demux_019:sink_valid
	wire  [116:0] router_022_src_data;                                                            // router_022:src_data -> rsp_demux_019:sink_data
	wire          router_022_src_ready;                                                           // rsp_demux_019:sink_ready -> router_022:src_ready
	wire   [26:0] router_022_src_channel;                                                         // router_022:src_channel -> rsp_demux_019:sink_channel
	wire          router_022_src_startofpacket;                                                   // router_022:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_022_src_endofpacket;                                                     // router_022:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_023_src_valid;                                                           // router_023:src_valid -> rsp_demux_020:sink_valid
	wire  [116:0] router_023_src_data;                                                            // router_023:src_data -> rsp_demux_020:sink_data
	wire          router_023_src_ready;                                                           // rsp_demux_020:sink_ready -> router_023:src_ready
	wire   [26:0] router_023_src_channel;                                                         // router_023:src_channel -> rsp_demux_020:sink_channel
	wire          router_023_src_startofpacket;                                                   // router_023:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_023_src_endofpacket;                                                     // router_023:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_024_src_valid;                                                           // router_024:src_valid -> rsp_demux_021:sink_valid
	wire  [116:0] router_024_src_data;                                                            // router_024:src_data -> rsp_demux_021:sink_data
	wire          router_024_src_ready;                                                           // rsp_demux_021:sink_ready -> router_024:src_ready
	wire   [26:0] router_024_src_channel;                                                         // router_024:src_channel -> rsp_demux_021:sink_channel
	wire          router_024_src_startofpacket;                                                   // router_024:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_024_src_endofpacket;                                                     // router_024:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_025_src_valid;                                                           // router_025:src_valid -> rsp_demux_022:sink_valid
	wire  [116:0] router_025_src_data;                                                            // router_025:src_data -> rsp_demux_022:sink_data
	wire          router_025_src_ready;                                                           // rsp_demux_022:sink_ready -> router_025:src_ready
	wire   [26:0] router_025_src_channel;                                                         // router_025:src_channel -> rsp_demux_022:sink_channel
	wire          router_025_src_startofpacket;                                                   // router_025:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_025_src_endofpacket;                                                     // router_025:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          router_026_src_valid;                                                           // router_026:src_valid -> rsp_demux_023:sink_valid
	wire  [116:0] router_026_src_data;                                                            // router_026:src_data -> rsp_demux_023:sink_data
	wire          router_026_src_ready;                                                           // rsp_demux_023:sink_ready -> router_026:src_ready
	wire   [26:0] router_026_src_channel;                                                         // router_026:src_channel -> rsp_demux_023:sink_channel
	wire          router_026_src_startofpacket;                                                   // router_026:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_026_src_endofpacket;                                                     // router_026:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_027_src_valid;                                                           // router_027:src_valid -> rsp_demux_024:sink_valid
	wire  [116:0] router_027_src_data;                                                            // router_027:src_data -> rsp_demux_024:sink_data
	wire          router_027_src_ready;                                                           // rsp_demux_024:sink_ready -> router_027:src_ready
	wire   [26:0] router_027_src_channel;                                                         // router_027:src_channel -> rsp_demux_024:sink_channel
	wire          router_027_src_startofpacket;                                                   // router_027:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_027_src_endofpacket;                                                     // router_027:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_028_src_valid;                                                           // router_028:src_valid -> rsp_demux_025:sink_valid
	wire  [116:0] router_028_src_data;                                                            // router_028:src_data -> rsp_demux_025:sink_data
	wire          router_028_src_ready;                                                           // rsp_demux_025:sink_ready -> router_028:src_ready
	wire   [26:0] router_028_src_channel;                                                         // router_028:src_channel -> rsp_demux_025:sink_channel
	wire          router_028_src_startofpacket;                                                   // router_028:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_028_src_endofpacket;                                                     // router_028:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          router_029_src_valid;                                                           // router_029:src_valid -> rsp_demux_026:sink_valid
	wire  [116:0] router_029_src_data;                                                            // router_029:src_data -> rsp_demux_026:sink_data
	wire          router_029_src_ready;                                                           // rsp_demux_026:sink_ready -> router_029:src_ready
	wire   [26:0] router_029_src_channel;                                                         // router_029:src_channel -> rsp_demux_026:sink_channel
	wire          router_029_src_startofpacket;                                                   // router_029:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_029_src_endofpacket;                                                     // router_029:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_002_src_valid;                                                           // router_002:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [116:0] router_002_src_data;                                                            // router_002:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                           // cpu_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [26:0] router_002_src_channel;                                                         // router_002:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                                   // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [116:0] cpu_instruction_master_limiter_rsp_src_data;                                    // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                                   // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [26:0] cpu_instruction_master_limiter_rsp_src_channel;                                 // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                           // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                             // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                           // router_003:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire   [98:0] router_003_src_data;                                                            // router_003:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                           // sdram_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [26:0] router_003_src_channel;                                                         // router_003:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                           // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [116:0] sdram_s1_rsp_width_adapter_src_data;                                            // sdram_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                           // rsp_demux:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire   [26:0] sdram_s1_rsp_width_adapter_src_channel;                                         // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                   // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                     // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                              // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [26:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                           // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [98:0] sdram_s1_cmd_width_adapter_src_data;                                            // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                           // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire   [26:0] sdram_s1_cmd_width_adapter_src_channel;                                         // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                   // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                     // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire    [0:0] cpu_instruction_master_limiter_cmd_src_valid;                                   // cpu_instruction_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [116:0] cpu_instruction_master_limiter_cmd_src_data;                                    // cpu_instruction_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                                   // limiter_pipeline:in_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [26:0] cpu_instruction_master_limiter_cmd_src_channel;                                 // cpu_instruction_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                           // cpu_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                             // cpu_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                                 // limiter_pipeline:out_valid -> cmd_demux_002:sink_valid
	wire  [116:0] limiter_pipeline_source0_data;                                                  // limiter_pipeline:out_data -> cmd_demux_002:sink_data
	wire          limiter_pipeline_source0_ready;                                                 // cmd_demux_002:sink_ready -> limiter_pipeline:out_ready
	wire   [26:0] limiter_pipeline_source0_channel;                                               // limiter_pipeline:out_channel -> cmd_demux_002:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                         // limiter_pipeline:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                           // limiter_pipeline:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                          // rsp_mux_002:src_valid -> limiter_pipeline_001:in_valid
	wire  [116:0] rsp_mux_002_src_data;                                                           // rsp_mux_002:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_002_src_ready;                                                          // limiter_pipeline_001:in_ready -> rsp_mux_002:src_ready
	wire   [26:0] rsp_mux_002_src_channel;                                                        // rsp_mux_002:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                  // rsp_mux_002:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                    // rsp_mux_002:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                             // limiter_pipeline_001:out_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_001_source0_data;                                              // limiter_pipeline_001:out_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                             // cpu_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [26:0] limiter_pipeline_001_source0_channel;                                           // limiter_pipeline_001:out_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                     // limiter_pipeline_001:out_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                       // limiter_pipeline_001:out_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                           // sdram_s1_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire   [98:0] sdram_s1_burst_adapter_source0_data;                                            // sdram_s1_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          sdram_s1_burst_adapter_source0_ready;                                           // agent_pipeline:in_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [26:0] sdram_s1_burst_adapter_source0_channel;                                         // sdram_s1_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                   // sdram_s1_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                     // sdram_s1_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                   // agent_pipeline:out_valid -> sdram_s1_agent:cp_valid
	wire   [98:0] agent_pipeline_source0_data;                                                    // agent_pipeline:out_data -> sdram_s1_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                   // sdram_s1_agent:cp_ready -> agent_pipeline:out_ready
	wire   [26:0] agent_pipeline_source0_channel;                                                 // agent_pipeline:out_channel -> sdram_s1_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                           // agent_pipeline:out_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                             // agent_pipeline:out_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                        // sdram_s1_agent:rp_valid -> agent_pipeline_001:in_valid
	wire   [98:0] sdram_s1_agent_rp_data;                                                         // sdram_s1_agent:rp_data -> agent_pipeline_001:in_data
	wire          sdram_s1_agent_rp_ready;                                                        // agent_pipeline_001:in_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                // sdram_s1_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                  // sdram_s1_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                               // agent_pipeline_001:out_valid -> router_003:sink_valid
	wire   [98:0] agent_pipeline_001_source0_data;                                                // agent_pipeline_001:out_data -> router_003:sink_data
	wire          agent_pipeline_001_source0_ready;                                               // router_003:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                       // agent_pipeline_001:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                         // agent_pipeline_001:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [116:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                          // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire   [26:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                               // agent_pipeline_002:out_valid -> epcs_epcs_control_port_agent:cp_valid
	wire  [116:0] agent_pipeline_002_source0_data;                                                // agent_pipeline_002:out_data -> epcs_epcs_control_port_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                               // epcs_epcs_control_port_agent:cp_ready -> agent_pipeline_002:out_ready
	wire   [26:0] agent_pipeline_002_source0_channel;                                             // agent_pipeline_002:out_channel -> epcs_epcs_control_port_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                       // agent_pipeline_002:out_startofpacket -> epcs_epcs_control_port_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                         // agent_pipeline_002:out_endofpacket -> epcs_epcs_control_port_agent:cp_endofpacket
	wire          epcs_epcs_control_port_agent_rp_valid;                                          // epcs_epcs_control_port_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [116:0] epcs_epcs_control_port_agent_rp_data;                                           // epcs_epcs_control_port_agent:rp_data -> agent_pipeline_003:in_data
	wire          epcs_epcs_control_port_agent_rp_ready;                                          // agent_pipeline_003:in_ready -> epcs_epcs_control_port_agent:rp_ready
	wire          epcs_epcs_control_port_agent_rp_startofpacket;                                  // epcs_epcs_control_port_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          epcs_epcs_control_port_agent_rp_endofpacket;                                    // epcs_epcs_control_port_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                               // agent_pipeline_003:out_valid -> router_004:sink_valid
	wire  [116:0] agent_pipeline_003_source0_data;                                                // agent_pipeline_003:out_data -> router_004:sink_data
	wire          agent_pipeline_003_source0_ready;                                               // router_004:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                       // agent_pipeline_003:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                         // agent_pipeline_003:out_endofpacket -> router_004:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                          // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire  [116:0] cmd_mux_002_src_data;                                                           // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                          // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire   [26:0] cmd_mux_002_src_channel;                                                        // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                  // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                    // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                               // agent_pipeline_004:out_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire  [116:0] agent_pipeline_004_source0_data;                                                // agent_pipeline_004:out_data -> cpu_jtag_debug_module_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                               // cpu_jtag_debug_module_agent:cp_ready -> agent_pipeline_004:out_ready
	wire   [26:0] agent_pipeline_004_source0_channel;                                             // agent_pipeline_004:out_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                       // agent_pipeline_004:out_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                         // agent_pipeline_004:out_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire          cpu_jtag_debug_module_agent_rp_valid;                                           // cpu_jtag_debug_module_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [116:0] cpu_jtag_debug_module_agent_rp_data;                                            // cpu_jtag_debug_module_agent:rp_data -> agent_pipeline_005:in_data
	wire          cpu_jtag_debug_module_agent_rp_ready;                                           // agent_pipeline_005:in_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire          cpu_jtag_debug_module_agent_rp_startofpacket;                                   // cpu_jtag_debug_module_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rp_endofpacket;                                     // cpu_jtag_debug_module_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                               // agent_pipeline_005:out_valid -> router_005:sink_valid
	wire  [116:0] agent_pipeline_005_source0_data;                                                // agent_pipeline_005:out_data -> router_005:sink_data
	wire          agent_pipeline_005_source0_ready;                                               // router_005:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                       // agent_pipeline_005:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                         // agent_pipeline_005:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                          // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire  [116:0] cmd_mux_003_src_data;                                                           // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                          // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire   [26:0] cmd_mux_003_src_channel;                                                        // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                  // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                    // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                               // agent_pipeline_006:out_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_006_source0_data;                                                // agent_pipeline_006:out_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                               // jtag_uart_avalon_jtag_slave_agent:cp_ready -> agent_pipeline_006:out_ready
	wire   [26:0] agent_pipeline_006_source0_channel;                                             // agent_pipeline_006:out_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                       // agent_pipeline_006:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                         // agent_pipeline_006:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                     // jtag_uart_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [116:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                      // jtag_uart_avalon_jtag_slave_agent:rp_data -> agent_pipeline_007:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                     // agent_pipeline_007:in_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                             // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                               // agent_pipeline_007:out_valid -> router_006:sink_valid
	wire  [116:0] agent_pipeline_007_source0_data;                                                // agent_pipeline_007:out_data -> router_006:sink_data
	wire          agent_pipeline_007_source0_ready;                                               // router_006:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                       // agent_pipeline_007:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                         // agent_pipeline_007:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                          // cmd_mux_004:src_valid -> agent_pipeline_008:in_valid
	wire  [116:0] cmd_mux_004_src_data;                                                           // cmd_mux_004:src_data -> agent_pipeline_008:in_data
	wire          cmd_mux_004_src_ready;                                                          // agent_pipeline_008:in_ready -> cmd_mux_004:src_ready
	wire   [26:0] cmd_mux_004_src_channel;                                                        // cmd_mux_004:src_channel -> agent_pipeline_008:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                  // cmd_mux_004:src_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                    // cmd_mux_004:src_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                               // agent_pipeline_008:out_valid -> alt_vip_vfr_0_avalon_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_008_source0_data;                                                // agent_pipeline_008:out_data -> alt_vip_vfr_0_avalon_slave_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                               // alt_vip_vfr_0_avalon_slave_agent:cp_ready -> agent_pipeline_008:out_ready
	wire   [26:0] agent_pipeline_008_source0_channel;                                             // agent_pipeline_008:out_channel -> alt_vip_vfr_0_avalon_slave_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                       // agent_pipeline_008:out_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                         // agent_pipeline_008:out_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_valid;                                      // alt_vip_vfr_0_avalon_slave_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [116:0] alt_vip_vfr_0_avalon_slave_agent_rp_data;                                       // alt_vip_vfr_0_avalon_slave_agent:rp_data -> agent_pipeline_009:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_ready;                                      // agent_pipeline_009:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rp_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket;                              // alt_vip_vfr_0_avalon_slave_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket;                                // alt_vip_vfr_0_avalon_slave_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                               // agent_pipeline_009:out_valid -> router_007:sink_valid
	wire  [116:0] agent_pipeline_009_source0_data;                                                // agent_pipeline_009:out_data -> router_007:sink_data
	wire          agent_pipeline_009_source0_ready;                                               // router_007:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                       // agent_pipeline_009:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                         // agent_pipeline_009:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                          // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire  [116:0] cmd_mux_005_src_data;                                                           // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                          // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire   [26:0] cmd_mux_005_src_channel;                                                        // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                                  // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                    // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                               // agent_pipeline_010:out_valid -> sysid_control_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_010_source0_data;                                                // agent_pipeline_010:out_data -> sysid_control_slave_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                               // sysid_control_slave_agent:cp_ready -> agent_pipeline_010:out_ready
	wire   [26:0] agent_pipeline_010_source0_channel;                                             // agent_pipeline_010:out_channel -> sysid_control_slave_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                       // agent_pipeline_010:out_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                         // agent_pipeline_010:out_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                             // sysid_control_slave_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [116:0] sysid_control_slave_agent_rp_data;                                              // sysid_control_slave_agent:rp_data -> agent_pipeline_011:in_data
	wire          sysid_control_slave_agent_rp_ready;                                             // agent_pipeline_011:in_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                     // sysid_control_slave_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                       // sysid_control_slave_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                               // agent_pipeline_011:out_valid -> router_008:sink_valid
	wire  [116:0] agent_pipeline_011_source0_data;                                                // agent_pipeline_011:out_data -> router_008:sink_data
	wire          agent_pipeline_011_source0_ready;                                               // router_008:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                       // agent_pipeline_011:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                         // agent_pipeline_011:out_endofpacket -> router_008:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                          // cmd_mux_006:src_valid -> agent_pipeline_012:in_valid
	wire  [116:0] cmd_mux_006_src_data;                                                           // cmd_mux_006:src_data -> agent_pipeline_012:in_data
	wire          cmd_mux_006_src_ready;                                                          // agent_pipeline_012:in_ready -> cmd_mux_006:src_ready
	wire   [26:0] cmd_mux_006_src_channel;                                                        // cmd_mux_006:src_channel -> agent_pipeline_012:in_channel
	wire          cmd_mux_006_src_startofpacket;                                                  // cmd_mux_006:src_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                    // cmd_mux_006:src_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                               // agent_pipeline_012:out_valid -> f_engine_frac_cpu_agent:cp_valid
	wire  [116:0] agent_pipeline_012_source0_data;                                                // agent_pipeline_012:out_data -> f_engine_frac_cpu_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                               // f_engine_frac_cpu_agent:cp_ready -> agent_pipeline_012:out_ready
	wire   [26:0] agent_pipeline_012_source0_channel;                                             // agent_pipeline_012:out_channel -> f_engine_frac_cpu_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                       // agent_pipeline_012:out_startofpacket -> f_engine_frac_cpu_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                         // agent_pipeline_012:out_endofpacket -> f_engine_frac_cpu_agent:cp_endofpacket
	wire          f_engine_frac_cpu_agent_rp_valid;                                               // f_engine_frac_cpu_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [116:0] f_engine_frac_cpu_agent_rp_data;                                                // f_engine_frac_cpu_agent:rp_data -> agent_pipeline_013:in_data
	wire          f_engine_frac_cpu_agent_rp_ready;                                               // agent_pipeline_013:in_ready -> f_engine_frac_cpu_agent:rp_ready
	wire          f_engine_frac_cpu_agent_rp_startofpacket;                                       // f_engine_frac_cpu_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          f_engine_frac_cpu_agent_rp_endofpacket;                                         // f_engine_frac_cpu_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                               // agent_pipeline_013:out_valid -> router_009:sink_valid
	wire  [116:0] agent_pipeline_013_source0_data;                                                // agent_pipeline_013:out_data -> router_009:sink_data
	wire          agent_pipeline_013_source0_ready;                                               // router_009:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                       // agent_pipeline_013:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                         // agent_pipeline_013:out_endofpacket -> router_009:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                          // cmd_mux_007:src_valid -> agent_pipeline_014:in_valid
	wire  [116:0] cmd_mux_007_src_data;                                                           // cmd_mux_007:src_data -> agent_pipeline_014:in_data
	wire          cmd_mux_007_src_ready;                                                          // agent_pipeline_014:in_ready -> cmd_mux_007:src_ready
	wire   [26:0] cmd_mux_007_src_channel;                                                        // cmd_mux_007:src_channel -> agent_pipeline_014:in_channel
	wire          cmd_mux_007_src_startofpacket;                                                  // cmd_mux_007:src_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                    // cmd_mux_007:src_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                               // agent_pipeline_014:out_valid -> timer_0_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_014_source0_data;                                                // agent_pipeline_014:out_data -> timer_0_s1_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                               // timer_0_s1_agent:cp_ready -> agent_pipeline_014:out_ready
	wire   [26:0] agent_pipeline_014_source0_channel;                                             // agent_pipeline_014:out_channel -> timer_0_s1_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                       // agent_pipeline_014:out_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                         // agent_pipeline_014:out_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                      // timer_0_s1_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [116:0] timer_0_s1_agent_rp_data;                                                       // timer_0_s1_agent:rp_data -> agent_pipeline_015:in_data
	wire          timer_0_s1_agent_rp_ready;                                                      // agent_pipeline_015:in_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                              // timer_0_s1_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                // timer_0_s1_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                               // agent_pipeline_015:out_valid -> router_010:sink_valid
	wire  [116:0] agent_pipeline_015_source0_data;                                                // agent_pipeline_015:out_data -> router_010:sink_data
	wire          agent_pipeline_015_source0_ready;                                               // router_010:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                       // agent_pipeline_015:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                         // agent_pipeline_015:out_endofpacket -> router_010:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                          // cmd_mux_008:src_valid -> agent_pipeline_016:in_valid
	wire  [116:0] cmd_mux_008_src_data;                                                           // cmd_mux_008:src_data -> agent_pipeline_016:in_data
	wire          cmd_mux_008_src_ready;                                                          // agent_pipeline_016:in_ready -> cmd_mux_008:src_ready
	wire   [26:0] cmd_mux_008_src_channel;                                                        // cmd_mux_008:src_channel -> agent_pipeline_016:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                  // cmd_mux_008:src_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                    // cmd_mux_008:src_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                               // agent_pipeline_016:out_valid -> pio_led_green_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_016_source0_data;                                                // agent_pipeline_016:out_data -> pio_led_green_s1_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                                               // pio_led_green_s1_agent:cp_ready -> agent_pipeline_016:out_ready
	wire   [26:0] agent_pipeline_016_source0_channel;                                             // agent_pipeline_016:out_channel -> pio_led_green_s1_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                                       // agent_pipeline_016:out_startofpacket -> pio_led_green_s1_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                         // agent_pipeline_016:out_endofpacket -> pio_led_green_s1_agent:cp_endofpacket
	wire          pio_led_green_s1_agent_rp_valid;                                                // pio_led_green_s1_agent:rp_valid -> agent_pipeline_017:in_valid
	wire  [116:0] pio_led_green_s1_agent_rp_data;                                                 // pio_led_green_s1_agent:rp_data -> agent_pipeline_017:in_data
	wire          pio_led_green_s1_agent_rp_ready;                                                // agent_pipeline_017:in_ready -> pio_led_green_s1_agent:rp_ready
	wire          pio_led_green_s1_agent_rp_startofpacket;                                        // pio_led_green_s1_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          pio_led_green_s1_agent_rp_endofpacket;                                          // pio_led_green_s1_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                               // agent_pipeline_017:out_valid -> router_011:sink_valid
	wire  [116:0] agent_pipeline_017_source0_data;                                                // agent_pipeline_017:out_data -> router_011:sink_data
	wire          agent_pipeline_017_source0_ready;                                               // router_011:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                                       // agent_pipeline_017:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                         // agent_pipeline_017:out_endofpacket -> router_011:sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                          // cmd_mux_009:src_valid -> agent_pipeline_018:in_valid
	wire  [116:0] cmd_mux_009_src_data;                                                           // cmd_mux_009:src_data -> agent_pipeline_018:in_data
	wire          cmd_mux_009_src_ready;                                                          // agent_pipeline_018:in_ready -> cmd_mux_009:src_ready
	wire   [26:0] cmd_mux_009_src_channel;                                                        // cmd_mux_009:src_channel -> agent_pipeline_018:in_channel
	wire          cmd_mux_009_src_startofpacket;                                                  // cmd_mux_009:src_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                    // cmd_mux_009:src_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                               // agent_pipeline_018:out_valid -> pio_sw_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_018_source0_data;                                                // agent_pipeline_018:out_data -> pio_sw_s1_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                                               // pio_sw_s1_agent:cp_ready -> agent_pipeline_018:out_ready
	wire   [26:0] agent_pipeline_018_source0_channel;                                             // agent_pipeline_018:out_channel -> pio_sw_s1_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                                       // agent_pipeline_018:out_startofpacket -> pio_sw_s1_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                         // agent_pipeline_018:out_endofpacket -> pio_sw_s1_agent:cp_endofpacket
	wire          pio_sw_s1_agent_rp_valid;                                                       // pio_sw_s1_agent:rp_valid -> agent_pipeline_019:in_valid
	wire  [116:0] pio_sw_s1_agent_rp_data;                                                        // pio_sw_s1_agent:rp_data -> agent_pipeline_019:in_data
	wire          pio_sw_s1_agent_rp_ready;                                                       // agent_pipeline_019:in_ready -> pio_sw_s1_agent:rp_ready
	wire          pio_sw_s1_agent_rp_startofpacket;                                               // pio_sw_s1_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          pio_sw_s1_agent_rp_endofpacket;                                                 // pio_sw_s1_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                               // agent_pipeline_019:out_valid -> router_012:sink_valid
	wire  [116:0] agent_pipeline_019_source0_data;                                                // agent_pipeline_019:out_data -> router_012:sink_data
	wire          agent_pipeline_019_source0_ready;                                               // router_012:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                                       // agent_pipeline_019:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                         // agent_pipeline_019:out_endofpacket -> router_012:sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                          // cmd_mux_010:src_valid -> agent_pipeline_020:in_valid
	wire  [116:0] cmd_mux_010_src_data;                                                           // cmd_mux_010:src_data -> agent_pipeline_020:in_data
	wire          cmd_mux_010_src_ready;                                                          // agent_pipeline_020:in_ready -> cmd_mux_010:src_ready
	wire   [26:0] cmd_mux_010_src_channel;                                                        // cmd_mux_010:src_channel -> agent_pipeline_020:in_channel
	wire          cmd_mux_010_src_startofpacket;                                                  // cmd_mux_010:src_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                    // cmd_mux_010:src_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                                               // agent_pipeline_020:out_valid -> touch_panel_busy_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_020_source0_data;                                                // agent_pipeline_020:out_data -> touch_panel_busy_s1_agent:cp_data
	wire          agent_pipeline_020_source0_ready;                                               // touch_panel_busy_s1_agent:cp_ready -> agent_pipeline_020:out_ready
	wire   [26:0] agent_pipeline_020_source0_channel;                                             // agent_pipeline_020:out_channel -> touch_panel_busy_s1_agent:cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                                       // agent_pipeline_020:out_startofpacket -> touch_panel_busy_s1_agent:cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                                         // agent_pipeline_020:out_endofpacket -> touch_panel_busy_s1_agent:cp_endofpacket
	wire          touch_panel_busy_s1_agent_rp_valid;                                             // touch_panel_busy_s1_agent:rp_valid -> agent_pipeline_021:in_valid
	wire  [116:0] touch_panel_busy_s1_agent_rp_data;                                              // touch_panel_busy_s1_agent:rp_data -> agent_pipeline_021:in_data
	wire          touch_panel_busy_s1_agent_rp_ready;                                             // agent_pipeline_021:in_ready -> touch_panel_busy_s1_agent:rp_ready
	wire          touch_panel_busy_s1_agent_rp_startofpacket;                                     // touch_panel_busy_s1_agent:rp_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          touch_panel_busy_s1_agent_rp_endofpacket;                                       // touch_panel_busy_s1_agent:rp_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                                               // agent_pipeline_021:out_valid -> router_013:sink_valid
	wire  [116:0] agent_pipeline_021_source0_data;                                                // agent_pipeline_021:out_data -> router_013:sink_data
	wire          agent_pipeline_021_source0_ready;                                               // router_013:sink_ready -> agent_pipeline_021:out_ready
	wire          agent_pipeline_021_source0_startofpacket;                                       // agent_pipeline_021:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                                         // agent_pipeline_021:out_endofpacket -> router_013:sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                          // cmd_mux_011:src_valid -> agent_pipeline_022:in_valid
	wire  [116:0] cmd_mux_011_src_data;                                                           // cmd_mux_011:src_data -> agent_pipeline_022:in_data
	wire          cmd_mux_011_src_ready;                                                          // agent_pipeline_022:in_ready -> cmd_mux_011:src_ready
	wire   [26:0] cmd_mux_011_src_channel;                                                        // cmd_mux_011:src_channel -> agent_pipeline_022:in_channel
	wire          cmd_mux_011_src_startofpacket;                                                  // cmd_mux_011:src_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                    // cmd_mux_011:src_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                                               // agent_pipeline_022:out_valid -> touch_panel_penirq_n_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_022_source0_data;                                                // agent_pipeline_022:out_data -> touch_panel_penirq_n_s1_agent:cp_data
	wire          agent_pipeline_022_source0_ready;                                               // touch_panel_penirq_n_s1_agent:cp_ready -> agent_pipeline_022:out_ready
	wire   [26:0] agent_pipeline_022_source0_channel;                                             // agent_pipeline_022:out_channel -> touch_panel_penirq_n_s1_agent:cp_channel
	wire          agent_pipeline_022_source0_startofpacket;                                       // agent_pipeline_022:out_startofpacket -> touch_panel_penirq_n_s1_agent:cp_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                                         // agent_pipeline_022:out_endofpacket -> touch_panel_penirq_n_s1_agent:cp_endofpacket
	wire          touch_panel_penirq_n_s1_agent_rp_valid;                                         // touch_panel_penirq_n_s1_agent:rp_valid -> agent_pipeline_023:in_valid
	wire  [116:0] touch_panel_penirq_n_s1_agent_rp_data;                                          // touch_panel_penirq_n_s1_agent:rp_data -> agent_pipeline_023:in_data
	wire          touch_panel_penirq_n_s1_agent_rp_ready;                                         // agent_pipeline_023:in_ready -> touch_panel_penirq_n_s1_agent:rp_ready
	wire          touch_panel_penirq_n_s1_agent_rp_startofpacket;                                 // touch_panel_penirq_n_s1_agent:rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          touch_panel_penirq_n_s1_agent_rp_endofpacket;                                   // touch_panel_penirq_n_s1_agent:rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                                               // agent_pipeline_023:out_valid -> router_014:sink_valid
	wire  [116:0] agent_pipeline_023_source0_data;                                                // agent_pipeline_023:out_data -> router_014:sink_data
	wire          agent_pipeline_023_source0_ready;                                               // router_014:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                                       // agent_pipeline_023:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                                         // agent_pipeline_023:out_endofpacket -> router_014:sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                          // cmd_mux_012:src_valid -> agent_pipeline_024:in_valid
	wire  [116:0] cmd_mux_012_src_data;                                                           // cmd_mux_012:src_data -> agent_pipeline_024:in_data
	wire          cmd_mux_012_src_ready;                                                          // agent_pipeline_024:in_ready -> cmd_mux_012:src_ready
	wire   [26:0] cmd_mux_012_src_channel;                                                        // cmd_mux_012:src_channel -> agent_pipeline_024:in_channel
	wire          cmd_mux_012_src_startofpacket;                                                  // cmd_mux_012:src_startofpacket -> agent_pipeline_024:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                    // cmd_mux_012:src_endofpacket -> agent_pipeline_024:in_endofpacket
	wire          agent_pipeline_024_source0_valid;                                               // agent_pipeline_024:out_valid -> boton_a_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_024_source0_data;                                                // agent_pipeline_024:out_data -> boton_a_s1_agent:cp_data
	wire          agent_pipeline_024_source0_ready;                                               // boton_a_s1_agent:cp_ready -> agent_pipeline_024:out_ready
	wire   [26:0] agent_pipeline_024_source0_channel;                                             // agent_pipeline_024:out_channel -> boton_a_s1_agent:cp_channel
	wire          agent_pipeline_024_source0_startofpacket;                                       // agent_pipeline_024:out_startofpacket -> boton_a_s1_agent:cp_startofpacket
	wire          agent_pipeline_024_source0_endofpacket;                                         // agent_pipeline_024:out_endofpacket -> boton_a_s1_agent:cp_endofpacket
	wire          boton_a_s1_agent_rp_valid;                                                      // boton_a_s1_agent:rp_valid -> agent_pipeline_025:in_valid
	wire  [116:0] boton_a_s1_agent_rp_data;                                                       // boton_a_s1_agent:rp_data -> agent_pipeline_025:in_data
	wire          boton_a_s1_agent_rp_ready;                                                      // agent_pipeline_025:in_ready -> boton_a_s1_agent:rp_ready
	wire          boton_a_s1_agent_rp_startofpacket;                                              // boton_a_s1_agent:rp_startofpacket -> agent_pipeline_025:in_startofpacket
	wire          boton_a_s1_agent_rp_endofpacket;                                                // boton_a_s1_agent:rp_endofpacket -> agent_pipeline_025:in_endofpacket
	wire          agent_pipeline_025_source0_valid;                                               // agent_pipeline_025:out_valid -> router_015:sink_valid
	wire  [116:0] agent_pipeline_025_source0_data;                                                // agent_pipeline_025:out_data -> router_015:sink_data
	wire          agent_pipeline_025_source0_ready;                                               // router_015:sink_ready -> agent_pipeline_025:out_ready
	wire          agent_pipeline_025_source0_startofpacket;                                       // agent_pipeline_025:out_startofpacket -> router_015:sink_startofpacket
	wire          agent_pipeline_025_source0_endofpacket;                                         // agent_pipeline_025:out_endofpacket -> router_015:sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                          // cmd_mux_013:src_valid -> agent_pipeline_026:in_valid
	wire  [116:0] cmd_mux_013_src_data;                                                           // cmd_mux_013:src_data -> agent_pipeline_026:in_data
	wire          cmd_mux_013_src_ready;                                                          // agent_pipeline_026:in_ready -> cmd_mux_013:src_ready
	wire   [26:0] cmd_mux_013_src_channel;                                                        // cmd_mux_013:src_channel -> agent_pipeline_026:in_channel
	wire          cmd_mux_013_src_startofpacket;                                                  // cmd_mux_013:src_startofpacket -> agent_pipeline_026:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                    // cmd_mux_013:src_endofpacket -> agent_pipeline_026:in_endofpacket
	wire          agent_pipeline_026_source0_valid;                                               // agent_pipeline_026:out_valid -> boton_b_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_026_source0_data;                                                // agent_pipeline_026:out_data -> boton_b_s1_agent:cp_data
	wire          agent_pipeline_026_source0_ready;                                               // boton_b_s1_agent:cp_ready -> agent_pipeline_026:out_ready
	wire   [26:0] agent_pipeline_026_source0_channel;                                             // agent_pipeline_026:out_channel -> boton_b_s1_agent:cp_channel
	wire          agent_pipeline_026_source0_startofpacket;                                       // agent_pipeline_026:out_startofpacket -> boton_b_s1_agent:cp_startofpacket
	wire          agent_pipeline_026_source0_endofpacket;                                         // agent_pipeline_026:out_endofpacket -> boton_b_s1_agent:cp_endofpacket
	wire          boton_b_s1_agent_rp_valid;                                                      // boton_b_s1_agent:rp_valid -> agent_pipeline_027:in_valid
	wire  [116:0] boton_b_s1_agent_rp_data;                                                       // boton_b_s1_agent:rp_data -> agent_pipeline_027:in_data
	wire          boton_b_s1_agent_rp_ready;                                                      // agent_pipeline_027:in_ready -> boton_b_s1_agent:rp_ready
	wire          boton_b_s1_agent_rp_startofpacket;                                              // boton_b_s1_agent:rp_startofpacket -> agent_pipeline_027:in_startofpacket
	wire          boton_b_s1_agent_rp_endofpacket;                                                // boton_b_s1_agent:rp_endofpacket -> agent_pipeline_027:in_endofpacket
	wire          agent_pipeline_027_source0_valid;                                               // agent_pipeline_027:out_valid -> router_016:sink_valid
	wire  [116:0] agent_pipeline_027_source0_data;                                                // agent_pipeline_027:out_data -> router_016:sink_data
	wire          agent_pipeline_027_source0_ready;                                               // router_016:sink_ready -> agent_pipeline_027:out_ready
	wire          agent_pipeline_027_source0_startofpacket;                                       // agent_pipeline_027:out_startofpacket -> router_016:sink_startofpacket
	wire          agent_pipeline_027_source0_endofpacket;                                         // agent_pipeline_027:out_endofpacket -> router_016:sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                          // cmd_mux_014:src_valid -> agent_pipeline_028:in_valid
	wire  [116:0] cmd_mux_014_src_data;                                                           // cmd_mux_014:src_data -> agent_pipeline_028:in_data
	wire          cmd_mux_014_src_ready;                                                          // agent_pipeline_028:in_ready -> cmd_mux_014:src_ready
	wire   [26:0] cmd_mux_014_src_channel;                                                        // cmd_mux_014:src_channel -> agent_pipeline_028:in_channel
	wire          cmd_mux_014_src_startofpacket;                                                  // cmd_mux_014:src_startofpacket -> agent_pipeline_028:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                    // cmd_mux_014:src_endofpacket -> agent_pipeline_028:in_endofpacket
	wire          agent_pipeline_028_source0_valid;                                               // agent_pipeline_028:out_valid -> boton_x_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_028_source0_data;                                                // agent_pipeline_028:out_data -> boton_x_s1_agent:cp_data
	wire          agent_pipeline_028_source0_ready;                                               // boton_x_s1_agent:cp_ready -> agent_pipeline_028:out_ready
	wire   [26:0] agent_pipeline_028_source0_channel;                                             // agent_pipeline_028:out_channel -> boton_x_s1_agent:cp_channel
	wire          agent_pipeline_028_source0_startofpacket;                                       // agent_pipeline_028:out_startofpacket -> boton_x_s1_agent:cp_startofpacket
	wire          agent_pipeline_028_source0_endofpacket;                                         // agent_pipeline_028:out_endofpacket -> boton_x_s1_agent:cp_endofpacket
	wire          boton_x_s1_agent_rp_valid;                                                      // boton_x_s1_agent:rp_valid -> agent_pipeline_029:in_valid
	wire  [116:0] boton_x_s1_agent_rp_data;                                                       // boton_x_s1_agent:rp_data -> agent_pipeline_029:in_data
	wire          boton_x_s1_agent_rp_ready;                                                      // agent_pipeline_029:in_ready -> boton_x_s1_agent:rp_ready
	wire          boton_x_s1_agent_rp_startofpacket;                                              // boton_x_s1_agent:rp_startofpacket -> agent_pipeline_029:in_startofpacket
	wire          boton_x_s1_agent_rp_endofpacket;                                                // boton_x_s1_agent:rp_endofpacket -> agent_pipeline_029:in_endofpacket
	wire          agent_pipeline_029_source0_valid;                                               // agent_pipeline_029:out_valid -> router_017:sink_valid
	wire  [116:0] agent_pipeline_029_source0_data;                                                // agent_pipeline_029:out_data -> router_017:sink_data
	wire          agent_pipeline_029_source0_ready;                                               // router_017:sink_ready -> agent_pipeline_029:out_ready
	wire          agent_pipeline_029_source0_startofpacket;                                       // agent_pipeline_029:out_startofpacket -> router_017:sink_startofpacket
	wire          agent_pipeline_029_source0_endofpacket;                                         // agent_pipeline_029:out_endofpacket -> router_017:sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                          // cmd_mux_015:src_valid -> agent_pipeline_030:in_valid
	wire  [116:0] cmd_mux_015_src_data;                                                           // cmd_mux_015:src_data -> agent_pipeline_030:in_data
	wire          cmd_mux_015_src_ready;                                                          // agent_pipeline_030:in_ready -> cmd_mux_015:src_ready
	wire   [26:0] cmd_mux_015_src_channel;                                                        // cmd_mux_015:src_channel -> agent_pipeline_030:in_channel
	wire          cmd_mux_015_src_startofpacket;                                                  // cmd_mux_015:src_startofpacket -> agent_pipeline_030:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                    // cmd_mux_015:src_endofpacket -> agent_pipeline_030:in_endofpacket
	wire          agent_pipeline_030_source0_valid;                                               // agent_pipeline_030:out_valid -> boton_y_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_030_source0_data;                                                // agent_pipeline_030:out_data -> boton_y_s1_agent:cp_data
	wire          agent_pipeline_030_source0_ready;                                               // boton_y_s1_agent:cp_ready -> agent_pipeline_030:out_ready
	wire   [26:0] agent_pipeline_030_source0_channel;                                             // agent_pipeline_030:out_channel -> boton_y_s1_agent:cp_channel
	wire          agent_pipeline_030_source0_startofpacket;                                       // agent_pipeline_030:out_startofpacket -> boton_y_s1_agent:cp_startofpacket
	wire          agent_pipeline_030_source0_endofpacket;                                         // agent_pipeline_030:out_endofpacket -> boton_y_s1_agent:cp_endofpacket
	wire          boton_y_s1_agent_rp_valid;                                                      // boton_y_s1_agent:rp_valid -> agent_pipeline_031:in_valid
	wire  [116:0] boton_y_s1_agent_rp_data;                                                       // boton_y_s1_agent:rp_data -> agent_pipeline_031:in_data
	wire          boton_y_s1_agent_rp_ready;                                                      // agent_pipeline_031:in_ready -> boton_y_s1_agent:rp_ready
	wire          boton_y_s1_agent_rp_startofpacket;                                              // boton_y_s1_agent:rp_startofpacket -> agent_pipeline_031:in_startofpacket
	wire          boton_y_s1_agent_rp_endofpacket;                                                // boton_y_s1_agent:rp_endofpacket -> agent_pipeline_031:in_endofpacket
	wire          agent_pipeline_031_source0_valid;                                               // agent_pipeline_031:out_valid -> router_018:sink_valid
	wire  [116:0] agent_pipeline_031_source0_data;                                                // agent_pipeline_031:out_data -> router_018:sink_data
	wire          agent_pipeline_031_source0_ready;                                               // router_018:sink_ready -> agent_pipeline_031:out_ready
	wire          agent_pipeline_031_source0_startofpacket;                                       // agent_pipeline_031:out_startofpacket -> router_018:sink_startofpacket
	wire          agent_pipeline_031_source0_endofpacket;                                         // agent_pipeline_031:out_endofpacket -> router_018:sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                          // cmd_mux_016:src_valid -> agent_pipeline_032:in_valid
	wire  [116:0] cmd_mux_016_src_data;                                                           // cmd_mux_016:src_data -> agent_pipeline_032:in_data
	wire          cmd_mux_016_src_ready;                                                          // agent_pipeline_032:in_ready -> cmd_mux_016:src_ready
	wire   [26:0] cmd_mux_016_src_channel;                                                        // cmd_mux_016:src_channel -> agent_pipeline_032:in_channel
	wire          cmd_mux_016_src_startofpacket;                                                  // cmd_mux_016:src_startofpacket -> agent_pipeline_032:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                    // cmd_mux_016:src_endofpacket -> agent_pipeline_032:in_endofpacket
	wire          agent_pipeline_032_source0_valid;                                               // agent_pipeline_032:out_valid -> boton_l_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_032_source0_data;                                                // agent_pipeline_032:out_data -> boton_l_s1_agent:cp_data
	wire          agent_pipeline_032_source0_ready;                                               // boton_l_s1_agent:cp_ready -> agent_pipeline_032:out_ready
	wire   [26:0] agent_pipeline_032_source0_channel;                                             // agent_pipeline_032:out_channel -> boton_l_s1_agent:cp_channel
	wire          agent_pipeline_032_source0_startofpacket;                                       // agent_pipeline_032:out_startofpacket -> boton_l_s1_agent:cp_startofpacket
	wire          agent_pipeline_032_source0_endofpacket;                                         // agent_pipeline_032:out_endofpacket -> boton_l_s1_agent:cp_endofpacket
	wire          boton_l_s1_agent_rp_valid;                                                      // boton_l_s1_agent:rp_valid -> agent_pipeline_033:in_valid
	wire  [116:0] boton_l_s1_agent_rp_data;                                                       // boton_l_s1_agent:rp_data -> agent_pipeline_033:in_data
	wire          boton_l_s1_agent_rp_ready;                                                      // agent_pipeline_033:in_ready -> boton_l_s1_agent:rp_ready
	wire          boton_l_s1_agent_rp_startofpacket;                                              // boton_l_s1_agent:rp_startofpacket -> agent_pipeline_033:in_startofpacket
	wire          boton_l_s1_agent_rp_endofpacket;                                                // boton_l_s1_agent:rp_endofpacket -> agent_pipeline_033:in_endofpacket
	wire          agent_pipeline_033_source0_valid;                                               // agent_pipeline_033:out_valid -> router_019:sink_valid
	wire  [116:0] agent_pipeline_033_source0_data;                                                // agent_pipeline_033:out_data -> router_019:sink_data
	wire          agent_pipeline_033_source0_ready;                                               // router_019:sink_ready -> agent_pipeline_033:out_ready
	wire          agent_pipeline_033_source0_startofpacket;                                       // agent_pipeline_033:out_startofpacket -> router_019:sink_startofpacket
	wire          agent_pipeline_033_source0_endofpacket;                                         // agent_pipeline_033:out_endofpacket -> router_019:sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                          // cmd_mux_017:src_valid -> agent_pipeline_034:in_valid
	wire  [116:0] cmd_mux_017_src_data;                                                           // cmd_mux_017:src_data -> agent_pipeline_034:in_data
	wire          cmd_mux_017_src_ready;                                                          // agent_pipeline_034:in_ready -> cmd_mux_017:src_ready
	wire   [26:0] cmd_mux_017_src_channel;                                                        // cmd_mux_017:src_channel -> agent_pipeline_034:in_channel
	wire          cmd_mux_017_src_startofpacket;                                                  // cmd_mux_017:src_startofpacket -> agent_pipeline_034:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                    // cmd_mux_017:src_endofpacket -> agent_pipeline_034:in_endofpacket
	wire          agent_pipeline_034_source0_valid;                                               // agent_pipeline_034:out_valid -> boton_r_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_034_source0_data;                                                // agent_pipeline_034:out_data -> boton_r_s1_agent:cp_data
	wire          agent_pipeline_034_source0_ready;                                               // boton_r_s1_agent:cp_ready -> agent_pipeline_034:out_ready
	wire   [26:0] agent_pipeline_034_source0_channel;                                             // agent_pipeline_034:out_channel -> boton_r_s1_agent:cp_channel
	wire          agent_pipeline_034_source0_startofpacket;                                       // agent_pipeline_034:out_startofpacket -> boton_r_s1_agent:cp_startofpacket
	wire          agent_pipeline_034_source0_endofpacket;                                         // agent_pipeline_034:out_endofpacket -> boton_r_s1_agent:cp_endofpacket
	wire          boton_r_s1_agent_rp_valid;                                                      // boton_r_s1_agent:rp_valid -> agent_pipeline_035:in_valid
	wire  [116:0] boton_r_s1_agent_rp_data;                                                       // boton_r_s1_agent:rp_data -> agent_pipeline_035:in_data
	wire          boton_r_s1_agent_rp_ready;                                                      // agent_pipeline_035:in_ready -> boton_r_s1_agent:rp_ready
	wire          boton_r_s1_agent_rp_startofpacket;                                              // boton_r_s1_agent:rp_startofpacket -> agent_pipeline_035:in_startofpacket
	wire          boton_r_s1_agent_rp_endofpacket;                                                // boton_r_s1_agent:rp_endofpacket -> agent_pipeline_035:in_endofpacket
	wire          agent_pipeline_035_source0_valid;                                               // agent_pipeline_035:out_valid -> router_020:sink_valid
	wire  [116:0] agent_pipeline_035_source0_data;                                                // agent_pipeline_035:out_data -> router_020:sink_data
	wire          agent_pipeline_035_source0_ready;                                               // router_020:sink_ready -> agent_pipeline_035:out_ready
	wire          agent_pipeline_035_source0_startofpacket;                                       // agent_pipeline_035:out_startofpacket -> router_020:sink_startofpacket
	wire          agent_pipeline_035_source0_endofpacket;                                         // agent_pipeline_035:out_endofpacket -> router_020:sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                          // cmd_mux_018:src_valid -> agent_pipeline_036:in_valid
	wire  [116:0] cmd_mux_018_src_data;                                                           // cmd_mux_018:src_data -> agent_pipeline_036:in_data
	wire          cmd_mux_018_src_ready;                                                          // agent_pipeline_036:in_ready -> cmd_mux_018:src_ready
	wire   [26:0] cmd_mux_018_src_channel;                                                        // cmd_mux_018:src_channel -> agent_pipeline_036:in_channel
	wire          cmd_mux_018_src_startofpacket;                                                  // cmd_mux_018:src_startofpacket -> agent_pipeline_036:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                    // cmd_mux_018:src_endofpacket -> agent_pipeline_036:in_endofpacket
	wire          agent_pipeline_036_source0_valid;                                               // agent_pipeline_036:out_valid -> boton_up_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_036_source0_data;                                                // agent_pipeline_036:out_data -> boton_up_s1_agent:cp_data
	wire          agent_pipeline_036_source0_ready;                                               // boton_up_s1_agent:cp_ready -> agent_pipeline_036:out_ready
	wire   [26:0] agent_pipeline_036_source0_channel;                                             // agent_pipeline_036:out_channel -> boton_up_s1_agent:cp_channel
	wire          agent_pipeline_036_source0_startofpacket;                                       // agent_pipeline_036:out_startofpacket -> boton_up_s1_agent:cp_startofpacket
	wire          agent_pipeline_036_source0_endofpacket;                                         // agent_pipeline_036:out_endofpacket -> boton_up_s1_agent:cp_endofpacket
	wire          boton_up_s1_agent_rp_valid;                                                     // boton_up_s1_agent:rp_valid -> agent_pipeline_037:in_valid
	wire  [116:0] boton_up_s1_agent_rp_data;                                                      // boton_up_s1_agent:rp_data -> agent_pipeline_037:in_data
	wire          boton_up_s1_agent_rp_ready;                                                     // agent_pipeline_037:in_ready -> boton_up_s1_agent:rp_ready
	wire          boton_up_s1_agent_rp_startofpacket;                                             // boton_up_s1_agent:rp_startofpacket -> agent_pipeline_037:in_startofpacket
	wire          boton_up_s1_agent_rp_endofpacket;                                               // boton_up_s1_agent:rp_endofpacket -> agent_pipeline_037:in_endofpacket
	wire          agent_pipeline_037_source0_valid;                                               // agent_pipeline_037:out_valid -> router_021:sink_valid
	wire  [116:0] agent_pipeline_037_source0_data;                                                // agent_pipeline_037:out_data -> router_021:sink_data
	wire          agent_pipeline_037_source0_ready;                                               // router_021:sink_ready -> agent_pipeline_037:out_ready
	wire          agent_pipeline_037_source0_startofpacket;                                       // agent_pipeline_037:out_startofpacket -> router_021:sink_startofpacket
	wire          agent_pipeline_037_source0_endofpacket;                                         // agent_pipeline_037:out_endofpacket -> router_021:sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                          // cmd_mux_019:src_valid -> agent_pipeline_038:in_valid
	wire  [116:0] cmd_mux_019_src_data;                                                           // cmd_mux_019:src_data -> agent_pipeline_038:in_data
	wire          cmd_mux_019_src_ready;                                                          // agent_pipeline_038:in_ready -> cmd_mux_019:src_ready
	wire   [26:0] cmd_mux_019_src_channel;                                                        // cmd_mux_019:src_channel -> agent_pipeline_038:in_channel
	wire          cmd_mux_019_src_startofpacket;                                                  // cmd_mux_019:src_startofpacket -> agent_pipeline_038:in_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                    // cmd_mux_019:src_endofpacket -> agent_pipeline_038:in_endofpacket
	wire          agent_pipeline_038_source0_valid;                                               // agent_pipeline_038:out_valid -> boton_down_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_038_source0_data;                                                // agent_pipeline_038:out_data -> boton_down_s1_agent:cp_data
	wire          agent_pipeline_038_source0_ready;                                               // boton_down_s1_agent:cp_ready -> agent_pipeline_038:out_ready
	wire   [26:0] agent_pipeline_038_source0_channel;                                             // agent_pipeline_038:out_channel -> boton_down_s1_agent:cp_channel
	wire          agent_pipeline_038_source0_startofpacket;                                       // agent_pipeline_038:out_startofpacket -> boton_down_s1_agent:cp_startofpacket
	wire          agent_pipeline_038_source0_endofpacket;                                         // agent_pipeline_038:out_endofpacket -> boton_down_s1_agent:cp_endofpacket
	wire          boton_down_s1_agent_rp_valid;                                                   // boton_down_s1_agent:rp_valid -> agent_pipeline_039:in_valid
	wire  [116:0] boton_down_s1_agent_rp_data;                                                    // boton_down_s1_agent:rp_data -> agent_pipeline_039:in_data
	wire          boton_down_s1_agent_rp_ready;                                                   // agent_pipeline_039:in_ready -> boton_down_s1_agent:rp_ready
	wire          boton_down_s1_agent_rp_startofpacket;                                           // boton_down_s1_agent:rp_startofpacket -> agent_pipeline_039:in_startofpacket
	wire          boton_down_s1_agent_rp_endofpacket;                                             // boton_down_s1_agent:rp_endofpacket -> agent_pipeline_039:in_endofpacket
	wire          agent_pipeline_039_source0_valid;                                               // agent_pipeline_039:out_valid -> router_022:sink_valid
	wire  [116:0] agent_pipeline_039_source0_data;                                                // agent_pipeline_039:out_data -> router_022:sink_data
	wire          agent_pipeline_039_source0_ready;                                               // router_022:sink_ready -> agent_pipeline_039:out_ready
	wire          agent_pipeline_039_source0_startofpacket;                                       // agent_pipeline_039:out_startofpacket -> router_022:sink_startofpacket
	wire          agent_pipeline_039_source0_endofpacket;                                         // agent_pipeline_039:out_endofpacket -> router_022:sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                          // cmd_mux_020:src_valid -> agent_pipeline_040:in_valid
	wire  [116:0] cmd_mux_020_src_data;                                                           // cmd_mux_020:src_data -> agent_pipeline_040:in_data
	wire          cmd_mux_020_src_ready;                                                          // agent_pipeline_040:in_ready -> cmd_mux_020:src_ready
	wire   [26:0] cmd_mux_020_src_channel;                                                        // cmd_mux_020:src_channel -> agent_pipeline_040:in_channel
	wire          cmd_mux_020_src_startofpacket;                                                  // cmd_mux_020:src_startofpacket -> agent_pipeline_040:in_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                    // cmd_mux_020:src_endofpacket -> agent_pipeline_040:in_endofpacket
	wire          agent_pipeline_040_source0_valid;                                               // agent_pipeline_040:out_valid -> boton_left_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_040_source0_data;                                                // agent_pipeline_040:out_data -> boton_left_s1_agent:cp_data
	wire          agent_pipeline_040_source0_ready;                                               // boton_left_s1_agent:cp_ready -> agent_pipeline_040:out_ready
	wire   [26:0] agent_pipeline_040_source0_channel;                                             // agent_pipeline_040:out_channel -> boton_left_s1_agent:cp_channel
	wire          agent_pipeline_040_source0_startofpacket;                                       // agent_pipeline_040:out_startofpacket -> boton_left_s1_agent:cp_startofpacket
	wire          agent_pipeline_040_source0_endofpacket;                                         // agent_pipeline_040:out_endofpacket -> boton_left_s1_agent:cp_endofpacket
	wire          boton_left_s1_agent_rp_valid;                                                   // boton_left_s1_agent:rp_valid -> agent_pipeline_041:in_valid
	wire  [116:0] boton_left_s1_agent_rp_data;                                                    // boton_left_s1_agent:rp_data -> agent_pipeline_041:in_data
	wire          boton_left_s1_agent_rp_ready;                                                   // agent_pipeline_041:in_ready -> boton_left_s1_agent:rp_ready
	wire          boton_left_s1_agent_rp_startofpacket;                                           // boton_left_s1_agent:rp_startofpacket -> agent_pipeline_041:in_startofpacket
	wire          boton_left_s1_agent_rp_endofpacket;                                             // boton_left_s1_agent:rp_endofpacket -> agent_pipeline_041:in_endofpacket
	wire          agent_pipeline_041_source0_valid;                                               // agent_pipeline_041:out_valid -> router_023:sink_valid
	wire  [116:0] agent_pipeline_041_source0_data;                                                // agent_pipeline_041:out_data -> router_023:sink_data
	wire          agent_pipeline_041_source0_ready;                                               // router_023:sink_ready -> agent_pipeline_041:out_ready
	wire          agent_pipeline_041_source0_startofpacket;                                       // agent_pipeline_041:out_startofpacket -> router_023:sink_startofpacket
	wire          agent_pipeline_041_source0_endofpacket;                                         // agent_pipeline_041:out_endofpacket -> router_023:sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                          // cmd_mux_021:src_valid -> agent_pipeline_042:in_valid
	wire  [116:0] cmd_mux_021_src_data;                                                           // cmd_mux_021:src_data -> agent_pipeline_042:in_data
	wire          cmd_mux_021_src_ready;                                                          // agent_pipeline_042:in_ready -> cmd_mux_021:src_ready
	wire   [26:0] cmd_mux_021_src_channel;                                                        // cmd_mux_021:src_channel -> agent_pipeline_042:in_channel
	wire          cmd_mux_021_src_startofpacket;                                                  // cmd_mux_021:src_startofpacket -> agent_pipeline_042:in_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                    // cmd_mux_021:src_endofpacket -> agent_pipeline_042:in_endofpacket
	wire          agent_pipeline_042_source0_valid;                                               // agent_pipeline_042:out_valid -> boton_right_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_042_source0_data;                                                // agent_pipeline_042:out_data -> boton_right_s1_agent:cp_data
	wire          agent_pipeline_042_source0_ready;                                               // boton_right_s1_agent:cp_ready -> agent_pipeline_042:out_ready
	wire   [26:0] agent_pipeline_042_source0_channel;                                             // agent_pipeline_042:out_channel -> boton_right_s1_agent:cp_channel
	wire          agent_pipeline_042_source0_startofpacket;                                       // agent_pipeline_042:out_startofpacket -> boton_right_s1_agent:cp_startofpacket
	wire          agent_pipeline_042_source0_endofpacket;                                         // agent_pipeline_042:out_endofpacket -> boton_right_s1_agent:cp_endofpacket
	wire          boton_right_s1_agent_rp_valid;                                                  // boton_right_s1_agent:rp_valid -> agent_pipeline_043:in_valid
	wire  [116:0] boton_right_s1_agent_rp_data;                                                   // boton_right_s1_agent:rp_data -> agent_pipeline_043:in_data
	wire          boton_right_s1_agent_rp_ready;                                                  // agent_pipeline_043:in_ready -> boton_right_s1_agent:rp_ready
	wire          boton_right_s1_agent_rp_startofpacket;                                          // boton_right_s1_agent:rp_startofpacket -> agent_pipeline_043:in_startofpacket
	wire          boton_right_s1_agent_rp_endofpacket;                                            // boton_right_s1_agent:rp_endofpacket -> agent_pipeline_043:in_endofpacket
	wire          agent_pipeline_043_source0_valid;                                               // agent_pipeline_043:out_valid -> router_024:sink_valid
	wire  [116:0] agent_pipeline_043_source0_data;                                                // agent_pipeline_043:out_data -> router_024:sink_data
	wire          agent_pipeline_043_source0_ready;                                               // router_024:sink_ready -> agent_pipeline_043:out_ready
	wire          agent_pipeline_043_source0_startofpacket;                                       // agent_pipeline_043:out_startofpacket -> router_024:sink_startofpacket
	wire          agent_pipeline_043_source0_endofpacket;                                         // agent_pipeline_043:out_endofpacket -> router_024:sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                          // cmd_mux_022:src_valid -> agent_pipeline_044:in_valid
	wire  [116:0] cmd_mux_022_src_data;                                                           // cmd_mux_022:src_data -> agent_pipeline_044:in_data
	wire          cmd_mux_022_src_ready;                                                          // agent_pipeline_044:in_ready -> cmd_mux_022:src_ready
	wire   [26:0] cmd_mux_022_src_channel;                                                        // cmd_mux_022:src_channel -> agent_pipeline_044:in_channel
	wire          cmd_mux_022_src_startofpacket;                                                  // cmd_mux_022:src_startofpacket -> agent_pipeline_044:in_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                    // cmd_mux_022:src_endofpacket -> agent_pipeline_044:in_endofpacket
	wire          agent_pipeline_044_source0_valid;                                               // agent_pipeline_044:out_valid -> analog1_x_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_044_source0_data;                                                // agent_pipeline_044:out_data -> analog1_x_s1_agent:cp_data
	wire          agent_pipeline_044_source0_ready;                                               // analog1_x_s1_agent:cp_ready -> agent_pipeline_044:out_ready
	wire   [26:0] agent_pipeline_044_source0_channel;                                             // agent_pipeline_044:out_channel -> analog1_x_s1_agent:cp_channel
	wire          agent_pipeline_044_source0_startofpacket;                                       // agent_pipeline_044:out_startofpacket -> analog1_x_s1_agent:cp_startofpacket
	wire          agent_pipeline_044_source0_endofpacket;                                         // agent_pipeline_044:out_endofpacket -> analog1_x_s1_agent:cp_endofpacket
	wire          analog1_x_s1_agent_rp_valid;                                                    // analog1_x_s1_agent:rp_valid -> agent_pipeline_045:in_valid
	wire  [116:0] analog1_x_s1_agent_rp_data;                                                     // analog1_x_s1_agent:rp_data -> agent_pipeline_045:in_data
	wire          analog1_x_s1_agent_rp_ready;                                                    // agent_pipeline_045:in_ready -> analog1_x_s1_agent:rp_ready
	wire          analog1_x_s1_agent_rp_startofpacket;                                            // analog1_x_s1_agent:rp_startofpacket -> agent_pipeline_045:in_startofpacket
	wire          analog1_x_s1_agent_rp_endofpacket;                                              // analog1_x_s1_agent:rp_endofpacket -> agent_pipeline_045:in_endofpacket
	wire          agent_pipeline_045_source0_valid;                                               // agent_pipeline_045:out_valid -> router_025:sink_valid
	wire  [116:0] agent_pipeline_045_source0_data;                                                // agent_pipeline_045:out_data -> router_025:sink_data
	wire          agent_pipeline_045_source0_ready;                                               // router_025:sink_ready -> agent_pipeline_045:out_ready
	wire          agent_pipeline_045_source0_startofpacket;                                       // agent_pipeline_045:out_startofpacket -> router_025:sink_startofpacket
	wire          agent_pipeline_045_source0_endofpacket;                                         // agent_pipeline_045:out_endofpacket -> router_025:sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                          // cmd_mux_023:src_valid -> agent_pipeline_046:in_valid
	wire  [116:0] cmd_mux_023_src_data;                                                           // cmd_mux_023:src_data -> agent_pipeline_046:in_data
	wire          cmd_mux_023_src_ready;                                                          // agent_pipeline_046:in_ready -> cmd_mux_023:src_ready
	wire   [26:0] cmd_mux_023_src_channel;                                                        // cmd_mux_023:src_channel -> agent_pipeline_046:in_channel
	wire          cmd_mux_023_src_startofpacket;                                                  // cmd_mux_023:src_startofpacket -> agent_pipeline_046:in_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                    // cmd_mux_023:src_endofpacket -> agent_pipeline_046:in_endofpacket
	wire          agent_pipeline_046_source0_valid;                                               // agent_pipeline_046:out_valid -> analog1_y_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_046_source0_data;                                                // agent_pipeline_046:out_data -> analog1_y_s1_agent:cp_data
	wire          agent_pipeline_046_source0_ready;                                               // analog1_y_s1_agent:cp_ready -> agent_pipeline_046:out_ready
	wire   [26:0] agent_pipeline_046_source0_channel;                                             // agent_pipeline_046:out_channel -> analog1_y_s1_agent:cp_channel
	wire          agent_pipeline_046_source0_startofpacket;                                       // agent_pipeline_046:out_startofpacket -> analog1_y_s1_agent:cp_startofpacket
	wire          agent_pipeline_046_source0_endofpacket;                                         // agent_pipeline_046:out_endofpacket -> analog1_y_s1_agent:cp_endofpacket
	wire          analog1_y_s1_agent_rp_valid;                                                    // analog1_y_s1_agent:rp_valid -> agent_pipeline_047:in_valid
	wire  [116:0] analog1_y_s1_agent_rp_data;                                                     // analog1_y_s1_agent:rp_data -> agent_pipeline_047:in_data
	wire          analog1_y_s1_agent_rp_ready;                                                    // agent_pipeline_047:in_ready -> analog1_y_s1_agent:rp_ready
	wire          analog1_y_s1_agent_rp_startofpacket;                                            // analog1_y_s1_agent:rp_startofpacket -> agent_pipeline_047:in_startofpacket
	wire          analog1_y_s1_agent_rp_endofpacket;                                              // analog1_y_s1_agent:rp_endofpacket -> agent_pipeline_047:in_endofpacket
	wire          agent_pipeline_047_source0_valid;                                               // agent_pipeline_047:out_valid -> router_026:sink_valid
	wire  [116:0] agent_pipeline_047_source0_data;                                                // agent_pipeline_047:out_data -> router_026:sink_data
	wire          agent_pipeline_047_source0_ready;                                               // router_026:sink_ready -> agent_pipeline_047:out_ready
	wire          agent_pipeline_047_source0_startofpacket;                                       // agent_pipeline_047:out_startofpacket -> router_026:sink_startofpacket
	wire          agent_pipeline_047_source0_endofpacket;                                         // agent_pipeline_047:out_endofpacket -> router_026:sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                          // cmd_mux_024:src_valid -> agent_pipeline_048:in_valid
	wire  [116:0] cmd_mux_024_src_data;                                                           // cmd_mux_024:src_data -> agent_pipeline_048:in_data
	wire          cmd_mux_024_src_ready;                                                          // agent_pipeline_048:in_ready -> cmd_mux_024:src_ready
	wire   [26:0] cmd_mux_024_src_channel;                                                        // cmd_mux_024:src_channel -> agent_pipeline_048:in_channel
	wire          cmd_mux_024_src_startofpacket;                                                  // cmd_mux_024:src_startofpacket -> agent_pipeline_048:in_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                    // cmd_mux_024:src_endofpacket -> agent_pipeline_048:in_endofpacket
	wire          agent_pipeline_048_source0_valid;                                               // agent_pipeline_048:out_valid -> analog2_x_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_048_source0_data;                                                // agent_pipeline_048:out_data -> analog2_x_s1_agent:cp_data
	wire          agent_pipeline_048_source0_ready;                                               // analog2_x_s1_agent:cp_ready -> agent_pipeline_048:out_ready
	wire   [26:0] agent_pipeline_048_source0_channel;                                             // agent_pipeline_048:out_channel -> analog2_x_s1_agent:cp_channel
	wire          agent_pipeline_048_source0_startofpacket;                                       // agent_pipeline_048:out_startofpacket -> analog2_x_s1_agent:cp_startofpacket
	wire          agent_pipeline_048_source0_endofpacket;                                         // agent_pipeline_048:out_endofpacket -> analog2_x_s1_agent:cp_endofpacket
	wire          analog2_x_s1_agent_rp_valid;                                                    // analog2_x_s1_agent:rp_valid -> agent_pipeline_049:in_valid
	wire  [116:0] analog2_x_s1_agent_rp_data;                                                     // analog2_x_s1_agent:rp_data -> agent_pipeline_049:in_data
	wire          analog2_x_s1_agent_rp_ready;                                                    // agent_pipeline_049:in_ready -> analog2_x_s1_agent:rp_ready
	wire          analog2_x_s1_agent_rp_startofpacket;                                            // analog2_x_s1_agent:rp_startofpacket -> agent_pipeline_049:in_startofpacket
	wire          analog2_x_s1_agent_rp_endofpacket;                                              // analog2_x_s1_agent:rp_endofpacket -> agent_pipeline_049:in_endofpacket
	wire          agent_pipeline_049_source0_valid;                                               // agent_pipeline_049:out_valid -> router_027:sink_valid
	wire  [116:0] agent_pipeline_049_source0_data;                                                // agent_pipeline_049:out_data -> router_027:sink_data
	wire          agent_pipeline_049_source0_ready;                                               // router_027:sink_ready -> agent_pipeline_049:out_ready
	wire          agent_pipeline_049_source0_startofpacket;                                       // agent_pipeline_049:out_startofpacket -> router_027:sink_startofpacket
	wire          agent_pipeline_049_source0_endofpacket;                                         // agent_pipeline_049:out_endofpacket -> router_027:sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                          // cmd_mux_025:src_valid -> agent_pipeline_050:in_valid
	wire  [116:0] cmd_mux_025_src_data;                                                           // cmd_mux_025:src_data -> agent_pipeline_050:in_data
	wire          cmd_mux_025_src_ready;                                                          // agent_pipeline_050:in_ready -> cmd_mux_025:src_ready
	wire   [26:0] cmd_mux_025_src_channel;                                                        // cmd_mux_025:src_channel -> agent_pipeline_050:in_channel
	wire          cmd_mux_025_src_startofpacket;                                                  // cmd_mux_025:src_startofpacket -> agent_pipeline_050:in_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                    // cmd_mux_025:src_endofpacket -> agent_pipeline_050:in_endofpacket
	wire          agent_pipeline_050_source0_valid;                                               // agent_pipeline_050:out_valid -> analog2_y_s1_agent:cp_valid
	wire  [116:0] agent_pipeline_050_source0_data;                                                // agent_pipeline_050:out_data -> analog2_y_s1_agent:cp_data
	wire          agent_pipeline_050_source0_ready;                                               // analog2_y_s1_agent:cp_ready -> agent_pipeline_050:out_ready
	wire   [26:0] agent_pipeline_050_source0_channel;                                             // agent_pipeline_050:out_channel -> analog2_y_s1_agent:cp_channel
	wire          agent_pipeline_050_source0_startofpacket;                                       // agent_pipeline_050:out_startofpacket -> analog2_y_s1_agent:cp_startofpacket
	wire          agent_pipeline_050_source0_endofpacket;                                         // agent_pipeline_050:out_endofpacket -> analog2_y_s1_agent:cp_endofpacket
	wire          analog2_y_s1_agent_rp_valid;                                                    // analog2_y_s1_agent:rp_valid -> agent_pipeline_051:in_valid
	wire  [116:0] analog2_y_s1_agent_rp_data;                                                     // analog2_y_s1_agent:rp_data -> agent_pipeline_051:in_data
	wire          analog2_y_s1_agent_rp_ready;                                                    // agent_pipeline_051:in_ready -> analog2_y_s1_agent:rp_ready
	wire          analog2_y_s1_agent_rp_startofpacket;                                            // analog2_y_s1_agent:rp_startofpacket -> agent_pipeline_051:in_startofpacket
	wire          analog2_y_s1_agent_rp_endofpacket;                                              // analog2_y_s1_agent:rp_endofpacket -> agent_pipeline_051:in_endofpacket
	wire          agent_pipeline_051_source0_valid;                                               // agent_pipeline_051:out_valid -> router_028:sink_valid
	wire  [116:0] agent_pipeline_051_source0_data;                                                // agent_pipeline_051:out_data -> router_028:sink_data
	wire          agent_pipeline_051_source0_ready;                                               // router_028:sink_ready -> agent_pipeline_051:out_ready
	wire          agent_pipeline_051_source0_startofpacket;                                       // agent_pipeline_051:out_startofpacket -> router_028:sink_startofpacket
	wire          agent_pipeline_051_source0_endofpacket;                                         // agent_pipeline_051:out_endofpacket -> router_028:sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                          // cmd_mux_026:src_valid -> agent_pipeline_052:in_valid
	wire  [116:0] cmd_mux_026_src_data;                                                           // cmd_mux_026:src_data -> agent_pipeline_052:in_data
	wire          cmd_mux_026_src_ready;                                                          // agent_pipeline_052:in_ready -> cmd_mux_026:src_ready
	wire   [26:0] cmd_mux_026_src_channel;                                                        // cmd_mux_026:src_channel -> agent_pipeline_052:in_channel
	wire          cmd_mux_026_src_startofpacket;                                                  // cmd_mux_026:src_startofpacket -> agent_pipeline_052:in_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                    // cmd_mux_026:src_endofpacket -> agent_pipeline_052:in_endofpacket
	wire          agent_pipeline_052_source0_valid;                                               // agent_pipeline_052:out_valid -> touch_panel_spi_spi_control_port_agent:cp_valid
	wire  [116:0] agent_pipeline_052_source0_data;                                                // agent_pipeline_052:out_data -> touch_panel_spi_spi_control_port_agent:cp_data
	wire          agent_pipeline_052_source0_ready;                                               // touch_panel_spi_spi_control_port_agent:cp_ready -> agent_pipeline_052:out_ready
	wire   [26:0] agent_pipeline_052_source0_channel;                                             // agent_pipeline_052:out_channel -> touch_panel_spi_spi_control_port_agent:cp_channel
	wire          agent_pipeline_052_source0_startofpacket;                                       // agent_pipeline_052:out_startofpacket -> touch_panel_spi_spi_control_port_agent:cp_startofpacket
	wire          agent_pipeline_052_source0_endofpacket;                                         // agent_pipeline_052:out_endofpacket -> touch_panel_spi_spi_control_port_agent:cp_endofpacket
	wire          touch_panel_spi_spi_control_port_agent_rp_valid;                                // touch_panel_spi_spi_control_port_agent:rp_valid -> agent_pipeline_053:in_valid
	wire  [116:0] touch_panel_spi_spi_control_port_agent_rp_data;                                 // touch_panel_spi_spi_control_port_agent:rp_data -> agent_pipeline_053:in_data
	wire          touch_panel_spi_spi_control_port_agent_rp_ready;                                // agent_pipeline_053:in_ready -> touch_panel_spi_spi_control_port_agent:rp_ready
	wire          touch_panel_spi_spi_control_port_agent_rp_startofpacket;                        // touch_panel_spi_spi_control_port_agent:rp_startofpacket -> agent_pipeline_053:in_startofpacket
	wire          touch_panel_spi_spi_control_port_agent_rp_endofpacket;                          // touch_panel_spi_spi_control_port_agent:rp_endofpacket -> agent_pipeline_053:in_endofpacket
	wire          agent_pipeline_053_source0_valid;                                               // agent_pipeline_053:out_valid -> router_029:sink_valid
	wire  [116:0] agent_pipeline_053_source0_data;                                                // agent_pipeline_053:out_data -> router_029:sink_data
	wire          agent_pipeline_053_source0_ready;                                               // router_029:sink_ready -> agent_pipeline_053:out_ready
	wire          agent_pipeline_053_source0_startofpacket;                                       // agent_pipeline_053:out_startofpacket -> router_029:sink_startofpacket
	wire          agent_pipeline_053_source0_endofpacket;                                         // agent_pipeline_053:out_endofpacket -> router_029:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [116:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                           // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire   [26:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                     // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [116:0] mux_pipeline_source0_data;                                                      // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                     // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [26:0] mux_pipeline_source0_channel;                                                   // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                             // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                               // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [116:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                       // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire   [26:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                                 // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [116:0] mux_pipeline_001_source0_data;                                                  // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                                 // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire   [26:0] mux_pipeline_001_source0_channel;                                               // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                         // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                           // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                       // cmd_demux_002:src0_valid -> mux_pipeline_002:in_valid
	wire  [116:0] cmd_demux_002_src0_data;                                                        // cmd_demux_002:src0_data -> mux_pipeline_002:in_data
	wire          cmd_demux_002_src0_ready;                                                       // mux_pipeline_002:in_ready -> cmd_demux_002:src0_ready
	wire   [26:0] cmd_demux_002_src0_channel;                                                     // cmd_demux_002:src0_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                               // cmd_demux_002:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                 // cmd_demux_002:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                                 // mux_pipeline_002:out_valid -> cmd_mux:sink2_valid
	wire  [116:0] mux_pipeline_002_source0_data;                                                  // mux_pipeline_002:out_data -> cmd_mux:sink2_data
	wire          mux_pipeline_002_source0_ready;                                                 // cmd_mux:sink2_ready -> mux_pipeline_002:out_ready
	wire   [26:0] mux_pipeline_002_source0_channel;                                               // mux_pipeline_002:out_channel -> cmd_mux:sink2_channel
	wire          mux_pipeline_002_source0_startofpacket;                                         // mux_pipeline_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                           // mux_pipeline_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_001_src1_valid;                                                       // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [116:0] cmd_demux_001_src1_data;                                                        // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                                       // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire   [26:0] cmd_demux_001_src1_channel;                                                     // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                               // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                 // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                                 // mux_pipeline_003:out_valid -> cmd_mux_001:sink0_valid
	wire  [116:0] mux_pipeline_003_source0_data;                                                  // mux_pipeline_003:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                                 // cmd_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire   [26:0] mux_pipeline_003_source0_channel;                                               // mux_pipeline_003:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                         // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                           // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                       // cmd_demux_002:src1_valid -> mux_pipeline_004:in_valid
	wire  [116:0] cmd_demux_002_src1_data;                                                        // cmd_demux_002:src1_data -> mux_pipeline_004:in_data
	wire          cmd_demux_002_src1_ready;                                                       // mux_pipeline_004:in_ready -> cmd_demux_002:src1_ready
	wire   [26:0] cmd_demux_002_src1_channel;                                                     // cmd_demux_002:src1_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                               // cmd_demux_002:src1_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                 // cmd_demux_002:src1_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                                 // mux_pipeline_004:out_valid -> cmd_mux_001:sink1_valid
	wire  [116:0] mux_pipeline_004_source0_data;                                                  // mux_pipeline_004:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_004_source0_ready;                                                 // cmd_mux_001:sink1_ready -> mux_pipeline_004:out_ready
	wire   [26:0] mux_pipeline_004_source0_channel;                                               // mux_pipeline_004:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_004_source0_startofpacket;                                         // mux_pipeline_004:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                           // mux_pipeline_004:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                       // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [116:0] cmd_demux_001_src2_data;                                                        // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                                       // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire   [26:0] cmd_demux_001_src2_channel;                                                     // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                               // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                 // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                                 // mux_pipeline_005:out_valid -> cmd_mux_002:sink0_valid
	wire  [116:0] mux_pipeline_005_source0_data;                                                  // mux_pipeline_005:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_005_source0_ready;                                                 // cmd_mux_002:sink0_ready -> mux_pipeline_005:out_ready
	wire   [26:0] mux_pipeline_005_source0_channel;                                               // mux_pipeline_005:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                         // mux_pipeline_005:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                           // mux_pipeline_005:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                       // cmd_demux_002:src2_valid -> mux_pipeline_006:in_valid
	wire  [116:0] cmd_demux_002_src2_data;                                                        // cmd_demux_002:src2_data -> mux_pipeline_006:in_data
	wire          cmd_demux_002_src2_ready;                                                       // mux_pipeline_006:in_ready -> cmd_demux_002:src2_ready
	wire   [26:0] cmd_demux_002_src2_channel;                                                     // cmd_demux_002:src2_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                               // cmd_demux_002:src2_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                 // cmd_demux_002:src2_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                                 // mux_pipeline_006:out_valid -> cmd_mux_002:sink1_valid
	wire  [116:0] mux_pipeline_006_source0_data;                                                  // mux_pipeline_006:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_006_source0_ready;                                                 // cmd_mux_002:sink1_ready -> mux_pipeline_006:out_ready
	wire   [26:0] mux_pipeline_006_source0_channel;                                               // mux_pipeline_006:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_006_source0_startofpacket;                                         // mux_pipeline_006:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                           // mux_pipeline_006:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                       // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire  [116:0] cmd_demux_001_src3_data;                                                        // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                                       // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire   [26:0] cmd_demux_001_src3_channel;                                                     // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                               // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                 // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                                 // mux_pipeline_007:out_valid -> cmd_mux_003:sink0_valid
	wire  [116:0] mux_pipeline_007_source0_data;                                                  // mux_pipeline_007:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_007_source0_ready;                                                 // cmd_mux_003:sink0_ready -> mux_pipeline_007:out_ready
	wire   [26:0] mux_pipeline_007_source0_channel;                                               // mux_pipeline_007:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                         // mux_pipeline_007:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                           // mux_pipeline_007:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                       // cmd_demux_001:src4_valid -> mux_pipeline_008:in_valid
	wire  [116:0] cmd_demux_001_src4_data;                                                        // cmd_demux_001:src4_data -> mux_pipeline_008:in_data
	wire          cmd_demux_001_src4_ready;                                                       // mux_pipeline_008:in_ready -> cmd_demux_001:src4_ready
	wire   [26:0] cmd_demux_001_src4_channel;                                                     // cmd_demux_001:src4_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                               // cmd_demux_001:src4_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                 // cmd_demux_001:src4_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                                 // mux_pipeline_008:out_valid -> cmd_mux_004:sink0_valid
	wire  [116:0] mux_pipeline_008_source0_data;                                                  // mux_pipeline_008:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_008_source0_ready;                                                 // cmd_mux_004:sink0_ready -> mux_pipeline_008:out_ready
	wire   [26:0] mux_pipeline_008_source0_channel;                                               // mux_pipeline_008:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                         // mux_pipeline_008:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                           // mux_pipeline_008:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                       // cmd_demux_001:src5_valid -> mux_pipeline_009:in_valid
	wire  [116:0] cmd_demux_001_src5_data;                                                        // cmd_demux_001:src5_data -> mux_pipeline_009:in_data
	wire          cmd_demux_001_src5_ready;                                                       // mux_pipeline_009:in_ready -> cmd_demux_001:src5_ready
	wire   [26:0] cmd_demux_001_src5_channel;                                                     // cmd_demux_001:src5_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                               // cmd_demux_001:src5_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                 // cmd_demux_001:src5_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                                 // mux_pipeline_009:out_valid -> cmd_mux_005:sink0_valid
	wire  [116:0] mux_pipeline_009_source0_data;                                                  // mux_pipeline_009:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_009_source0_ready;                                                 // cmd_mux_005:sink0_ready -> mux_pipeline_009:out_ready
	wire   [26:0] mux_pipeline_009_source0_channel;                                               // mux_pipeline_009:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                         // mux_pipeline_009:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                           // mux_pipeline_009:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                       // cmd_demux_001:src6_valid -> mux_pipeline_010:in_valid
	wire  [116:0] cmd_demux_001_src6_data;                                                        // cmd_demux_001:src6_data -> mux_pipeline_010:in_data
	wire          cmd_demux_001_src6_ready;                                                       // mux_pipeline_010:in_ready -> cmd_demux_001:src6_ready
	wire   [26:0] cmd_demux_001_src6_channel;                                                     // cmd_demux_001:src6_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                               // cmd_demux_001:src6_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                 // cmd_demux_001:src6_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                                 // mux_pipeline_010:out_valid -> cmd_mux_006:sink0_valid
	wire  [116:0] mux_pipeline_010_source0_data;                                                  // mux_pipeline_010:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_010_source0_ready;                                                 // cmd_mux_006:sink0_ready -> mux_pipeline_010:out_ready
	wire   [26:0] mux_pipeline_010_source0_channel;                                               // mux_pipeline_010:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                         // mux_pipeline_010:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                           // mux_pipeline_010:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                       // cmd_demux_001:src7_valid -> mux_pipeline_011:in_valid
	wire  [116:0] cmd_demux_001_src7_data;                                                        // cmd_demux_001:src7_data -> mux_pipeline_011:in_data
	wire          cmd_demux_001_src7_ready;                                                       // mux_pipeline_011:in_ready -> cmd_demux_001:src7_ready
	wire   [26:0] cmd_demux_001_src7_channel;                                                     // cmd_demux_001:src7_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_001_src7_startofpacket;                                               // cmd_demux_001:src7_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                 // cmd_demux_001:src7_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                                 // mux_pipeline_011:out_valid -> cmd_mux_007:sink0_valid
	wire  [116:0] mux_pipeline_011_source0_data;                                                  // mux_pipeline_011:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_011_source0_ready;                                                 // cmd_mux_007:sink0_ready -> mux_pipeline_011:out_ready
	wire   [26:0] mux_pipeline_011_source0_channel;                                               // mux_pipeline_011:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_011_source0_startofpacket;                                         // mux_pipeline_011:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                           // mux_pipeline_011:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                       // cmd_demux_001:src8_valid -> mux_pipeline_012:in_valid
	wire  [116:0] cmd_demux_001_src8_data;                                                        // cmd_demux_001:src8_data -> mux_pipeline_012:in_data
	wire          cmd_demux_001_src8_ready;                                                       // mux_pipeline_012:in_ready -> cmd_demux_001:src8_ready
	wire   [26:0] cmd_demux_001_src8_channel;                                                     // cmd_demux_001:src8_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_001_src8_startofpacket;                                               // cmd_demux_001:src8_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                 // cmd_demux_001:src8_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                                 // mux_pipeline_012:out_valid -> cmd_mux_008:sink0_valid
	wire  [116:0] mux_pipeline_012_source0_data;                                                  // mux_pipeline_012:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_012_source0_ready;                                                 // cmd_mux_008:sink0_ready -> mux_pipeline_012:out_ready
	wire   [26:0] mux_pipeline_012_source0_channel;                                               // mux_pipeline_012:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                                         // mux_pipeline_012:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                           // mux_pipeline_012:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                       // cmd_demux_001:src9_valid -> mux_pipeline_013:in_valid
	wire  [116:0] cmd_demux_001_src9_data;                                                        // cmd_demux_001:src9_data -> mux_pipeline_013:in_data
	wire          cmd_demux_001_src9_ready;                                                       // mux_pipeline_013:in_ready -> cmd_demux_001:src9_ready
	wire   [26:0] cmd_demux_001_src9_channel;                                                     // cmd_demux_001:src9_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_001_src9_startofpacket;                                               // cmd_demux_001:src9_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                 // cmd_demux_001:src9_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                                 // mux_pipeline_013:out_valid -> cmd_mux_009:sink0_valid
	wire  [116:0] mux_pipeline_013_source0_data;                                                  // mux_pipeline_013:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_013_source0_ready;                                                 // cmd_mux_009:sink0_ready -> mux_pipeline_013:out_ready
	wire   [26:0] mux_pipeline_013_source0_channel;                                               // mux_pipeline_013:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                         // mux_pipeline_013:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                           // mux_pipeline_013:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                      // cmd_demux_001:src10_valid -> mux_pipeline_014:in_valid
	wire  [116:0] cmd_demux_001_src10_data;                                                       // cmd_demux_001:src10_data -> mux_pipeline_014:in_data
	wire          cmd_demux_001_src10_ready;                                                      // mux_pipeline_014:in_ready -> cmd_demux_001:src10_ready
	wire   [26:0] cmd_demux_001_src10_channel;                                                    // cmd_demux_001:src10_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_001_src10_startofpacket;                                              // cmd_demux_001:src10_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                // cmd_demux_001:src10_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                                 // mux_pipeline_014:out_valid -> cmd_mux_010:sink0_valid
	wire  [116:0] mux_pipeline_014_source0_data;                                                  // mux_pipeline_014:out_data -> cmd_mux_010:sink0_data
	wire          mux_pipeline_014_source0_ready;                                                 // cmd_mux_010:sink0_ready -> mux_pipeline_014:out_ready
	wire   [26:0] mux_pipeline_014_source0_channel;                                               // mux_pipeline_014:out_channel -> cmd_mux_010:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                         // mux_pipeline_014:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                           // mux_pipeline_014:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                      // cmd_demux_001:src11_valid -> mux_pipeline_015:in_valid
	wire  [116:0] cmd_demux_001_src11_data;                                                       // cmd_demux_001:src11_data -> mux_pipeline_015:in_data
	wire          cmd_demux_001_src11_ready;                                                      // mux_pipeline_015:in_ready -> cmd_demux_001:src11_ready
	wire   [26:0] cmd_demux_001_src11_channel;                                                    // cmd_demux_001:src11_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_001_src11_startofpacket;                                              // cmd_demux_001:src11_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                // cmd_demux_001:src11_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                                 // mux_pipeline_015:out_valid -> cmd_mux_011:sink0_valid
	wire  [116:0] mux_pipeline_015_source0_data;                                                  // mux_pipeline_015:out_data -> cmd_mux_011:sink0_data
	wire          mux_pipeline_015_source0_ready;                                                 // cmd_mux_011:sink0_ready -> mux_pipeline_015:out_ready
	wire   [26:0] mux_pipeline_015_source0_channel;                                               // mux_pipeline_015:out_channel -> cmd_mux_011:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                         // mux_pipeline_015:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                           // mux_pipeline_015:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                      // cmd_demux_001:src12_valid -> mux_pipeline_016:in_valid
	wire  [116:0] cmd_demux_001_src12_data;                                                       // cmd_demux_001:src12_data -> mux_pipeline_016:in_data
	wire          cmd_demux_001_src12_ready;                                                      // mux_pipeline_016:in_ready -> cmd_demux_001:src12_ready
	wire   [26:0] cmd_demux_001_src12_channel;                                                    // cmd_demux_001:src12_channel -> mux_pipeline_016:in_channel
	wire          cmd_demux_001_src12_startofpacket;                                              // cmd_demux_001:src12_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                // cmd_demux_001:src12_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                                 // mux_pipeline_016:out_valid -> cmd_mux_012:sink0_valid
	wire  [116:0] mux_pipeline_016_source0_data;                                                  // mux_pipeline_016:out_data -> cmd_mux_012:sink0_data
	wire          mux_pipeline_016_source0_ready;                                                 // cmd_mux_012:sink0_ready -> mux_pipeline_016:out_ready
	wire   [26:0] mux_pipeline_016_source0_channel;                                               // mux_pipeline_016:out_channel -> cmd_mux_012:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                                         // mux_pipeline_016:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                           // mux_pipeline_016:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                      // cmd_demux_001:src13_valid -> mux_pipeline_017:in_valid
	wire  [116:0] cmd_demux_001_src13_data;                                                       // cmd_demux_001:src13_data -> mux_pipeline_017:in_data
	wire          cmd_demux_001_src13_ready;                                                      // mux_pipeline_017:in_ready -> cmd_demux_001:src13_ready
	wire   [26:0] cmd_demux_001_src13_channel;                                                    // cmd_demux_001:src13_channel -> mux_pipeline_017:in_channel
	wire          cmd_demux_001_src13_startofpacket;                                              // cmd_demux_001:src13_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                // cmd_demux_001:src13_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                                 // mux_pipeline_017:out_valid -> cmd_mux_013:sink0_valid
	wire  [116:0] mux_pipeline_017_source0_data;                                                  // mux_pipeline_017:out_data -> cmd_mux_013:sink0_data
	wire          mux_pipeline_017_source0_ready;                                                 // cmd_mux_013:sink0_ready -> mux_pipeline_017:out_ready
	wire   [26:0] mux_pipeline_017_source0_channel;                                               // mux_pipeline_017:out_channel -> cmd_mux_013:sink0_channel
	wire          mux_pipeline_017_source0_startofpacket;                                         // mux_pipeline_017:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                           // mux_pipeline_017:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                      // cmd_demux_001:src14_valid -> mux_pipeline_018:in_valid
	wire  [116:0] cmd_demux_001_src14_data;                                                       // cmd_demux_001:src14_data -> mux_pipeline_018:in_data
	wire          cmd_demux_001_src14_ready;                                                      // mux_pipeline_018:in_ready -> cmd_demux_001:src14_ready
	wire   [26:0] cmd_demux_001_src14_channel;                                                    // cmd_demux_001:src14_channel -> mux_pipeline_018:in_channel
	wire          cmd_demux_001_src14_startofpacket;                                              // cmd_demux_001:src14_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                // cmd_demux_001:src14_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                                 // mux_pipeline_018:out_valid -> cmd_mux_014:sink0_valid
	wire  [116:0] mux_pipeline_018_source0_data;                                                  // mux_pipeline_018:out_data -> cmd_mux_014:sink0_data
	wire          mux_pipeline_018_source0_ready;                                                 // cmd_mux_014:sink0_ready -> mux_pipeline_018:out_ready
	wire   [26:0] mux_pipeline_018_source0_channel;                                               // mux_pipeline_018:out_channel -> cmd_mux_014:sink0_channel
	wire          mux_pipeline_018_source0_startofpacket;                                         // mux_pipeline_018:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                           // mux_pipeline_018:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                      // cmd_demux_001:src15_valid -> mux_pipeline_019:in_valid
	wire  [116:0] cmd_demux_001_src15_data;                                                       // cmd_demux_001:src15_data -> mux_pipeline_019:in_data
	wire          cmd_demux_001_src15_ready;                                                      // mux_pipeline_019:in_ready -> cmd_demux_001:src15_ready
	wire   [26:0] cmd_demux_001_src15_channel;                                                    // cmd_demux_001:src15_channel -> mux_pipeline_019:in_channel
	wire          cmd_demux_001_src15_startofpacket;                                              // cmd_demux_001:src15_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                // cmd_demux_001:src15_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                                 // mux_pipeline_019:out_valid -> cmd_mux_015:sink0_valid
	wire  [116:0] mux_pipeline_019_source0_data;                                                  // mux_pipeline_019:out_data -> cmd_mux_015:sink0_data
	wire          mux_pipeline_019_source0_ready;                                                 // cmd_mux_015:sink0_ready -> mux_pipeline_019:out_ready
	wire   [26:0] mux_pipeline_019_source0_channel;                                               // mux_pipeline_019:out_channel -> cmd_mux_015:sink0_channel
	wire          mux_pipeline_019_source0_startofpacket;                                         // mux_pipeline_019:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                           // mux_pipeline_019:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                      // cmd_demux_001:src16_valid -> mux_pipeline_020:in_valid
	wire  [116:0] cmd_demux_001_src16_data;                                                       // cmd_demux_001:src16_data -> mux_pipeline_020:in_data
	wire          cmd_demux_001_src16_ready;                                                      // mux_pipeline_020:in_ready -> cmd_demux_001:src16_ready
	wire   [26:0] cmd_demux_001_src16_channel;                                                    // cmd_demux_001:src16_channel -> mux_pipeline_020:in_channel
	wire          cmd_demux_001_src16_startofpacket;                                              // cmd_demux_001:src16_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                // cmd_demux_001:src16_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                                 // mux_pipeline_020:out_valid -> cmd_mux_016:sink0_valid
	wire  [116:0] mux_pipeline_020_source0_data;                                                  // mux_pipeline_020:out_data -> cmd_mux_016:sink0_data
	wire          mux_pipeline_020_source0_ready;                                                 // cmd_mux_016:sink0_ready -> mux_pipeline_020:out_ready
	wire   [26:0] mux_pipeline_020_source0_channel;                                               // mux_pipeline_020:out_channel -> cmd_mux_016:sink0_channel
	wire          mux_pipeline_020_source0_startofpacket;                                         // mux_pipeline_020:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                                           // mux_pipeline_020:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                      // cmd_demux_001:src17_valid -> mux_pipeline_021:in_valid
	wire  [116:0] cmd_demux_001_src17_data;                                                       // cmd_demux_001:src17_data -> mux_pipeline_021:in_data
	wire          cmd_demux_001_src17_ready;                                                      // mux_pipeline_021:in_ready -> cmd_demux_001:src17_ready
	wire   [26:0] cmd_demux_001_src17_channel;                                                    // cmd_demux_001:src17_channel -> mux_pipeline_021:in_channel
	wire          cmd_demux_001_src17_startofpacket;                                              // cmd_demux_001:src17_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                // cmd_demux_001:src17_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                                 // mux_pipeline_021:out_valid -> cmd_mux_017:sink0_valid
	wire  [116:0] mux_pipeline_021_source0_data;                                                  // mux_pipeline_021:out_data -> cmd_mux_017:sink0_data
	wire          mux_pipeline_021_source0_ready;                                                 // cmd_mux_017:sink0_ready -> mux_pipeline_021:out_ready
	wire   [26:0] mux_pipeline_021_source0_channel;                                               // mux_pipeline_021:out_channel -> cmd_mux_017:sink0_channel
	wire          mux_pipeline_021_source0_startofpacket;                                         // mux_pipeline_021:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                                           // mux_pipeline_021:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                      // cmd_demux_001:src18_valid -> mux_pipeline_022:in_valid
	wire  [116:0] cmd_demux_001_src18_data;                                                       // cmd_demux_001:src18_data -> mux_pipeline_022:in_data
	wire          cmd_demux_001_src18_ready;                                                      // mux_pipeline_022:in_ready -> cmd_demux_001:src18_ready
	wire   [26:0] cmd_demux_001_src18_channel;                                                    // cmd_demux_001:src18_channel -> mux_pipeline_022:in_channel
	wire          cmd_demux_001_src18_startofpacket;                                              // cmd_demux_001:src18_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                // cmd_demux_001:src18_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                                 // mux_pipeline_022:out_valid -> cmd_mux_018:sink0_valid
	wire  [116:0] mux_pipeline_022_source0_data;                                                  // mux_pipeline_022:out_data -> cmd_mux_018:sink0_data
	wire          mux_pipeline_022_source0_ready;                                                 // cmd_mux_018:sink0_ready -> mux_pipeline_022:out_ready
	wire   [26:0] mux_pipeline_022_source0_channel;                                               // mux_pipeline_022:out_channel -> cmd_mux_018:sink0_channel
	wire          mux_pipeline_022_source0_startofpacket;                                         // mux_pipeline_022:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                                           // mux_pipeline_022:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                      // cmd_demux_001:src19_valid -> mux_pipeline_023:in_valid
	wire  [116:0] cmd_demux_001_src19_data;                                                       // cmd_demux_001:src19_data -> mux_pipeline_023:in_data
	wire          cmd_demux_001_src19_ready;                                                      // mux_pipeline_023:in_ready -> cmd_demux_001:src19_ready
	wire   [26:0] cmd_demux_001_src19_channel;                                                    // cmd_demux_001:src19_channel -> mux_pipeline_023:in_channel
	wire          cmd_demux_001_src19_startofpacket;                                              // cmd_demux_001:src19_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                // cmd_demux_001:src19_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                                 // mux_pipeline_023:out_valid -> cmd_mux_019:sink0_valid
	wire  [116:0] mux_pipeline_023_source0_data;                                                  // mux_pipeline_023:out_data -> cmd_mux_019:sink0_data
	wire          mux_pipeline_023_source0_ready;                                                 // cmd_mux_019:sink0_ready -> mux_pipeline_023:out_ready
	wire   [26:0] mux_pipeline_023_source0_channel;                                               // mux_pipeline_023:out_channel -> cmd_mux_019:sink0_channel
	wire          mux_pipeline_023_source0_startofpacket;                                         // mux_pipeline_023:out_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                                           // mux_pipeline_023:out_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                      // cmd_demux_001:src20_valid -> mux_pipeline_024:in_valid
	wire  [116:0] cmd_demux_001_src20_data;                                                       // cmd_demux_001:src20_data -> mux_pipeline_024:in_data
	wire          cmd_demux_001_src20_ready;                                                      // mux_pipeline_024:in_ready -> cmd_demux_001:src20_ready
	wire   [26:0] cmd_demux_001_src20_channel;                                                    // cmd_demux_001:src20_channel -> mux_pipeline_024:in_channel
	wire          cmd_demux_001_src20_startofpacket;                                              // cmd_demux_001:src20_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                // cmd_demux_001:src20_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                                 // mux_pipeline_024:out_valid -> cmd_mux_020:sink0_valid
	wire  [116:0] mux_pipeline_024_source0_data;                                                  // mux_pipeline_024:out_data -> cmd_mux_020:sink0_data
	wire          mux_pipeline_024_source0_ready;                                                 // cmd_mux_020:sink0_ready -> mux_pipeline_024:out_ready
	wire   [26:0] mux_pipeline_024_source0_channel;                                               // mux_pipeline_024:out_channel -> cmd_mux_020:sink0_channel
	wire          mux_pipeline_024_source0_startofpacket;                                         // mux_pipeline_024:out_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                                           // mux_pipeline_024:out_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                                      // cmd_demux_001:src21_valid -> mux_pipeline_025:in_valid
	wire  [116:0] cmd_demux_001_src21_data;                                                       // cmd_demux_001:src21_data -> mux_pipeline_025:in_data
	wire          cmd_demux_001_src21_ready;                                                      // mux_pipeline_025:in_ready -> cmd_demux_001:src21_ready
	wire   [26:0] cmd_demux_001_src21_channel;                                                    // cmd_demux_001:src21_channel -> mux_pipeline_025:in_channel
	wire          cmd_demux_001_src21_startofpacket;                                              // cmd_demux_001:src21_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                // cmd_demux_001:src21_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                                 // mux_pipeline_025:out_valid -> cmd_mux_021:sink0_valid
	wire  [116:0] mux_pipeline_025_source0_data;                                                  // mux_pipeline_025:out_data -> cmd_mux_021:sink0_data
	wire          mux_pipeline_025_source0_ready;                                                 // cmd_mux_021:sink0_ready -> mux_pipeline_025:out_ready
	wire   [26:0] mux_pipeline_025_source0_channel;                                               // mux_pipeline_025:out_channel -> cmd_mux_021:sink0_channel
	wire          mux_pipeline_025_source0_startofpacket;                                         // mux_pipeline_025:out_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                                           // mux_pipeline_025:out_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                                      // cmd_demux_001:src22_valid -> mux_pipeline_026:in_valid
	wire  [116:0] cmd_demux_001_src22_data;                                                       // cmd_demux_001:src22_data -> mux_pipeline_026:in_data
	wire          cmd_demux_001_src22_ready;                                                      // mux_pipeline_026:in_ready -> cmd_demux_001:src22_ready
	wire   [26:0] cmd_demux_001_src22_channel;                                                    // cmd_demux_001:src22_channel -> mux_pipeline_026:in_channel
	wire          cmd_demux_001_src22_startofpacket;                                              // cmd_demux_001:src22_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                                // cmd_demux_001:src22_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                                 // mux_pipeline_026:out_valid -> cmd_mux_022:sink0_valid
	wire  [116:0] mux_pipeline_026_source0_data;                                                  // mux_pipeline_026:out_data -> cmd_mux_022:sink0_data
	wire          mux_pipeline_026_source0_ready;                                                 // cmd_mux_022:sink0_ready -> mux_pipeline_026:out_ready
	wire   [26:0] mux_pipeline_026_source0_channel;                                               // mux_pipeline_026:out_channel -> cmd_mux_022:sink0_channel
	wire          mux_pipeline_026_source0_startofpacket;                                         // mux_pipeline_026:out_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                                           // mux_pipeline_026:out_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_001_src23_valid;                                                      // cmd_demux_001:src23_valid -> mux_pipeline_027:in_valid
	wire  [116:0] cmd_demux_001_src23_data;                                                       // cmd_demux_001:src23_data -> mux_pipeline_027:in_data
	wire          cmd_demux_001_src23_ready;                                                      // mux_pipeline_027:in_ready -> cmd_demux_001:src23_ready
	wire   [26:0] cmd_demux_001_src23_channel;                                                    // cmd_demux_001:src23_channel -> mux_pipeline_027:in_channel
	wire          cmd_demux_001_src23_startofpacket;                                              // cmd_demux_001:src23_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                                // cmd_demux_001:src23_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                                 // mux_pipeline_027:out_valid -> cmd_mux_023:sink0_valid
	wire  [116:0] mux_pipeline_027_source0_data;                                                  // mux_pipeline_027:out_data -> cmd_mux_023:sink0_data
	wire          mux_pipeline_027_source0_ready;                                                 // cmd_mux_023:sink0_ready -> mux_pipeline_027:out_ready
	wire   [26:0] mux_pipeline_027_source0_channel;                                               // mux_pipeline_027:out_channel -> cmd_mux_023:sink0_channel
	wire          mux_pipeline_027_source0_startofpacket;                                         // mux_pipeline_027:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                                           // mux_pipeline_027:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src24_valid;                                                      // cmd_demux_001:src24_valid -> mux_pipeline_028:in_valid
	wire  [116:0] cmd_demux_001_src24_data;                                                       // cmd_demux_001:src24_data -> mux_pipeline_028:in_data
	wire          cmd_demux_001_src24_ready;                                                      // mux_pipeline_028:in_ready -> cmd_demux_001:src24_ready
	wire   [26:0] cmd_demux_001_src24_channel;                                                    // cmd_demux_001:src24_channel -> mux_pipeline_028:in_channel
	wire          cmd_demux_001_src24_startofpacket;                                              // cmd_demux_001:src24_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                                // cmd_demux_001:src24_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                                 // mux_pipeline_028:out_valid -> cmd_mux_024:sink0_valid
	wire  [116:0] mux_pipeline_028_source0_data;                                                  // mux_pipeline_028:out_data -> cmd_mux_024:sink0_data
	wire          mux_pipeline_028_source0_ready;                                                 // cmd_mux_024:sink0_ready -> mux_pipeline_028:out_ready
	wire   [26:0] mux_pipeline_028_source0_channel;                                               // mux_pipeline_028:out_channel -> cmd_mux_024:sink0_channel
	wire          mux_pipeline_028_source0_startofpacket;                                         // mux_pipeline_028:out_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                                           // mux_pipeline_028:out_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src25_valid;                                                      // cmd_demux_001:src25_valid -> mux_pipeline_029:in_valid
	wire  [116:0] cmd_demux_001_src25_data;                                                       // cmd_demux_001:src25_data -> mux_pipeline_029:in_data
	wire          cmd_demux_001_src25_ready;                                                      // mux_pipeline_029:in_ready -> cmd_demux_001:src25_ready
	wire   [26:0] cmd_demux_001_src25_channel;                                                    // cmd_demux_001:src25_channel -> mux_pipeline_029:in_channel
	wire          cmd_demux_001_src25_startofpacket;                                              // cmd_demux_001:src25_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          cmd_demux_001_src25_endofpacket;                                                // cmd_demux_001:src25_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                                 // mux_pipeline_029:out_valid -> cmd_mux_025:sink0_valid
	wire  [116:0] mux_pipeline_029_source0_data;                                                  // mux_pipeline_029:out_data -> cmd_mux_025:sink0_data
	wire          mux_pipeline_029_source0_ready;                                                 // cmd_mux_025:sink0_ready -> mux_pipeline_029:out_ready
	wire   [26:0] mux_pipeline_029_source0_channel;                                               // mux_pipeline_029:out_channel -> cmd_mux_025:sink0_channel
	wire          mux_pipeline_029_source0_startofpacket;                                         // mux_pipeline_029:out_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                                           // mux_pipeline_029:out_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_001_src26_valid;                                                      // cmd_demux_001:src26_valid -> mux_pipeline_030:in_valid
	wire  [116:0] cmd_demux_001_src26_data;                                                       // cmd_demux_001:src26_data -> mux_pipeline_030:in_data
	wire          cmd_demux_001_src26_ready;                                                      // mux_pipeline_030:in_ready -> cmd_demux_001:src26_ready
	wire   [26:0] cmd_demux_001_src26_channel;                                                    // cmd_demux_001:src26_channel -> mux_pipeline_030:in_channel
	wire          cmd_demux_001_src26_startofpacket;                                              // cmd_demux_001:src26_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          cmd_demux_001_src26_endofpacket;                                                // cmd_demux_001:src26_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                                 // mux_pipeline_030:out_valid -> cmd_mux_026:sink0_valid
	wire  [116:0] mux_pipeline_030_source0_data;                                                  // mux_pipeline_030:out_data -> cmd_mux_026:sink0_data
	wire          mux_pipeline_030_source0_ready;                                                 // cmd_mux_026:sink0_ready -> mux_pipeline_030:out_ready
	wire   [26:0] mux_pipeline_030_source0_channel;                                               // mux_pipeline_030:out_channel -> cmd_mux_026:sink0_channel
	wire          mux_pipeline_030_source0_startofpacket;                                         // mux_pipeline_030:out_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                                           // mux_pipeline_030:out_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> mux_pipeline_031:in_valid
	wire  [116:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> mux_pipeline_031:in_data
	wire          rsp_demux_src0_ready;                                                           // mux_pipeline_031:in_ready -> rsp_demux:src0_ready
	wire   [26:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> mux_pipeline_031:in_channel
	wire          rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                                 // mux_pipeline_031:out_valid -> rsp_mux:sink0_valid
	wire  [116:0] mux_pipeline_031_source0_data;                                                  // mux_pipeline_031:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_031_source0_ready;                                                 // rsp_mux:sink0_ready -> mux_pipeline_031:out_ready
	wire   [26:0] mux_pipeline_031_source0_channel;                                               // mux_pipeline_031:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_031_source0_startofpacket;                                         // mux_pipeline_031:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                                           // mux_pipeline_031:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                           // rsp_demux:src1_valid -> mux_pipeline_032:in_valid
	wire  [116:0] rsp_demux_src1_data;                                                            // rsp_demux:src1_data -> mux_pipeline_032:in_data
	wire          rsp_demux_src1_ready;                                                           // mux_pipeline_032:in_ready -> rsp_demux:src1_ready
	wire   [26:0] rsp_demux_src1_channel;                                                         // rsp_demux:src1_channel -> mux_pipeline_032:in_channel
	wire          rsp_demux_src1_startofpacket;                                                   // rsp_demux:src1_startofpacket -> mux_pipeline_032:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                     // rsp_demux:src1_endofpacket -> mux_pipeline_032:in_endofpacket
	wire          mux_pipeline_032_source0_valid;                                                 // mux_pipeline_032:out_valid -> rsp_mux_001:sink0_valid
	wire  [116:0] mux_pipeline_032_source0_data;                                                  // mux_pipeline_032:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_032_source0_ready;                                                 // rsp_mux_001:sink0_ready -> mux_pipeline_032:out_ready
	wire   [26:0] mux_pipeline_032_source0_channel;                                               // mux_pipeline_032:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_032_source0_startofpacket;                                         // mux_pipeline_032:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_032_source0_endofpacket;                                           // mux_pipeline_032:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> mux_pipeline_033:in_valid
	wire  [116:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> mux_pipeline_033:in_data
	wire          rsp_demux_001_src0_ready;                                                       // mux_pipeline_033:in_ready -> rsp_demux_001:src0_ready
	wire   [26:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> mux_pipeline_033:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> mux_pipeline_033:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> mux_pipeline_033:in_endofpacket
	wire          mux_pipeline_033_source0_valid;                                                 // mux_pipeline_033:out_valid -> rsp_mux_001:sink1_valid
	wire  [116:0] mux_pipeline_033_source0_data;                                                  // mux_pipeline_033:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_033_source0_ready;                                                 // rsp_mux_001:sink1_ready -> mux_pipeline_033:out_ready
	wire   [26:0] mux_pipeline_033_source0_channel;                                               // mux_pipeline_033:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_033_source0_startofpacket;                                         // mux_pipeline_033:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_033_source0_endofpacket;                                           // mux_pipeline_033:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                       // rsp_demux_002:src0_valid -> mux_pipeline_034:in_valid
	wire  [116:0] rsp_demux_002_src0_data;                                                        // rsp_demux_002:src0_data -> mux_pipeline_034:in_data
	wire          rsp_demux_002_src0_ready;                                                       // mux_pipeline_034:in_ready -> rsp_demux_002:src0_ready
	wire   [26:0] rsp_demux_002_src0_channel;                                                     // rsp_demux_002:src0_channel -> mux_pipeline_034:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                               // rsp_demux_002:src0_startofpacket -> mux_pipeline_034:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                 // rsp_demux_002:src0_endofpacket -> mux_pipeline_034:in_endofpacket
	wire          mux_pipeline_034_source0_valid;                                                 // mux_pipeline_034:out_valid -> rsp_mux_001:sink2_valid
	wire  [116:0] mux_pipeline_034_source0_data;                                                  // mux_pipeline_034:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_034_source0_ready;                                                 // rsp_mux_001:sink2_ready -> mux_pipeline_034:out_ready
	wire   [26:0] mux_pipeline_034_source0_channel;                                               // mux_pipeline_034:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_034_source0_startofpacket;                                         // mux_pipeline_034:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_034_source0_endofpacket;                                           // mux_pipeline_034:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                       // rsp_demux_003:src0_valid -> mux_pipeline_035:in_valid
	wire  [116:0] rsp_demux_003_src0_data;                                                        // rsp_demux_003:src0_data -> mux_pipeline_035:in_data
	wire          rsp_demux_003_src0_ready;                                                       // mux_pipeline_035:in_ready -> rsp_demux_003:src0_ready
	wire   [26:0] rsp_demux_003_src0_channel;                                                     // rsp_demux_003:src0_channel -> mux_pipeline_035:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                               // rsp_demux_003:src0_startofpacket -> mux_pipeline_035:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                 // rsp_demux_003:src0_endofpacket -> mux_pipeline_035:in_endofpacket
	wire          mux_pipeline_035_source0_valid;                                                 // mux_pipeline_035:out_valid -> rsp_mux_001:sink3_valid
	wire  [116:0] mux_pipeline_035_source0_data;                                                  // mux_pipeline_035:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_035_source0_ready;                                                 // rsp_mux_001:sink3_ready -> mux_pipeline_035:out_ready
	wire   [26:0] mux_pipeline_035_source0_channel;                                               // mux_pipeline_035:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_035_source0_startofpacket;                                         // mux_pipeline_035:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_035_source0_endofpacket;                                           // mux_pipeline_035:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                       // rsp_demux_004:src0_valid -> mux_pipeline_036:in_valid
	wire  [116:0] rsp_demux_004_src0_data;                                                        // rsp_demux_004:src0_data -> mux_pipeline_036:in_data
	wire          rsp_demux_004_src0_ready;                                                       // mux_pipeline_036:in_ready -> rsp_demux_004:src0_ready
	wire   [26:0] rsp_demux_004_src0_channel;                                                     // rsp_demux_004:src0_channel -> mux_pipeline_036:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                               // rsp_demux_004:src0_startofpacket -> mux_pipeline_036:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                 // rsp_demux_004:src0_endofpacket -> mux_pipeline_036:in_endofpacket
	wire          mux_pipeline_036_source0_valid;                                                 // mux_pipeline_036:out_valid -> rsp_mux_001:sink4_valid
	wire  [116:0] mux_pipeline_036_source0_data;                                                  // mux_pipeline_036:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_036_source0_ready;                                                 // rsp_mux_001:sink4_ready -> mux_pipeline_036:out_ready
	wire   [26:0] mux_pipeline_036_source0_channel;                                               // mux_pipeline_036:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_036_source0_startofpacket;                                         // mux_pipeline_036:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_036_source0_endofpacket;                                           // mux_pipeline_036:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                       // rsp_demux_005:src0_valid -> mux_pipeline_037:in_valid
	wire  [116:0] rsp_demux_005_src0_data;                                                        // rsp_demux_005:src0_data -> mux_pipeline_037:in_data
	wire          rsp_demux_005_src0_ready;                                                       // mux_pipeline_037:in_ready -> rsp_demux_005:src0_ready
	wire   [26:0] rsp_demux_005_src0_channel;                                                     // rsp_demux_005:src0_channel -> mux_pipeline_037:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                               // rsp_demux_005:src0_startofpacket -> mux_pipeline_037:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                 // rsp_demux_005:src0_endofpacket -> mux_pipeline_037:in_endofpacket
	wire          mux_pipeline_037_source0_valid;                                                 // mux_pipeline_037:out_valid -> rsp_mux_001:sink5_valid
	wire  [116:0] mux_pipeline_037_source0_data;                                                  // mux_pipeline_037:out_data -> rsp_mux_001:sink5_data
	wire          mux_pipeline_037_source0_ready;                                                 // rsp_mux_001:sink5_ready -> mux_pipeline_037:out_ready
	wire   [26:0] mux_pipeline_037_source0_channel;                                               // mux_pipeline_037:out_channel -> rsp_mux_001:sink5_channel
	wire          mux_pipeline_037_source0_startofpacket;                                         // mux_pipeline_037:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          mux_pipeline_037_source0_endofpacket;                                           // mux_pipeline_037:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                       // rsp_demux_006:src0_valid -> mux_pipeline_038:in_valid
	wire  [116:0] rsp_demux_006_src0_data;                                                        // rsp_demux_006:src0_data -> mux_pipeline_038:in_data
	wire          rsp_demux_006_src0_ready;                                                       // mux_pipeline_038:in_ready -> rsp_demux_006:src0_ready
	wire   [26:0] rsp_demux_006_src0_channel;                                                     // rsp_demux_006:src0_channel -> mux_pipeline_038:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                               // rsp_demux_006:src0_startofpacket -> mux_pipeline_038:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                 // rsp_demux_006:src0_endofpacket -> mux_pipeline_038:in_endofpacket
	wire          mux_pipeline_038_source0_valid;                                                 // mux_pipeline_038:out_valid -> rsp_mux_001:sink6_valid
	wire  [116:0] mux_pipeline_038_source0_data;                                                  // mux_pipeline_038:out_data -> rsp_mux_001:sink6_data
	wire          mux_pipeline_038_source0_ready;                                                 // rsp_mux_001:sink6_ready -> mux_pipeline_038:out_ready
	wire   [26:0] mux_pipeline_038_source0_channel;                                               // mux_pipeline_038:out_channel -> rsp_mux_001:sink6_channel
	wire          mux_pipeline_038_source0_startofpacket;                                         // mux_pipeline_038:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          mux_pipeline_038_source0_endofpacket;                                           // mux_pipeline_038:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                       // rsp_demux_007:src0_valid -> mux_pipeline_039:in_valid
	wire  [116:0] rsp_demux_007_src0_data;                                                        // rsp_demux_007:src0_data -> mux_pipeline_039:in_data
	wire          rsp_demux_007_src0_ready;                                                       // mux_pipeline_039:in_ready -> rsp_demux_007:src0_ready
	wire   [26:0] rsp_demux_007_src0_channel;                                                     // rsp_demux_007:src0_channel -> mux_pipeline_039:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                               // rsp_demux_007:src0_startofpacket -> mux_pipeline_039:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                 // rsp_demux_007:src0_endofpacket -> mux_pipeline_039:in_endofpacket
	wire          mux_pipeline_039_source0_valid;                                                 // mux_pipeline_039:out_valid -> rsp_mux_001:sink7_valid
	wire  [116:0] mux_pipeline_039_source0_data;                                                  // mux_pipeline_039:out_data -> rsp_mux_001:sink7_data
	wire          mux_pipeline_039_source0_ready;                                                 // rsp_mux_001:sink7_ready -> mux_pipeline_039:out_ready
	wire   [26:0] mux_pipeline_039_source0_channel;                                               // mux_pipeline_039:out_channel -> rsp_mux_001:sink7_channel
	wire          mux_pipeline_039_source0_startofpacket;                                         // mux_pipeline_039:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          mux_pipeline_039_source0_endofpacket;                                           // mux_pipeline_039:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                       // rsp_demux_008:src0_valid -> mux_pipeline_040:in_valid
	wire  [116:0] rsp_demux_008_src0_data;                                                        // rsp_demux_008:src0_data -> mux_pipeline_040:in_data
	wire          rsp_demux_008_src0_ready;                                                       // mux_pipeline_040:in_ready -> rsp_demux_008:src0_ready
	wire   [26:0] rsp_demux_008_src0_channel;                                                     // rsp_demux_008:src0_channel -> mux_pipeline_040:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                               // rsp_demux_008:src0_startofpacket -> mux_pipeline_040:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                 // rsp_demux_008:src0_endofpacket -> mux_pipeline_040:in_endofpacket
	wire          mux_pipeline_040_source0_valid;                                                 // mux_pipeline_040:out_valid -> rsp_mux_001:sink8_valid
	wire  [116:0] mux_pipeline_040_source0_data;                                                  // mux_pipeline_040:out_data -> rsp_mux_001:sink8_data
	wire          mux_pipeline_040_source0_ready;                                                 // rsp_mux_001:sink8_ready -> mux_pipeline_040:out_ready
	wire   [26:0] mux_pipeline_040_source0_channel;                                               // mux_pipeline_040:out_channel -> rsp_mux_001:sink8_channel
	wire          mux_pipeline_040_source0_startofpacket;                                         // mux_pipeline_040:out_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          mux_pipeline_040_source0_endofpacket;                                           // mux_pipeline_040:out_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                       // rsp_demux_009:src0_valid -> mux_pipeline_041:in_valid
	wire  [116:0] rsp_demux_009_src0_data;                                                        // rsp_demux_009:src0_data -> mux_pipeline_041:in_data
	wire          rsp_demux_009_src0_ready;                                                       // mux_pipeline_041:in_ready -> rsp_demux_009:src0_ready
	wire   [26:0] rsp_demux_009_src0_channel;                                                     // rsp_demux_009:src0_channel -> mux_pipeline_041:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                               // rsp_demux_009:src0_startofpacket -> mux_pipeline_041:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                 // rsp_demux_009:src0_endofpacket -> mux_pipeline_041:in_endofpacket
	wire          mux_pipeline_041_source0_valid;                                                 // mux_pipeline_041:out_valid -> rsp_mux_001:sink9_valid
	wire  [116:0] mux_pipeline_041_source0_data;                                                  // mux_pipeline_041:out_data -> rsp_mux_001:sink9_data
	wire          mux_pipeline_041_source0_ready;                                                 // rsp_mux_001:sink9_ready -> mux_pipeline_041:out_ready
	wire   [26:0] mux_pipeline_041_source0_channel;                                               // mux_pipeline_041:out_channel -> rsp_mux_001:sink9_channel
	wire          mux_pipeline_041_source0_startofpacket;                                         // mux_pipeline_041:out_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          mux_pipeline_041_source0_endofpacket;                                           // mux_pipeline_041:out_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                       // rsp_demux_010:src0_valid -> mux_pipeline_042:in_valid
	wire  [116:0] rsp_demux_010_src0_data;                                                        // rsp_demux_010:src0_data -> mux_pipeline_042:in_data
	wire          rsp_demux_010_src0_ready;                                                       // mux_pipeline_042:in_ready -> rsp_demux_010:src0_ready
	wire   [26:0] rsp_demux_010_src0_channel;                                                     // rsp_demux_010:src0_channel -> mux_pipeline_042:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                               // rsp_demux_010:src0_startofpacket -> mux_pipeline_042:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                 // rsp_demux_010:src0_endofpacket -> mux_pipeline_042:in_endofpacket
	wire          mux_pipeline_042_source0_valid;                                                 // mux_pipeline_042:out_valid -> rsp_mux_001:sink10_valid
	wire  [116:0] mux_pipeline_042_source0_data;                                                  // mux_pipeline_042:out_data -> rsp_mux_001:sink10_data
	wire          mux_pipeline_042_source0_ready;                                                 // rsp_mux_001:sink10_ready -> mux_pipeline_042:out_ready
	wire   [26:0] mux_pipeline_042_source0_channel;                                               // mux_pipeline_042:out_channel -> rsp_mux_001:sink10_channel
	wire          mux_pipeline_042_source0_startofpacket;                                         // mux_pipeline_042:out_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          mux_pipeline_042_source0_endofpacket;                                           // mux_pipeline_042:out_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                       // rsp_demux_011:src0_valid -> mux_pipeline_043:in_valid
	wire  [116:0] rsp_demux_011_src0_data;                                                        // rsp_demux_011:src0_data -> mux_pipeline_043:in_data
	wire          rsp_demux_011_src0_ready;                                                       // mux_pipeline_043:in_ready -> rsp_demux_011:src0_ready
	wire   [26:0] rsp_demux_011_src0_channel;                                                     // rsp_demux_011:src0_channel -> mux_pipeline_043:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                               // rsp_demux_011:src0_startofpacket -> mux_pipeline_043:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                 // rsp_demux_011:src0_endofpacket -> mux_pipeline_043:in_endofpacket
	wire          mux_pipeline_043_source0_valid;                                                 // mux_pipeline_043:out_valid -> rsp_mux_001:sink11_valid
	wire  [116:0] mux_pipeline_043_source0_data;                                                  // mux_pipeline_043:out_data -> rsp_mux_001:sink11_data
	wire          mux_pipeline_043_source0_ready;                                                 // rsp_mux_001:sink11_ready -> mux_pipeline_043:out_ready
	wire   [26:0] mux_pipeline_043_source0_channel;                                               // mux_pipeline_043:out_channel -> rsp_mux_001:sink11_channel
	wire          mux_pipeline_043_source0_startofpacket;                                         // mux_pipeline_043:out_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          mux_pipeline_043_source0_endofpacket;                                           // mux_pipeline_043:out_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                       // rsp_demux_012:src0_valid -> mux_pipeline_044:in_valid
	wire  [116:0] rsp_demux_012_src0_data;                                                        // rsp_demux_012:src0_data -> mux_pipeline_044:in_data
	wire          rsp_demux_012_src0_ready;                                                       // mux_pipeline_044:in_ready -> rsp_demux_012:src0_ready
	wire   [26:0] rsp_demux_012_src0_channel;                                                     // rsp_demux_012:src0_channel -> mux_pipeline_044:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                               // rsp_demux_012:src0_startofpacket -> mux_pipeline_044:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                 // rsp_demux_012:src0_endofpacket -> mux_pipeline_044:in_endofpacket
	wire          mux_pipeline_044_source0_valid;                                                 // mux_pipeline_044:out_valid -> rsp_mux_001:sink12_valid
	wire  [116:0] mux_pipeline_044_source0_data;                                                  // mux_pipeline_044:out_data -> rsp_mux_001:sink12_data
	wire          mux_pipeline_044_source0_ready;                                                 // rsp_mux_001:sink12_ready -> mux_pipeline_044:out_ready
	wire   [26:0] mux_pipeline_044_source0_channel;                                               // mux_pipeline_044:out_channel -> rsp_mux_001:sink12_channel
	wire          mux_pipeline_044_source0_startofpacket;                                         // mux_pipeline_044:out_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          mux_pipeline_044_source0_endofpacket;                                           // mux_pipeline_044:out_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                       // rsp_demux_013:src0_valid -> mux_pipeline_045:in_valid
	wire  [116:0] rsp_demux_013_src0_data;                                                        // rsp_demux_013:src0_data -> mux_pipeline_045:in_data
	wire          rsp_demux_013_src0_ready;                                                       // mux_pipeline_045:in_ready -> rsp_demux_013:src0_ready
	wire   [26:0] rsp_demux_013_src0_channel;                                                     // rsp_demux_013:src0_channel -> mux_pipeline_045:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                               // rsp_demux_013:src0_startofpacket -> mux_pipeline_045:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                 // rsp_demux_013:src0_endofpacket -> mux_pipeline_045:in_endofpacket
	wire          mux_pipeline_045_source0_valid;                                                 // mux_pipeline_045:out_valid -> rsp_mux_001:sink13_valid
	wire  [116:0] mux_pipeline_045_source0_data;                                                  // mux_pipeline_045:out_data -> rsp_mux_001:sink13_data
	wire          mux_pipeline_045_source0_ready;                                                 // rsp_mux_001:sink13_ready -> mux_pipeline_045:out_ready
	wire   [26:0] mux_pipeline_045_source0_channel;                                               // mux_pipeline_045:out_channel -> rsp_mux_001:sink13_channel
	wire          mux_pipeline_045_source0_startofpacket;                                         // mux_pipeline_045:out_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          mux_pipeline_045_source0_endofpacket;                                           // mux_pipeline_045:out_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                       // rsp_demux_014:src0_valid -> mux_pipeline_046:in_valid
	wire  [116:0] rsp_demux_014_src0_data;                                                        // rsp_demux_014:src0_data -> mux_pipeline_046:in_data
	wire          rsp_demux_014_src0_ready;                                                       // mux_pipeline_046:in_ready -> rsp_demux_014:src0_ready
	wire   [26:0] rsp_demux_014_src0_channel;                                                     // rsp_demux_014:src0_channel -> mux_pipeline_046:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                               // rsp_demux_014:src0_startofpacket -> mux_pipeline_046:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                 // rsp_demux_014:src0_endofpacket -> mux_pipeline_046:in_endofpacket
	wire          mux_pipeline_046_source0_valid;                                                 // mux_pipeline_046:out_valid -> rsp_mux_001:sink14_valid
	wire  [116:0] mux_pipeline_046_source0_data;                                                  // mux_pipeline_046:out_data -> rsp_mux_001:sink14_data
	wire          mux_pipeline_046_source0_ready;                                                 // rsp_mux_001:sink14_ready -> mux_pipeline_046:out_ready
	wire   [26:0] mux_pipeline_046_source0_channel;                                               // mux_pipeline_046:out_channel -> rsp_mux_001:sink14_channel
	wire          mux_pipeline_046_source0_startofpacket;                                         // mux_pipeline_046:out_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          mux_pipeline_046_source0_endofpacket;                                           // mux_pipeline_046:out_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                       // rsp_demux_015:src0_valid -> mux_pipeline_047:in_valid
	wire  [116:0] rsp_demux_015_src0_data;                                                        // rsp_demux_015:src0_data -> mux_pipeline_047:in_data
	wire          rsp_demux_015_src0_ready;                                                       // mux_pipeline_047:in_ready -> rsp_demux_015:src0_ready
	wire   [26:0] rsp_demux_015_src0_channel;                                                     // rsp_demux_015:src0_channel -> mux_pipeline_047:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                               // rsp_demux_015:src0_startofpacket -> mux_pipeline_047:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                 // rsp_demux_015:src0_endofpacket -> mux_pipeline_047:in_endofpacket
	wire          mux_pipeline_047_source0_valid;                                                 // mux_pipeline_047:out_valid -> rsp_mux_001:sink15_valid
	wire  [116:0] mux_pipeline_047_source0_data;                                                  // mux_pipeline_047:out_data -> rsp_mux_001:sink15_data
	wire          mux_pipeline_047_source0_ready;                                                 // rsp_mux_001:sink15_ready -> mux_pipeline_047:out_ready
	wire   [26:0] mux_pipeline_047_source0_channel;                                               // mux_pipeline_047:out_channel -> rsp_mux_001:sink15_channel
	wire          mux_pipeline_047_source0_startofpacket;                                         // mux_pipeline_047:out_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          mux_pipeline_047_source0_endofpacket;                                           // mux_pipeline_047:out_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                       // rsp_demux_016:src0_valid -> mux_pipeline_048:in_valid
	wire  [116:0] rsp_demux_016_src0_data;                                                        // rsp_demux_016:src0_data -> mux_pipeline_048:in_data
	wire          rsp_demux_016_src0_ready;                                                       // mux_pipeline_048:in_ready -> rsp_demux_016:src0_ready
	wire   [26:0] rsp_demux_016_src0_channel;                                                     // rsp_demux_016:src0_channel -> mux_pipeline_048:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                               // rsp_demux_016:src0_startofpacket -> mux_pipeline_048:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                 // rsp_demux_016:src0_endofpacket -> mux_pipeline_048:in_endofpacket
	wire          mux_pipeline_048_source0_valid;                                                 // mux_pipeline_048:out_valid -> rsp_mux_001:sink16_valid
	wire  [116:0] mux_pipeline_048_source0_data;                                                  // mux_pipeline_048:out_data -> rsp_mux_001:sink16_data
	wire          mux_pipeline_048_source0_ready;                                                 // rsp_mux_001:sink16_ready -> mux_pipeline_048:out_ready
	wire   [26:0] mux_pipeline_048_source0_channel;                                               // mux_pipeline_048:out_channel -> rsp_mux_001:sink16_channel
	wire          mux_pipeline_048_source0_startofpacket;                                         // mux_pipeline_048:out_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          mux_pipeline_048_source0_endofpacket;                                           // mux_pipeline_048:out_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                       // rsp_demux_017:src0_valid -> mux_pipeline_049:in_valid
	wire  [116:0] rsp_demux_017_src0_data;                                                        // rsp_demux_017:src0_data -> mux_pipeline_049:in_data
	wire          rsp_demux_017_src0_ready;                                                       // mux_pipeline_049:in_ready -> rsp_demux_017:src0_ready
	wire   [26:0] rsp_demux_017_src0_channel;                                                     // rsp_demux_017:src0_channel -> mux_pipeline_049:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                               // rsp_demux_017:src0_startofpacket -> mux_pipeline_049:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                 // rsp_demux_017:src0_endofpacket -> mux_pipeline_049:in_endofpacket
	wire          mux_pipeline_049_source0_valid;                                                 // mux_pipeline_049:out_valid -> rsp_mux_001:sink17_valid
	wire  [116:0] mux_pipeline_049_source0_data;                                                  // mux_pipeline_049:out_data -> rsp_mux_001:sink17_data
	wire          mux_pipeline_049_source0_ready;                                                 // rsp_mux_001:sink17_ready -> mux_pipeline_049:out_ready
	wire   [26:0] mux_pipeline_049_source0_channel;                                               // mux_pipeline_049:out_channel -> rsp_mux_001:sink17_channel
	wire          mux_pipeline_049_source0_startofpacket;                                         // mux_pipeline_049:out_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          mux_pipeline_049_source0_endofpacket;                                           // mux_pipeline_049:out_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                       // rsp_demux_018:src0_valid -> mux_pipeline_050:in_valid
	wire  [116:0] rsp_demux_018_src0_data;                                                        // rsp_demux_018:src0_data -> mux_pipeline_050:in_data
	wire          rsp_demux_018_src0_ready;                                                       // mux_pipeline_050:in_ready -> rsp_demux_018:src0_ready
	wire   [26:0] rsp_demux_018_src0_channel;                                                     // rsp_demux_018:src0_channel -> mux_pipeline_050:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                               // rsp_demux_018:src0_startofpacket -> mux_pipeline_050:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                 // rsp_demux_018:src0_endofpacket -> mux_pipeline_050:in_endofpacket
	wire          mux_pipeline_050_source0_valid;                                                 // mux_pipeline_050:out_valid -> rsp_mux_001:sink18_valid
	wire  [116:0] mux_pipeline_050_source0_data;                                                  // mux_pipeline_050:out_data -> rsp_mux_001:sink18_data
	wire          mux_pipeline_050_source0_ready;                                                 // rsp_mux_001:sink18_ready -> mux_pipeline_050:out_ready
	wire   [26:0] mux_pipeline_050_source0_channel;                                               // mux_pipeline_050:out_channel -> rsp_mux_001:sink18_channel
	wire          mux_pipeline_050_source0_startofpacket;                                         // mux_pipeline_050:out_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          mux_pipeline_050_source0_endofpacket;                                           // mux_pipeline_050:out_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                       // rsp_demux_019:src0_valid -> mux_pipeline_051:in_valid
	wire  [116:0] rsp_demux_019_src0_data;                                                        // rsp_demux_019:src0_data -> mux_pipeline_051:in_data
	wire          rsp_demux_019_src0_ready;                                                       // mux_pipeline_051:in_ready -> rsp_demux_019:src0_ready
	wire   [26:0] rsp_demux_019_src0_channel;                                                     // rsp_demux_019:src0_channel -> mux_pipeline_051:in_channel
	wire          rsp_demux_019_src0_startofpacket;                                               // rsp_demux_019:src0_startofpacket -> mux_pipeline_051:in_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                 // rsp_demux_019:src0_endofpacket -> mux_pipeline_051:in_endofpacket
	wire          mux_pipeline_051_source0_valid;                                                 // mux_pipeline_051:out_valid -> rsp_mux_001:sink19_valid
	wire  [116:0] mux_pipeline_051_source0_data;                                                  // mux_pipeline_051:out_data -> rsp_mux_001:sink19_data
	wire          mux_pipeline_051_source0_ready;                                                 // rsp_mux_001:sink19_ready -> mux_pipeline_051:out_ready
	wire   [26:0] mux_pipeline_051_source0_channel;                                               // mux_pipeline_051:out_channel -> rsp_mux_001:sink19_channel
	wire          mux_pipeline_051_source0_startofpacket;                                         // mux_pipeline_051:out_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          mux_pipeline_051_source0_endofpacket;                                           // mux_pipeline_051:out_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                       // rsp_demux_020:src0_valid -> mux_pipeline_052:in_valid
	wire  [116:0] rsp_demux_020_src0_data;                                                        // rsp_demux_020:src0_data -> mux_pipeline_052:in_data
	wire          rsp_demux_020_src0_ready;                                                       // mux_pipeline_052:in_ready -> rsp_demux_020:src0_ready
	wire   [26:0] rsp_demux_020_src0_channel;                                                     // rsp_demux_020:src0_channel -> mux_pipeline_052:in_channel
	wire          rsp_demux_020_src0_startofpacket;                                               // rsp_demux_020:src0_startofpacket -> mux_pipeline_052:in_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                 // rsp_demux_020:src0_endofpacket -> mux_pipeline_052:in_endofpacket
	wire          mux_pipeline_052_source0_valid;                                                 // mux_pipeline_052:out_valid -> rsp_mux_001:sink20_valid
	wire  [116:0] mux_pipeline_052_source0_data;                                                  // mux_pipeline_052:out_data -> rsp_mux_001:sink20_data
	wire          mux_pipeline_052_source0_ready;                                                 // rsp_mux_001:sink20_ready -> mux_pipeline_052:out_ready
	wire   [26:0] mux_pipeline_052_source0_channel;                                               // mux_pipeline_052:out_channel -> rsp_mux_001:sink20_channel
	wire          mux_pipeline_052_source0_startofpacket;                                         // mux_pipeline_052:out_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          mux_pipeline_052_source0_endofpacket;                                           // mux_pipeline_052:out_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                       // rsp_demux_021:src0_valid -> mux_pipeline_053:in_valid
	wire  [116:0] rsp_demux_021_src0_data;                                                        // rsp_demux_021:src0_data -> mux_pipeline_053:in_data
	wire          rsp_demux_021_src0_ready;                                                       // mux_pipeline_053:in_ready -> rsp_demux_021:src0_ready
	wire   [26:0] rsp_demux_021_src0_channel;                                                     // rsp_demux_021:src0_channel -> mux_pipeline_053:in_channel
	wire          rsp_demux_021_src0_startofpacket;                                               // rsp_demux_021:src0_startofpacket -> mux_pipeline_053:in_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                 // rsp_demux_021:src0_endofpacket -> mux_pipeline_053:in_endofpacket
	wire          mux_pipeline_053_source0_valid;                                                 // mux_pipeline_053:out_valid -> rsp_mux_001:sink21_valid
	wire  [116:0] mux_pipeline_053_source0_data;                                                  // mux_pipeline_053:out_data -> rsp_mux_001:sink21_data
	wire          mux_pipeline_053_source0_ready;                                                 // rsp_mux_001:sink21_ready -> mux_pipeline_053:out_ready
	wire   [26:0] mux_pipeline_053_source0_channel;                                               // mux_pipeline_053:out_channel -> rsp_mux_001:sink21_channel
	wire          mux_pipeline_053_source0_startofpacket;                                         // mux_pipeline_053:out_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          mux_pipeline_053_source0_endofpacket;                                           // mux_pipeline_053:out_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                       // rsp_demux_022:src0_valid -> mux_pipeline_054:in_valid
	wire  [116:0] rsp_demux_022_src0_data;                                                        // rsp_demux_022:src0_data -> mux_pipeline_054:in_data
	wire          rsp_demux_022_src0_ready;                                                       // mux_pipeline_054:in_ready -> rsp_demux_022:src0_ready
	wire   [26:0] rsp_demux_022_src0_channel;                                                     // rsp_demux_022:src0_channel -> mux_pipeline_054:in_channel
	wire          rsp_demux_022_src0_startofpacket;                                               // rsp_demux_022:src0_startofpacket -> mux_pipeline_054:in_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                 // rsp_demux_022:src0_endofpacket -> mux_pipeline_054:in_endofpacket
	wire          mux_pipeline_054_source0_valid;                                                 // mux_pipeline_054:out_valid -> rsp_mux_001:sink22_valid
	wire  [116:0] mux_pipeline_054_source0_data;                                                  // mux_pipeline_054:out_data -> rsp_mux_001:sink22_data
	wire          mux_pipeline_054_source0_ready;                                                 // rsp_mux_001:sink22_ready -> mux_pipeline_054:out_ready
	wire   [26:0] mux_pipeline_054_source0_channel;                                               // mux_pipeline_054:out_channel -> rsp_mux_001:sink22_channel
	wire          mux_pipeline_054_source0_startofpacket;                                         // mux_pipeline_054:out_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          mux_pipeline_054_source0_endofpacket;                                           // mux_pipeline_054:out_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                       // rsp_demux_023:src0_valid -> mux_pipeline_055:in_valid
	wire  [116:0] rsp_demux_023_src0_data;                                                        // rsp_demux_023:src0_data -> mux_pipeline_055:in_data
	wire          rsp_demux_023_src0_ready;                                                       // mux_pipeline_055:in_ready -> rsp_demux_023:src0_ready
	wire   [26:0] rsp_demux_023_src0_channel;                                                     // rsp_demux_023:src0_channel -> mux_pipeline_055:in_channel
	wire          rsp_demux_023_src0_startofpacket;                                               // rsp_demux_023:src0_startofpacket -> mux_pipeline_055:in_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                 // rsp_demux_023:src0_endofpacket -> mux_pipeline_055:in_endofpacket
	wire          mux_pipeline_055_source0_valid;                                                 // mux_pipeline_055:out_valid -> rsp_mux_001:sink23_valid
	wire  [116:0] mux_pipeline_055_source0_data;                                                  // mux_pipeline_055:out_data -> rsp_mux_001:sink23_data
	wire          mux_pipeline_055_source0_ready;                                                 // rsp_mux_001:sink23_ready -> mux_pipeline_055:out_ready
	wire   [26:0] mux_pipeline_055_source0_channel;                                               // mux_pipeline_055:out_channel -> rsp_mux_001:sink23_channel
	wire          mux_pipeline_055_source0_startofpacket;                                         // mux_pipeline_055:out_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          mux_pipeline_055_source0_endofpacket;                                           // mux_pipeline_055:out_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                       // rsp_demux_024:src0_valid -> mux_pipeline_056:in_valid
	wire  [116:0] rsp_demux_024_src0_data;                                                        // rsp_demux_024:src0_data -> mux_pipeline_056:in_data
	wire          rsp_demux_024_src0_ready;                                                       // mux_pipeline_056:in_ready -> rsp_demux_024:src0_ready
	wire   [26:0] rsp_demux_024_src0_channel;                                                     // rsp_demux_024:src0_channel -> mux_pipeline_056:in_channel
	wire          rsp_demux_024_src0_startofpacket;                                               // rsp_demux_024:src0_startofpacket -> mux_pipeline_056:in_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                 // rsp_demux_024:src0_endofpacket -> mux_pipeline_056:in_endofpacket
	wire          mux_pipeline_056_source0_valid;                                                 // mux_pipeline_056:out_valid -> rsp_mux_001:sink24_valid
	wire  [116:0] mux_pipeline_056_source0_data;                                                  // mux_pipeline_056:out_data -> rsp_mux_001:sink24_data
	wire          mux_pipeline_056_source0_ready;                                                 // rsp_mux_001:sink24_ready -> mux_pipeline_056:out_ready
	wire   [26:0] mux_pipeline_056_source0_channel;                                               // mux_pipeline_056:out_channel -> rsp_mux_001:sink24_channel
	wire          mux_pipeline_056_source0_startofpacket;                                         // mux_pipeline_056:out_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          mux_pipeline_056_source0_endofpacket;                                           // mux_pipeline_056:out_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                       // rsp_demux_025:src0_valid -> mux_pipeline_057:in_valid
	wire  [116:0] rsp_demux_025_src0_data;                                                        // rsp_demux_025:src0_data -> mux_pipeline_057:in_data
	wire          rsp_demux_025_src0_ready;                                                       // mux_pipeline_057:in_ready -> rsp_demux_025:src0_ready
	wire   [26:0] rsp_demux_025_src0_channel;                                                     // rsp_demux_025:src0_channel -> mux_pipeline_057:in_channel
	wire          rsp_demux_025_src0_startofpacket;                                               // rsp_demux_025:src0_startofpacket -> mux_pipeline_057:in_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                 // rsp_demux_025:src0_endofpacket -> mux_pipeline_057:in_endofpacket
	wire          mux_pipeline_057_source0_valid;                                                 // mux_pipeline_057:out_valid -> rsp_mux_001:sink25_valid
	wire  [116:0] mux_pipeline_057_source0_data;                                                  // mux_pipeline_057:out_data -> rsp_mux_001:sink25_data
	wire          mux_pipeline_057_source0_ready;                                                 // rsp_mux_001:sink25_ready -> mux_pipeline_057:out_ready
	wire   [26:0] mux_pipeline_057_source0_channel;                                               // mux_pipeline_057:out_channel -> rsp_mux_001:sink25_channel
	wire          mux_pipeline_057_source0_startofpacket;                                         // mux_pipeline_057:out_startofpacket -> rsp_mux_001:sink25_startofpacket
	wire          mux_pipeline_057_source0_endofpacket;                                           // mux_pipeline_057:out_endofpacket -> rsp_mux_001:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                       // rsp_demux_026:src0_valid -> mux_pipeline_058:in_valid
	wire  [116:0] rsp_demux_026_src0_data;                                                        // rsp_demux_026:src0_data -> mux_pipeline_058:in_data
	wire          rsp_demux_026_src0_ready;                                                       // mux_pipeline_058:in_ready -> rsp_demux_026:src0_ready
	wire   [26:0] rsp_demux_026_src0_channel;                                                     // rsp_demux_026:src0_channel -> mux_pipeline_058:in_channel
	wire          rsp_demux_026_src0_startofpacket;                                               // rsp_demux_026:src0_startofpacket -> mux_pipeline_058:in_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                 // rsp_demux_026:src0_endofpacket -> mux_pipeline_058:in_endofpacket
	wire          mux_pipeline_058_source0_valid;                                                 // mux_pipeline_058:out_valid -> rsp_mux_001:sink26_valid
	wire  [116:0] mux_pipeline_058_source0_data;                                                  // mux_pipeline_058:out_data -> rsp_mux_001:sink26_data
	wire          mux_pipeline_058_source0_ready;                                                 // rsp_mux_001:sink26_ready -> mux_pipeline_058:out_ready
	wire   [26:0] mux_pipeline_058_source0_channel;                                               // mux_pipeline_058:out_channel -> rsp_mux_001:sink26_channel
	wire          mux_pipeline_058_source0_startofpacket;                                         // mux_pipeline_058:out_startofpacket -> rsp_mux_001:sink26_startofpacket
	wire          mux_pipeline_058_source0_endofpacket;                                           // mux_pipeline_058:out_endofpacket -> rsp_mux_001:sink26_endofpacket
	wire          rsp_demux_src2_valid;                                                           // rsp_demux:src2_valid -> mux_pipeline_059:in_valid
	wire  [116:0] rsp_demux_src2_data;                                                            // rsp_demux:src2_data -> mux_pipeline_059:in_data
	wire          rsp_demux_src2_ready;                                                           // mux_pipeline_059:in_ready -> rsp_demux:src2_ready
	wire   [26:0] rsp_demux_src2_channel;                                                         // rsp_demux:src2_channel -> mux_pipeline_059:in_channel
	wire          rsp_demux_src2_startofpacket;                                                   // rsp_demux:src2_startofpacket -> mux_pipeline_059:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                     // rsp_demux:src2_endofpacket -> mux_pipeline_059:in_endofpacket
	wire          mux_pipeline_059_source0_valid;                                                 // mux_pipeline_059:out_valid -> rsp_mux_002:sink0_valid
	wire  [116:0] mux_pipeline_059_source0_data;                                                  // mux_pipeline_059:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_059_source0_ready;                                                 // rsp_mux_002:sink0_ready -> mux_pipeline_059:out_ready
	wire   [26:0] mux_pipeline_059_source0_channel;                                               // mux_pipeline_059:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_059_source0_startofpacket;                                         // mux_pipeline_059:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_059_source0_endofpacket;                                           // mux_pipeline_059:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                       // rsp_demux_001:src1_valid -> mux_pipeline_060:in_valid
	wire  [116:0] rsp_demux_001_src1_data;                                                        // rsp_demux_001:src1_data -> mux_pipeline_060:in_data
	wire          rsp_demux_001_src1_ready;                                                       // mux_pipeline_060:in_ready -> rsp_demux_001:src1_ready
	wire   [26:0] rsp_demux_001_src1_channel;                                                     // rsp_demux_001:src1_channel -> mux_pipeline_060:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                               // rsp_demux_001:src1_startofpacket -> mux_pipeline_060:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                 // rsp_demux_001:src1_endofpacket -> mux_pipeline_060:in_endofpacket
	wire          mux_pipeline_060_source0_valid;                                                 // mux_pipeline_060:out_valid -> rsp_mux_002:sink1_valid
	wire  [116:0] mux_pipeline_060_source0_data;                                                  // mux_pipeline_060:out_data -> rsp_mux_002:sink1_data
	wire          mux_pipeline_060_source0_ready;                                                 // rsp_mux_002:sink1_ready -> mux_pipeline_060:out_ready
	wire   [26:0] mux_pipeline_060_source0_channel;                                               // mux_pipeline_060:out_channel -> rsp_mux_002:sink1_channel
	wire          mux_pipeline_060_source0_startofpacket;                                         // mux_pipeline_060:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          mux_pipeline_060_source0_endofpacket;                                           // mux_pipeline_060:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                       // rsp_demux_002:src1_valid -> mux_pipeline_061:in_valid
	wire  [116:0] rsp_demux_002_src1_data;                                                        // rsp_demux_002:src1_data -> mux_pipeline_061:in_data
	wire          rsp_demux_002_src1_ready;                                                       // mux_pipeline_061:in_ready -> rsp_demux_002:src1_ready
	wire   [26:0] rsp_demux_002_src1_channel;                                                     // rsp_demux_002:src1_channel -> mux_pipeline_061:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                               // rsp_demux_002:src1_startofpacket -> mux_pipeline_061:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                 // rsp_demux_002:src1_endofpacket -> mux_pipeline_061:in_endofpacket
	wire          mux_pipeline_061_source0_valid;                                                 // mux_pipeline_061:out_valid -> rsp_mux_002:sink2_valid
	wire  [116:0] mux_pipeline_061_source0_data;                                                  // mux_pipeline_061:out_data -> rsp_mux_002:sink2_data
	wire          mux_pipeline_061_source0_ready;                                                 // rsp_mux_002:sink2_ready -> mux_pipeline_061:out_ready
	wire   [26:0] mux_pipeline_061_source0_channel;                                               // mux_pipeline_061:out_channel -> rsp_mux_002:sink2_channel
	wire          mux_pipeline_061_source0_startofpacket;                                         // mux_pipeline_061:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          mux_pipeline_061_source0_endofpacket;                                           // mux_pipeline_061:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                            // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                             // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                  // avalon_st_adapter:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                   // avalon_st_adapter:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                  // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                  // avalon_st_adapter:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          epcs_epcs_control_port_agent_rdata_fifo_src_valid;                              // epcs_epcs_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] epcs_epcs_control_port_agent_rdata_fifo_src_data;                               // epcs_epcs_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          epcs_epcs_control_port_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> epcs_epcs_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                              // avalon_st_adapter_001:out_0_valid -> epcs_epcs_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                               // avalon_st_adapter_001:out_0_data -> epcs_epcs_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                              // epcs_epcs_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                              // avalon_st_adapter_001:out_0_error -> epcs_epcs_control_port_agent:rdata_fifo_sink_error
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                               // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                                // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_002:in_0_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                              // avalon_st_adapter_002:out_0_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                               // avalon_st_adapter_002:out_0_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                              // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                              // avalon_st_adapter_002:out_0_error -> cpu_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                          // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_003:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                              // avalon_st_adapter_003:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                               // avalon_st_adapter_003:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                              // avalon_st_adapter_003:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid;                          // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data;                           // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                              // avalon_st_adapter_004:out_0_valid -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                               // avalon_st_adapter_004:out_0_data -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                              // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                              // avalon_st_adapter_004:out_0_error -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                 // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                  // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_005:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                              // avalon_st_adapter_005:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                               // avalon_st_adapter_005:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                              // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                              // avalon_st_adapter_005:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          f_engine_frac_cpu_agent_rdata_fifo_src_valid;                                   // f_engine_frac_cpu_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] f_engine_frac_cpu_agent_rdata_fifo_src_data;                                    // f_engine_frac_cpu_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          f_engine_frac_cpu_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_006:in_0_ready -> f_engine_frac_cpu_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                              // avalon_st_adapter_006:out_0_valid -> f_engine_frac_cpu_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                               // avalon_st_adapter_006:out_0_data -> f_engine_frac_cpu_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                              // f_engine_frac_cpu_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                              // avalon_st_adapter_006:out_0_error -> f_engine_frac_cpu_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                          // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                           // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_007:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                              // avalon_st_adapter_007:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                               // avalon_st_adapter_007:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                              // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                              // avalon_st_adapter_007:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          pio_led_green_s1_agent_rdata_fifo_src_valid;                                    // pio_led_green_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pio_led_green_s1_agent_rdata_fifo_src_data;                                     // pio_led_green_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          pio_led_green_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_008:in_0_ready -> pio_led_green_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                              // avalon_st_adapter_008:out_0_valid -> pio_led_green_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                               // avalon_st_adapter_008:out_0_data -> pio_led_green_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                              // pio_led_green_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                              // avalon_st_adapter_008:out_0_error -> pio_led_green_s1_agent:rdata_fifo_sink_error
	wire          pio_sw_s1_agent_rdata_fifo_src_valid;                                           // pio_sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] pio_sw_s1_agent_rdata_fifo_src_data;                                            // pio_sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          pio_sw_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_009:in_0_ready -> pio_sw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                              // avalon_st_adapter_009:out_0_valid -> pio_sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                               // avalon_st_adapter_009:out_0_data -> pio_sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                              // pio_sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                              // avalon_st_adapter_009:out_0_error -> pio_sw_s1_agent:rdata_fifo_sink_error
	wire          touch_panel_busy_s1_agent_rdata_fifo_src_valid;                                 // touch_panel_busy_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] touch_panel_busy_s1_agent_rdata_fifo_src_data;                                  // touch_panel_busy_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          touch_panel_busy_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_010:in_0_ready -> touch_panel_busy_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                              // avalon_st_adapter_010:out_0_valid -> touch_panel_busy_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                               // avalon_st_adapter_010:out_0_data -> touch_panel_busy_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                              // touch_panel_busy_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                              // avalon_st_adapter_010:out_0_error -> touch_panel_busy_s1_agent:rdata_fifo_sink_error
	wire          touch_panel_penirq_n_s1_agent_rdata_fifo_src_valid;                             // touch_panel_penirq_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] touch_panel_penirq_n_s1_agent_rdata_fifo_src_data;                              // touch_panel_penirq_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          touch_panel_penirq_n_s1_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_011:in_0_ready -> touch_panel_penirq_n_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                              // avalon_st_adapter_011:out_0_valid -> touch_panel_penirq_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                               // avalon_st_adapter_011:out_0_data -> touch_panel_penirq_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                              // touch_panel_penirq_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                              // avalon_st_adapter_011:out_0_error -> touch_panel_penirq_n_s1_agent:rdata_fifo_sink_error
	wire          boton_a_s1_agent_rdata_fifo_src_valid;                                          // boton_a_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] boton_a_s1_agent_rdata_fifo_src_data;                                           // boton_a_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          boton_a_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_012:in_0_ready -> boton_a_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                              // avalon_st_adapter_012:out_0_valid -> boton_a_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                               // avalon_st_adapter_012:out_0_data -> boton_a_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                              // boton_a_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                              // avalon_st_adapter_012:out_0_error -> boton_a_s1_agent:rdata_fifo_sink_error
	wire          boton_b_s1_agent_rdata_fifo_src_valid;                                          // boton_b_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] boton_b_s1_agent_rdata_fifo_src_data;                                           // boton_b_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          boton_b_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_013:in_0_ready -> boton_b_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                              // avalon_st_adapter_013:out_0_valid -> boton_b_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                               // avalon_st_adapter_013:out_0_data -> boton_b_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                              // boton_b_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                              // avalon_st_adapter_013:out_0_error -> boton_b_s1_agent:rdata_fifo_sink_error
	wire          boton_x_s1_agent_rdata_fifo_src_valid;                                          // boton_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] boton_x_s1_agent_rdata_fifo_src_data;                                           // boton_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          boton_x_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_014:in_0_ready -> boton_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                              // avalon_st_adapter_014:out_0_valid -> boton_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                               // avalon_st_adapter_014:out_0_data -> boton_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                              // boton_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                              // avalon_st_adapter_014:out_0_error -> boton_x_s1_agent:rdata_fifo_sink_error
	wire          boton_y_s1_agent_rdata_fifo_src_valid;                                          // boton_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] boton_y_s1_agent_rdata_fifo_src_data;                                           // boton_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          boton_y_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_015:in_0_ready -> boton_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                              // avalon_st_adapter_015:out_0_valid -> boton_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                               // avalon_st_adapter_015:out_0_data -> boton_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                              // boton_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                              // avalon_st_adapter_015:out_0_error -> boton_y_s1_agent:rdata_fifo_sink_error
	wire          boton_l_s1_agent_rdata_fifo_src_valid;                                          // boton_l_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] boton_l_s1_agent_rdata_fifo_src_data;                                           // boton_l_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          boton_l_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_016:in_0_ready -> boton_l_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                              // avalon_st_adapter_016:out_0_valid -> boton_l_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                               // avalon_st_adapter_016:out_0_data -> boton_l_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                              // boton_l_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                              // avalon_st_adapter_016:out_0_error -> boton_l_s1_agent:rdata_fifo_sink_error
	wire          boton_r_s1_agent_rdata_fifo_src_valid;                                          // boton_r_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] boton_r_s1_agent_rdata_fifo_src_data;                                           // boton_r_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          boton_r_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_017:in_0_ready -> boton_r_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                              // avalon_st_adapter_017:out_0_valid -> boton_r_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                               // avalon_st_adapter_017:out_0_data -> boton_r_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                              // boton_r_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                              // avalon_st_adapter_017:out_0_error -> boton_r_s1_agent:rdata_fifo_sink_error
	wire          boton_up_s1_agent_rdata_fifo_src_valid;                                         // boton_up_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] boton_up_s1_agent_rdata_fifo_src_data;                                          // boton_up_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          boton_up_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_018:in_0_ready -> boton_up_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                              // avalon_st_adapter_018:out_0_valid -> boton_up_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                               // avalon_st_adapter_018:out_0_data -> boton_up_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                              // boton_up_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                              // avalon_st_adapter_018:out_0_error -> boton_up_s1_agent:rdata_fifo_sink_error
	wire          boton_down_s1_agent_rdata_fifo_src_valid;                                       // boton_down_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] boton_down_s1_agent_rdata_fifo_src_data;                                        // boton_down_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          boton_down_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_019:in_0_ready -> boton_down_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                              // avalon_st_adapter_019:out_0_valid -> boton_down_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                               // avalon_st_adapter_019:out_0_data -> boton_down_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                              // boton_down_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                              // avalon_st_adapter_019:out_0_error -> boton_down_s1_agent:rdata_fifo_sink_error
	wire          boton_left_s1_agent_rdata_fifo_src_valid;                                       // boton_left_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] boton_left_s1_agent_rdata_fifo_src_data;                                        // boton_left_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          boton_left_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_020:in_0_ready -> boton_left_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                              // avalon_st_adapter_020:out_0_valid -> boton_left_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                               // avalon_st_adapter_020:out_0_data -> boton_left_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                              // boton_left_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                              // avalon_st_adapter_020:out_0_error -> boton_left_s1_agent:rdata_fifo_sink_error
	wire          boton_right_s1_agent_rdata_fifo_src_valid;                                      // boton_right_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] boton_right_s1_agent_rdata_fifo_src_data;                                       // boton_right_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          boton_right_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_021:in_0_ready -> boton_right_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                              // avalon_st_adapter_021:out_0_valid -> boton_right_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                               // avalon_st_adapter_021:out_0_data -> boton_right_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                              // boton_right_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                              // avalon_st_adapter_021:out_0_error -> boton_right_s1_agent:rdata_fifo_sink_error
	wire          analog1_x_s1_agent_rdata_fifo_src_valid;                                        // analog1_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] analog1_x_s1_agent_rdata_fifo_src_data;                                         // analog1_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          analog1_x_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_022:in_0_ready -> analog1_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                              // avalon_st_adapter_022:out_0_valid -> analog1_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                               // avalon_st_adapter_022:out_0_data -> analog1_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                              // analog1_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                              // avalon_st_adapter_022:out_0_error -> analog1_x_s1_agent:rdata_fifo_sink_error
	wire          analog1_y_s1_agent_rdata_fifo_src_valid;                                        // analog1_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] analog1_y_s1_agent_rdata_fifo_src_data;                                         // analog1_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          analog1_y_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_023:in_0_ready -> analog1_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                              // avalon_st_adapter_023:out_0_valid -> analog1_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                               // avalon_st_adapter_023:out_0_data -> analog1_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                              // analog1_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                              // avalon_st_adapter_023:out_0_error -> analog1_y_s1_agent:rdata_fifo_sink_error
	wire          analog2_x_s1_agent_rdata_fifo_src_valid;                                        // analog2_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] analog2_x_s1_agent_rdata_fifo_src_data;                                         // analog2_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          analog2_x_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_024:in_0_ready -> analog2_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                              // avalon_st_adapter_024:out_0_valid -> analog2_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                               // avalon_st_adapter_024:out_0_data -> analog2_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                              // analog2_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                              // avalon_st_adapter_024:out_0_error -> analog2_x_s1_agent:rdata_fifo_sink_error
	wire          analog2_y_s1_agent_rdata_fifo_src_valid;                                        // analog2_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] analog2_y_s1_agent_rdata_fifo_src_data;                                         // analog2_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          analog2_y_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_025:in_0_ready -> analog2_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                              // avalon_st_adapter_025:out_0_valid -> analog2_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                               // avalon_st_adapter_025:out_0_data -> analog2_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                              // analog2_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                              // avalon_st_adapter_025:out_0_error -> analog2_y_s1_agent:rdata_fifo_sink_error
	wire          touch_panel_spi_spi_control_port_agent_rdata_fifo_src_valid;                    // touch_panel_spi_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] touch_panel_spi_spi_control_port_agent_rdata_fifo_src_data;                     // touch_panel_spi_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          touch_panel_spi_spi_control_port_agent_rdata_fifo_src_ready;                    // avalon_st_adapter_026:in_0_ready -> touch_panel_spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                              // avalon_st_adapter_026:out_0_valid -> touch_panel_spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                               // avalon_st_adapter_026:out_0_data -> touch_panel_spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                              // touch_panel_spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                              // avalon_st_adapter_026:out_0_error -> touch_panel_spi_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) alt_vip_vfr_0_avalon_master_translator (
		.clk                    (clk_sys_clk_clk),                                                                //                       clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (alt_vip_vfr_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (alt_vip_vfr_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (alt_vip_vfr_0_avalon_master_burstcount),                                         //                          .burstcount
		.av_read                (alt_vip_vfr_0_avalon_master_read),                                               //                          .read
		.av_readdata            (alt_vip_vfr_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (alt_vip_vfr_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_write               (1'b0),                                                                           //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                    (clk_sys_clk_clk),                                                    //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_readdatavalid       (),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clk_sys_clk_clk),                                                           //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_sys_clk_clk),                         //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                          //                         .write
		.av_read                (sdram_s1_read),                           //                         .read
		.av_readdata            (sdram_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_epcs_control_port_translator (
		.clk                    (clk_sys_clk_clk),                               //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (epcs_epcs_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_epcs_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (epcs_epcs_control_port_agent_m0_read),          //                         .read
		.uav_write              (epcs_epcs_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (epcs_epcs_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (epcs_epcs_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (epcs_epcs_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (epcs_epcs_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (epcs_epcs_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (epcs_epcs_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (epcs_epcs_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (epcs_epcs_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (epcs_epcs_control_port_write),                  //                         .write
		.av_read                (epcs_epcs_control_port_read),                   //                         .read
		.av_readdata            (epcs_epcs_control_port_readdata),               //                         .readdata
		.av_writedata           (epcs_epcs_control_port_writedata),              //                         .writedata
		.av_chipselect          (epcs_epcs_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                    (clk_sys_clk_clk),                              //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata            (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                            //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                             //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                         //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),                        //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),                      //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_0_avalon_slave_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_vfr_0_avalon_slave_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (alt_vip_vfr_0_avalon_slave_agent_m0_read),                     //                         .read
		.uav_write              (alt_vip_vfr_0_avalon_slave_agent_m0_write),                    //                         .write
		.uav_waitrequest        (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),                //                         .writedata
		.uav_lock               (alt_vip_vfr_0_avalon_slave_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (alt_vip_vfr_0_avalon_slave_address),                           //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_0_avalon_slave_write),                             //                         .write
		.av_read                (alt_vip_vfr_0_avalon_slave_read),                              //                         .read
		.av_readdata            (alt_vip_vfr_0_avalon_slave_readdata),                          //                         .readdata
		.av_writedata           (alt_vip_vfr_0_avalon_slave_writedata),                         //                         .writedata
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (clk_sys_clk_clk),                            //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f_engine_frac_cpu_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (f_engine_frac_cpu_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (f_engine_frac_cpu_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (f_engine_frac_cpu_agent_m0_read),                              //                         .read
		.uav_write              (f_engine_frac_cpu_agent_m0_write),                             //                         .write
		.uav_waitrequest        (f_engine_frac_cpu_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (f_engine_frac_cpu_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (f_engine_frac_cpu_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (f_engine_frac_cpu_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (f_engine_frac_cpu_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (f_engine_frac_cpu_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (f_engine_frac_cpu_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (f_engine_frac_cpu_address),                                    //      avalon_anti_slave_0.address
		.av_write               (f_engine_frac_cpu_write),                                      //                         .write
		.av_readdata            (f_engine_frac_cpu_readdata),                                   //                         .readdata
		.av_writedata           (f_engine_frac_cpu_writedata),                                  //                         .writedata
		.av_chipselect          (f_engine_frac_cpu_chipselect),                                 //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_sys_clk_clk),                         //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_0_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                        //                         .write
		.av_readdata            (timer_0_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_green_s1_translator (
		.clk                    (clk_sys_clk_clk),                         //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_led_green_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pio_led_green_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pio_led_green_s1_agent_m0_read),          //                         .read
		.uav_write              (pio_led_green_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (pio_led_green_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pio_led_green_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pio_led_green_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pio_led_green_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pio_led_green_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pio_led_green_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pio_led_green_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pio_led_green_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (pio_led_green_s1_write),                  //                         .write
		.av_readdata            (pio_led_green_s1_readdata),               //                         .readdata
		.av_writedata           (pio_led_green_s1_writedata),              //                         .writedata
		.av_chipselect          (pio_led_green_s1_chipselect),             //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_sw_s1_translator (
		.clk                    (clk_sys_clk_clk),                         //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_sw_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (pio_sw_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (pio_sw_s1_agent_m0_read),                 //                         .read
		.uav_write              (pio_sw_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (pio_sw_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (pio_sw_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (pio_sw_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (pio_sw_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (pio_sw_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (pio_sw_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (pio_sw_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (pio_sw_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (pio_sw_s1_readdata),                      //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) touch_panel_busy_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (touch_panel_busy_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (touch_panel_busy_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (touch_panel_busy_s1_agent_m0_read),                            //                         .read
		.uav_write              (touch_panel_busy_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (touch_panel_busy_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (touch_panel_busy_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (touch_panel_busy_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (touch_panel_busy_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (touch_panel_busy_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (touch_panel_busy_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (touch_panel_busy_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (touch_panel_busy_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (touch_panel_busy_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) touch_panel_penirq_n_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (touch_panel_penirq_n_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (touch_panel_penirq_n_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (touch_panel_penirq_n_s1_agent_m0_read),                        //                         .read
		.uav_write              (touch_panel_penirq_n_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (touch_panel_penirq_n_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (touch_panel_penirq_n_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (touch_panel_penirq_n_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (touch_panel_penirq_n_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (touch_panel_penirq_n_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (touch_panel_penirq_n_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (touch_panel_penirq_n_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (touch_panel_penirq_n_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (touch_panel_penirq_n_s1_write),                                //                         .write
		.av_readdata            (touch_panel_penirq_n_s1_readdata),                             //                         .readdata
		.av_writedata           (touch_panel_penirq_n_s1_writedata),                            //                         .writedata
		.av_chipselect          (touch_panel_penirq_n_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_a_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_a_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_a_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_a_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_a_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_a_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_a_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_a_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_a_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_a_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_a_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_a_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_a_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_a_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_b_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_b_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_b_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_b_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_b_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_b_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_b_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_b_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_b_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_b_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_b_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_b_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_b_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_b_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_x_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_x_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_x_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_x_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_x_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_x_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_x_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_x_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_x_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_x_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_x_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_x_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_x_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_x_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_y_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_y_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_y_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_y_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_y_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_y_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_y_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_y_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_y_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_y_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_y_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_y_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_y_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_y_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_l_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_l_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_l_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_l_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_l_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_l_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_l_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_l_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_l_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_l_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_l_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_l_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_l_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_l_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_r_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_r_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (boton_r_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (boton_r_s1_agent_m0_read),                                     //                         .read
		.uav_write              (boton_r_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (boton_r_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (boton_r_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (boton_r_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (boton_r_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (boton_r_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (boton_r_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (boton_r_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (boton_r_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (boton_r_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_up_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_up_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (boton_up_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (boton_up_s1_agent_m0_read),                                    //                         .read
		.uav_write              (boton_up_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (boton_up_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (boton_up_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (boton_up_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (boton_up_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (boton_up_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (boton_up_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (boton_up_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (boton_up_s1_address),                                          //      avalon_anti_slave_0.address
		.av_readdata            (boton_up_s1_readdata),                                         //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_down_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_down_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (boton_down_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (boton_down_s1_agent_m0_read),                                  //                         .read
		.uav_write              (boton_down_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (boton_down_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (boton_down_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (boton_down_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (boton_down_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (boton_down_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (boton_down_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (boton_down_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (boton_down_s1_address),                                        //      avalon_anti_slave_0.address
		.av_readdata            (boton_down_s1_readdata),                                       //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_left_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_left_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (boton_left_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (boton_left_s1_agent_m0_read),                                  //                         .read
		.uav_write              (boton_left_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (boton_left_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (boton_left_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (boton_left_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (boton_left_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (boton_left_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (boton_left_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (boton_left_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (boton_left_s1_address),                                        //      avalon_anti_slave_0.address
		.av_readdata            (boton_left_s1_readdata),                                       //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boton_right_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boton_right_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (boton_right_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (boton_right_s1_agent_m0_read),                                 //                         .read
		.uav_write              (boton_right_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (boton_right_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (boton_right_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (boton_right_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (boton_right_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (boton_right_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (boton_right_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (boton_right_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (boton_right_s1_address),                                       //      avalon_anti_slave_0.address
		.av_readdata            (boton_right_s1_readdata),                                      //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) analog1_x_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (analog1_x_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (analog1_x_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (analog1_x_s1_agent_m0_read),                                   //                         .read
		.uav_write              (analog1_x_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (analog1_x_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (analog1_x_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (analog1_x_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (analog1_x_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (analog1_x_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (analog1_x_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (analog1_x_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (analog1_x_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (analog1_x_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) analog1_y_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (analog1_y_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (analog1_y_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (analog1_y_s1_agent_m0_read),                                   //                         .read
		.uav_write              (analog1_y_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (analog1_y_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (analog1_y_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (analog1_y_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (analog1_y_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (analog1_y_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (analog1_y_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (analog1_y_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (analog1_y_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (analog1_y_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) analog2_x_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (analog2_x_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (analog2_x_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (analog2_x_s1_agent_m0_read),                                   //                         .read
		.uav_write              (analog2_x_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (analog2_x_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (analog2_x_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (analog2_x_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (analog2_x_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (analog2_x_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (analog2_x_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (analog2_x_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (analog2_x_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (analog2_x_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) analog2_y_s1_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (analog2_y_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (analog2_y_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (analog2_y_s1_agent_m0_read),                                   //                         .read
		.uav_write              (analog2_y_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (analog2_y_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (analog2_y_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (analog2_y_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (analog2_y_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (analog2_y_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (analog2_y_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (analog2_y_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (analog2_y_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (analog2_y_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) touch_panel_spi_spi_control_port_translator (
		.clk                    (clk_sys_clk_clk),                                              //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (touch_panel_spi_spi_control_port_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (touch_panel_spi_spi_control_port_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (touch_panel_spi_spi_control_port_agent_m0_read),               //                         .read
		.uav_write              (touch_panel_spi_spi_control_port_agent_m0_write),              //                         .write
		.uav_waitrequest        (touch_panel_spi_spi_control_port_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (touch_panel_spi_spi_control_port_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (touch_panel_spi_spi_control_port_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (touch_panel_spi_spi_control_port_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (touch_panel_spi_spi_control_port_agent_m0_writedata),          //                         .writedata
		.uav_lock               (touch_panel_spi_spi_control_port_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (touch_panel_spi_spi_control_port_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (touch_panel_spi_spi_control_port_address),                     //      avalon_anti_slave_0.address
		.av_write               (touch_panel_spi_spi_control_port_write),                       //                         .write
		.av_read                (touch_panel_spi_spi_control_port_read),                        //                         .read
		.av_readdata            (touch_panel_spi_spi_control_port_readdata),                    //                         .readdata
		.av_writedata           (touch_panel_spi_spi_control_port_writedata),                   //                         .writedata
		.av_chipselect          (touch_panel_spi_spi_control_port_chipselect),                  //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alt_vip_vfr_0_avalon_master_agent (
		.clk                   (clk_sys_clk_clk),                                                                //       clk.clk
		.reset                 (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (alt_vip_vfr_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (alt_vip_vfr_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (alt_vip_vfr_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (alt_vip_vfr_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (alt_vip_vfr_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (alt_vip_vfr_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clk_sys_clk_clk),                                                    //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clk_sys_clk_clk),                                                           //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_sys_clk_clk),                           //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),            //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_sys_clk_clk),                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcs_epcs_control_port_agent (
		.clk                     (clk_sys_clk_clk),                                         //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (epcs_epcs_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epcs_epcs_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epcs_epcs_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epcs_epcs_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epcs_epcs_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (epcs_epcs_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epcs_epcs_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epcs_epcs_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (epcs_epcs_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epcs_epcs_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (epcs_epcs_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (epcs_epcs_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epcs_epcs_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (epcs_epcs_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (epcs_epcs_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (epcs_epcs_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                        //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                        //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                         //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                  //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                      //                .channel
		.rf_sink_ready           (epcs_epcs_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epcs_epcs_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epcs_epcs_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epcs_epcs_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epcs_epcs_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epcs_epcs_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epcs_epcs_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epcs_epcs_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (epcs_epcs_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_epcs_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epcs_epcs_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_epcs_control_port_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (epcs_epcs_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (epcs_epcs_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (epcs_epcs_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epcs_epcs_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epcs_epcs_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epcs_epcs_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epcs_epcs_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epcs_epcs_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_sys_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                     //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                           //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_0_avalon_slave_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (alt_vip_vfr_0_avalon_slave_agent_m0_address),                  //              m0.address
		.m0_burstcount           (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (alt_vip_vfr_0_avalon_slave_agent_m0_lock),                     //                .lock
		.m0_readdata             (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (alt_vip_vfr_0_avalon_slave_agent_m0_read),                     //                .read
		.m0_waitrequest          (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),                //                .writedata
		.m0_write                (alt_vip_vfr_0_avalon_slave_agent_m0_write),                    //                .write
		.rp_endofpacket          (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_0_avalon_slave_agent_rp_ready),                    //                .ready
		.rp_valid                (alt_vip_vfr_0_avalon_slave_agent_rp_valid),                    //                .valid
		.rp_data                 (alt_vip_vfr_0_avalon_slave_agent_rp_data),                     //                .data
		.rp_startofpacket        (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                           //                .channel
		.rf_sink_ready           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),              //        in.data
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),             //          .valid
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (clk_sys_clk_clk),                                      //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                   //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                      //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f_engine_frac_cpu_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (f_engine_frac_cpu_agent_m0_address),                           //              m0.address
		.m0_burstcount           (f_engine_frac_cpu_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (f_engine_frac_cpu_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (f_engine_frac_cpu_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (f_engine_frac_cpu_agent_m0_lock),                              //                .lock
		.m0_readdata             (f_engine_frac_cpu_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (f_engine_frac_cpu_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (f_engine_frac_cpu_agent_m0_read),                              //                .read
		.m0_waitrequest          (f_engine_frac_cpu_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (f_engine_frac_cpu_agent_m0_writedata),                         //                .writedata
		.m0_write                (f_engine_frac_cpu_agent_m0_write),                             //                .write
		.rp_endofpacket          (f_engine_frac_cpu_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (f_engine_frac_cpu_agent_rp_ready),                             //                .ready
		.rp_valid                (f_engine_frac_cpu_agent_rp_valid),                             //                .valid
		.rp_data                 (f_engine_frac_cpu_agent_rp_data),                              //                .data
		.rp_startofpacket        (f_engine_frac_cpu_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                           //                .channel
		.rf_sink_ready           (f_engine_frac_cpu_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (f_engine_frac_cpu_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (f_engine_frac_cpu_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (f_engine_frac_cpu_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (f_engine_frac_cpu_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (f_engine_frac_cpu_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (f_engine_frac_cpu_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (f_engine_frac_cpu_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (f_engine_frac_cpu_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (f_engine_frac_cpu_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (f_engine_frac_cpu_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f_engine_frac_cpu_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (f_engine_frac_cpu_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f_engine_frac_cpu_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (f_engine_frac_cpu_agent_rf_source_data),                       //        in.data
		.in_valid          (f_engine_frac_cpu_agent_rf_source_valid),                      //          .valid
		.in_ready          (f_engine_frac_cpu_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (f_engine_frac_cpu_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (f_engine_frac_cpu_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (f_engine_frac_cpu_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (f_engine_frac_cpu_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (f_engine_frac_cpu_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (f_engine_frac_cpu_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (f_engine_frac_cpu_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_sys_clk_clk),                             //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_014_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),          //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                             //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_led_green_s1_agent (
		.clk                     (clk_sys_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (pio_led_green_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_led_green_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_led_green_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_led_green_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_led_green_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_led_green_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_led_green_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_led_green_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_led_green_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_led_green_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_led_green_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_led_green_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_led_green_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_led_green_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_led_green_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_led_green_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),                  //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),                  //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),                   //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),            //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),                //                .channel
		.rf_sink_ready           (pio_led_green_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_led_green_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_led_green_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_led_green_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_led_green_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_led_green_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_led_green_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_led_green_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_led_green_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_led_green_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pio_led_green_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_green_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_led_green_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_green_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (pio_led_green_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_led_green_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_led_green_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_led_green_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_led_green_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_led_green_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_led_green_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_led_green_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_led_green_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_led_green_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_sw_s1_agent (
		.clk                     (clk_sys_clk_clk),                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pio_sw_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_sw_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_sw_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_sw_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_sw_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_sw_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_sw_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_sw_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_sw_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_sw_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_sw_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_sw_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_sw_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_sw_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_sw_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_sw_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),           //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),           //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),            //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),     //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),         //                .channel
		.rf_sink_ready           (pio_sw_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_sw_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_sw_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_sw_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_sw_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_sw_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_sw_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_sw_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_sw_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_sw_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),          //                .error
		.rdata_fifo_src_ready    (pio_sw_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_sw_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_sw_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_sw_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pio_sw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_sw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_sw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_sw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_sw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_sw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_sw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_sw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_sw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_sw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) touch_panel_busy_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (touch_panel_busy_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (touch_panel_busy_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (touch_panel_busy_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (touch_panel_busy_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (touch_panel_busy_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (touch_panel_busy_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (touch_panel_busy_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (touch_panel_busy_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (touch_panel_busy_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (touch_panel_busy_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (touch_panel_busy_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (touch_panel_busy_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (touch_panel_busy_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (touch_panel_busy_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (touch_panel_busy_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (touch_panel_busy_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_020_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_020_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_020_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_020_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_020_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_020_source0_channel),                           //                .channel
		.rf_sink_ready           (touch_panel_busy_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (touch_panel_busy_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (touch_panel_busy_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (touch_panel_busy_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (touch_panel_busy_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (touch_panel_busy_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (touch_panel_busy_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (touch_panel_busy_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (touch_panel_busy_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (touch_panel_busy_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (touch_panel_busy_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (touch_panel_busy_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (touch_panel_busy_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) touch_panel_busy_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (touch_panel_busy_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (touch_panel_busy_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (touch_panel_busy_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (touch_panel_busy_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (touch_panel_busy_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (touch_panel_busy_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (touch_panel_busy_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (touch_panel_busy_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (touch_panel_busy_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (touch_panel_busy_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) touch_panel_penirq_n_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (touch_panel_penirq_n_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (touch_panel_penirq_n_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (touch_panel_penirq_n_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (touch_panel_penirq_n_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (touch_panel_penirq_n_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (touch_panel_penirq_n_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (touch_panel_penirq_n_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (touch_panel_penirq_n_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (touch_panel_penirq_n_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (touch_panel_penirq_n_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (touch_panel_penirq_n_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (touch_panel_penirq_n_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (touch_panel_penirq_n_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (touch_panel_penirq_n_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (touch_panel_penirq_n_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (touch_panel_penirq_n_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (agent_pipeline_022_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_022_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_022_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_022_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_022_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_022_source0_channel),                           //                .channel
		.rf_sink_ready           (touch_panel_penirq_n_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (touch_panel_penirq_n_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (touch_panel_penirq_n_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (touch_panel_penirq_n_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (touch_panel_penirq_n_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (touch_panel_penirq_n_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (touch_panel_penirq_n_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (touch_panel_penirq_n_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (touch_panel_penirq_n_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (touch_panel_penirq_n_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (touch_panel_penirq_n_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (touch_panel_penirq_n_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (touch_panel_penirq_n_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) touch_panel_penirq_n_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (touch_panel_penirq_n_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (touch_panel_penirq_n_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (touch_panel_penirq_n_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (touch_panel_penirq_n_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (touch_panel_penirq_n_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (touch_panel_penirq_n_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (touch_panel_penirq_n_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (touch_panel_penirq_n_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (touch_panel_penirq_n_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (touch_panel_penirq_n_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_a_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_a_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_a_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_a_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_a_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_a_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_a_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_a_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_a_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_a_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_a_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_a_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_a_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_a_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_a_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_a_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_a_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_024_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_024_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_024_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_024_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_024_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_024_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_a_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_a_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_a_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_a_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_a_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_a_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_a_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_a_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_a_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_a_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_a_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_a_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_a_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_a_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_a_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_a_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_a_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_a_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_a_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_a_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_a_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_a_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_a_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_a_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_b_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_b_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_b_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_b_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_b_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_b_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_b_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_b_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_b_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_b_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_b_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_b_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_b_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_b_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_b_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_b_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_b_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_026_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_026_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_026_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_026_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_026_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_026_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_b_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_b_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_b_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_b_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_b_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_b_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_b_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_b_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_b_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_b_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_b_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_b_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_b_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_b_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_b_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_b_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_b_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_b_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_b_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_b_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_b_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_b_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_b_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_b_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_x_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_x_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_x_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_x_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_x_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_x_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_x_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_x_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_x_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_x_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_x_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_x_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_x_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_x_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_x_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_x_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_x_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_028_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_028_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_028_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_028_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_028_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_028_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_x_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_x_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_x_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_x_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_x_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_x_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_x_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_x_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_x_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_x_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_x_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_x_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_x_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_x_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_x_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_x_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_x_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_x_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_x_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_x_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_x_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_x_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_x_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_x_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_y_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_y_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_y_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_y_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_y_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_y_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_y_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_y_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_y_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_y_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_y_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_y_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_y_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_y_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_y_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_y_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_y_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_030_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_030_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_030_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_030_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_030_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_030_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_y_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_y_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_y_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_y_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_y_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_y_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_y_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_y_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_y_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_y_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_y_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_y_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_y_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_y_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_y_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_y_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_y_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_y_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_y_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_y_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_y_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_y_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_y_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_y_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_l_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_l_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_l_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_l_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_l_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_l_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_l_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_l_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_l_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_l_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_l_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_l_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_l_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_l_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_l_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_l_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_l_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_032_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_032_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_032_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_032_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_032_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_032_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_l_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_l_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_l_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_l_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_l_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_l_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_l_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_l_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_l_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_l_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_l_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_l_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_l_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_l_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_l_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_l_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_l_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_l_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_l_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_l_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_l_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_l_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_l_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_l_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_r_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_r_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (boton_r_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (boton_r_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (boton_r_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (boton_r_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (boton_r_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (boton_r_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (boton_r_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (boton_r_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (boton_r_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (boton_r_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (boton_r_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (boton_r_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (boton_r_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (boton_r_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (boton_r_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_034_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_034_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_034_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_034_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_034_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_034_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_r_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (boton_r_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (boton_r_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (boton_r_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (boton_r_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (boton_r_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (boton_r_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (boton_r_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (boton_r_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (boton_r_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_r_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_r_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (boton_r_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_r_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_r_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (boton_r_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (boton_r_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (boton_r_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (boton_r_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (boton_r_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (boton_r_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (boton_r_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (boton_r_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (boton_r_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_up_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_up_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (boton_up_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (boton_up_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (boton_up_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (boton_up_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (boton_up_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (boton_up_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (boton_up_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (boton_up_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (boton_up_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (boton_up_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (boton_up_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (boton_up_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (boton_up_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (boton_up_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (boton_up_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (agent_pipeline_036_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_036_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_036_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_036_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_036_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_036_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_up_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (boton_up_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (boton_up_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (boton_up_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (boton_up_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (boton_up_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (boton_up_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (boton_up_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (boton_up_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (boton_up_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_up_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_up_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (boton_up_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_up_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_up_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (boton_up_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (boton_up_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (boton_up_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (boton_up_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (boton_up_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (boton_up_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (boton_up_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (boton_up_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (boton_up_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_down_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_down_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (boton_down_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (boton_down_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (boton_down_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (boton_down_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (boton_down_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (boton_down_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (boton_down_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (boton_down_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (boton_down_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (boton_down_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (boton_down_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (boton_down_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (boton_down_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (boton_down_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (boton_down_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (agent_pipeline_038_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_038_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_038_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_038_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_038_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_038_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_down_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (boton_down_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (boton_down_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (boton_down_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (boton_down_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (boton_down_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (boton_down_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (boton_down_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (boton_down_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (boton_down_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_down_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_down_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (boton_down_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_down_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_down_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (boton_down_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (boton_down_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (boton_down_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (boton_down_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (boton_down_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (boton_down_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (boton_down_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (boton_down_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (boton_down_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_left_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_left_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (boton_left_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (boton_left_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (boton_left_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (boton_left_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (boton_left_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (boton_left_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (boton_left_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (boton_left_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (boton_left_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (boton_left_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (boton_left_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (boton_left_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (boton_left_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (boton_left_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (boton_left_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (agent_pipeline_040_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_040_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_040_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_040_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_040_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_040_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_left_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (boton_left_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (boton_left_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (boton_left_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (boton_left_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (boton_left_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (boton_left_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (boton_left_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (boton_left_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (boton_left_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_left_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_left_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (boton_left_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_left_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_left_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (boton_left_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (boton_left_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (boton_left_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (boton_left_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (boton_left_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (boton_left_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (boton_left_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (boton_left_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (boton_left_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boton_right_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boton_right_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (boton_right_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (boton_right_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (boton_right_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (boton_right_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (boton_right_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (boton_right_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (boton_right_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (boton_right_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (boton_right_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (boton_right_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (boton_right_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (boton_right_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (boton_right_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (boton_right_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (boton_right_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (agent_pipeline_042_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_042_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_042_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_042_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_042_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_042_source0_channel),                           //                .channel
		.rf_sink_ready           (boton_right_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (boton_right_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (boton_right_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (boton_right_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (boton_right_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (boton_right_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (boton_right_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (boton_right_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (boton_right_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (boton_right_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (boton_right_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boton_right_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (boton_right_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boton_right_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boton_right_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (boton_right_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (boton_right_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (boton_right_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (boton_right_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (boton_right_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (boton_right_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (boton_right_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (boton_right_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (boton_right_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) analog1_x_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (analog1_x_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (analog1_x_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (analog1_x_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (analog1_x_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (analog1_x_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (analog1_x_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (analog1_x_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (analog1_x_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (analog1_x_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (analog1_x_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (analog1_x_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (analog1_x_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (analog1_x_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (analog1_x_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (analog1_x_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (analog1_x_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (agent_pipeline_044_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_044_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_044_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_044_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_044_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_044_source0_channel),                           //                .channel
		.rf_sink_ready           (analog1_x_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (analog1_x_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (analog1_x_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (analog1_x_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (analog1_x_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (analog1_x_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (analog1_x_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (analog1_x_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (analog1_x_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (analog1_x_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (analog1_x_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (analog1_x_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (analog1_x_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analog1_x_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (analog1_x_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (analog1_x_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (analog1_x_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (analog1_x_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (analog1_x_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (analog1_x_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (analog1_x_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (analog1_x_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (analog1_x_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (analog1_x_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) analog1_y_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (analog1_y_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (analog1_y_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (analog1_y_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (analog1_y_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (analog1_y_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (analog1_y_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (analog1_y_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (analog1_y_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (analog1_y_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (analog1_y_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (analog1_y_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (analog1_y_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (analog1_y_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (analog1_y_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (analog1_y_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (analog1_y_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (agent_pipeline_046_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_046_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_046_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_046_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_046_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_046_source0_channel),                           //                .channel
		.rf_sink_ready           (analog1_y_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (analog1_y_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (analog1_y_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (analog1_y_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (analog1_y_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (analog1_y_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (analog1_y_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (analog1_y_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (analog1_y_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (analog1_y_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (analog1_y_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (analog1_y_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (analog1_y_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analog1_y_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (analog1_y_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (analog1_y_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (analog1_y_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (analog1_y_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (analog1_y_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (analog1_y_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (analog1_y_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (analog1_y_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (analog1_y_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (analog1_y_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) analog2_x_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (analog2_x_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (analog2_x_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (analog2_x_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (analog2_x_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (analog2_x_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (analog2_x_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (analog2_x_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (analog2_x_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (analog2_x_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (analog2_x_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (analog2_x_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (analog2_x_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (analog2_x_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (analog2_x_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (analog2_x_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (analog2_x_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (agent_pipeline_048_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_048_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_048_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_048_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_048_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_048_source0_channel),                           //                .channel
		.rf_sink_ready           (analog2_x_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (analog2_x_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (analog2_x_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (analog2_x_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (analog2_x_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (analog2_x_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (analog2_x_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (analog2_x_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (analog2_x_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (analog2_x_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (analog2_x_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (analog2_x_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (analog2_x_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analog2_x_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (analog2_x_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (analog2_x_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (analog2_x_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (analog2_x_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (analog2_x_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (analog2_x_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (analog2_x_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (analog2_x_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (analog2_x_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (analog2_x_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) analog2_y_s1_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (analog2_y_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (analog2_y_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (analog2_y_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (analog2_y_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (analog2_y_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (analog2_y_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (analog2_y_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (analog2_y_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (analog2_y_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (analog2_y_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (analog2_y_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (analog2_y_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (analog2_y_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (analog2_y_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (analog2_y_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (analog2_y_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (agent_pipeline_050_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_050_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_050_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_050_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_050_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_050_source0_channel),                           //                .channel
		.rf_sink_ready           (analog2_y_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (analog2_y_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (analog2_y_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (analog2_y_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (analog2_y_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (analog2_y_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (analog2_y_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (analog2_y_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (analog2_y_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (analog2_y_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (analog2_y_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (analog2_y_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (analog2_y_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analog2_y_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (analog2_y_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (analog2_y_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (analog2_y_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (analog2_y_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (analog2_y_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (analog2_y_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (analog2_y_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (analog2_y_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (analog2_y_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (analog2_y_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) touch_panel_spi_spi_control_port_agent (
		.clk                     (clk_sys_clk_clk),                                                   //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (touch_panel_spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (touch_panel_spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (touch_panel_spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (touch_panel_spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (touch_panel_spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (touch_panel_spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (touch_panel_spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (touch_panel_spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (touch_panel_spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (touch_panel_spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (touch_panel_spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (touch_panel_spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (touch_panel_spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (touch_panel_spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (touch_panel_spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (touch_panel_spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_052_source0_ready),                                  //              cp.ready
		.cp_valid                (agent_pipeline_052_source0_valid),                                  //                .valid
		.cp_data                 (agent_pipeline_052_source0_data),                                   //                .data
		.cp_startofpacket        (agent_pipeline_052_source0_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_052_source0_endofpacket),                            //                .endofpacket
		.cp_channel              (agent_pipeline_052_source0_channel),                                //                .channel
		.rf_sink_ready           (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (touch_panel_spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (touch_panel_spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (touch_panel_spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (touch_panel_spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (touch_panel_spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) touch_panel_spi_spi_control_port_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                                   //       clk.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (touch_panel_spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (touch_panel_spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (touch_panel_spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (touch_panel_spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (touch_panel_spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (touch_panel_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (alt_vip_vfr_0_avalon_master_agent_cp_ready),                   //      sink.ready
		.sink_valid         (alt_vip_vfr_0_avalon_master_agent_cp_valid),                   //          .valid
		.sink_data          (alt_vip_vfr_0_avalon_master_agent_cp_data),                    //          .data
		.sink_startofpacket (alt_vip_vfr_0_avalon_master_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (alt_vip_vfr_0_avalon_master_agent_cp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                             //       src.ready
		.src_valid          (router_src_valid),                                             //          .valid
		.src_data           (router_src_data),                                              //          .data
		.src_channel        (router_src_channel),                                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                        //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                               //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (agent_pipeline_001_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_001_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                     //       src.ready
		.src_valid          (router_003_src_valid),                     //          .valid
		.src_data           (router_003_src_data),                      //          .data
		.src_channel        (router_003_src_channel),                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                     //       src.ready
		.src_valid          (router_004_src_valid),                     //          .valid
		.src_data           (router_004_src_data),                      //          .data
		.src_channel        (router_004_src_channel),                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (agent_pipeline_007_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                         //       src.ready
		.src_valid          (router_006_src_valid),                                         //          .valid
		.src_data           (router_006_src_data),                                          //          .data
		.src_channel        (router_006_src_channel),                                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (agent_pipeline_009_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_009_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //       src.ready
		.src_valid          (router_007_src_valid),                                         //          .valid
		.src_data           (router_007_src_data),                                          //          .data
		.src_channel        (router_007_src_channel),                                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (agent_pipeline_011_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_011_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (agent_pipeline_013_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_013_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                         //       src.ready
		.src_valid          (router_009_src_valid),                                         //          .valid
		.src_data           (router_009_src_data),                                          //          .data
		.src_channel        (router_009_src_channel),                                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_010 (
		.sink_ready         (agent_pipeline_015_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_015_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_010_src_ready),                     //       src.ready
		.src_valid          (router_010_src_valid),                     //          .valid
		.src_data           (router_010_src_data),                      //          .data
		.src_channel        (router_010_src_channel),                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_011 (
		.sink_ready         (agent_pipeline_017_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_017_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (agent_pipeline_019_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_019_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_013 (
		.sink_ready         (agent_pipeline_021_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_021_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_021_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_021_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_021_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                         //       src.ready
		.src_valid          (router_013_src_valid),                                         //          .valid
		.src_data           (router_013_src_data),                                          //          .data
		.src_channel        (router_013_src_channel),                                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_014 (
		.sink_ready         (agent_pipeline_023_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_023_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                         //       src.ready
		.src_valid          (router_014_src_valid),                                         //          .valid
		.src_data           (router_014_src_data),                                          //          .data
		.src_channel        (router_014_src_channel),                                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_015 (
		.sink_ready         (agent_pipeline_025_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_025_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_025_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_025_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_025_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                         //       src.ready
		.src_valid          (router_015_src_valid),                                         //          .valid
		.src_data           (router_015_src_data),                                          //          .data
		.src_channel        (router_015_src_channel),                                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_016 (
		.sink_ready         (agent_pipeline_027_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_027_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_027_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_027_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_027_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                         //       src.ready
		.src_valid          (router_016_src_valid),                                         //          .valid
		.src_data           (router_016_src_data),                                          //          .data
		.src_channel        (router_016_src_channel),                                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_017 (
		.sink_ready         (agent_pipeline_029_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_029_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_029_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_029_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_029_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                         //       src.ready
		.src_valid          (router_017_src_valid),                                         //          .valid
		.src_data           (router_017_src_data),                                          //          .data
		.src_channel        (router_017_src_channel),                                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (agent_pipeline_031_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_031_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_031_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_031_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_031_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                         //       src.ready
		.src_valid          (router_018_src_valid),                                         //          .valid
		.src_data           (router_018_src_data),                                          //          .data
		.src_channel        (router_018_src_channel),                                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_019 (
		.sink_ready         (agent_pipeline_033_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_033_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_033_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_033_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_033_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                         //       src.ready
		.src_valid          (router_019_src_valid),                                         //          .valid
		.src_data           (router_019_src_data),                                          //          .data
		.src_channel        (router_019_src_channel),                                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_020 (
		.sink_ready         (agent_pipeline_035_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_035_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_035_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_035_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_035_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                         //       src.ready
		.src_valid          (router_020_src_valid),                                         //          .valid
		.src_data           (router_020_src_data),                                          //          .data
		.src_channel        (router_020_src_channel),                                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_021 (
		.sink_ready         (agent_pipeline_037_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_037_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_037_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_037_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_037_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                         //       src.ready
		.src_valid          (router_021_src_valid),                                         //          .valid
		.src_data           (router_021_src_data),                                          //          .data
		.src_channel        (router_021_src_channel),                                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_022 (
		.sink_ready         (agent_pipeline_039_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_039_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_039_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_039_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_039_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                         //       src.ready
		.src_valid          (router_022_src_valid),                                         //          .valid
		.src_data           (router_022_src_data),                                          //          .data
		.src_channel        (router_022_src_channel),                                       //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_023 (
		.sink_ready         (agent_pipeline_041_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_041_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_041_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_041_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_041_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                         //       src.ready
		.src_valid          (router_023_src_valid),                                         //          .valid
		.src_data           (router_023_src_data),                                          //          .data
		.src_channel        (router_023_src_channel),                                       //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_024 (
		.sink_ready         (agent_pipeline_043_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_043_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_043_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_043_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_043_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                         //       src.ready
		.src_valid          (router_024_src_valid),                                         //          .valid
		.src_data           (router_024_src_data),                                          //          .data
		.src_channel        (router_024_src_channel),                                       //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_025 (
		.sink_ready         (agent_pipeline_045_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_045_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_045_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_045_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_045_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                         //       src.ready
		.src_valid          (router_025_src_valid),                                         //          .valid
		.src_data           (router_025_src_data),                                          //          .data
		.src_channel        (router_025_src_channel),                                       //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_026 (
		.sink_ready         (agent_pipeline_047_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_047_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_047_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_047_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_047_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                         //       src.ready
		.src_valid          (router_026_src_valid),                                         //          .valid
		.src_data           (router_026_src_data),                                          //          .data
		.src_channel        (router_026_src_channel),                                       //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_027 (
		.sink_ready         (agent_pipeline_049_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_049_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_049_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_049_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_049_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                         //       src.ready
		.src_valid          (router_027_src_valid),                                         //          .valid
		.src_data           (router_027_src_data),                                          //          .data
		.src_channel        (router_027_src_channel),                                       //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_028 (
		.sink_ready         (agent_pipeline_051_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_051_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_051_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_051_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_051_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                                         //       src.ready
		.src_valid          (router_028_src_valid),                                         //          .valid
		.src_data           (router_028_src_data),                                          //          .data
		.src_channel        (router_028_src_channel),                                       //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_029 (
		.sink_ready         (agent_pipeline_053_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_053_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_053_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_053_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_053_source0_endofpacket),                       //          .endofpacket
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                                         //       src.ready
		.src_valid          (router_029_src_valid),                                         //          .valid
		.src_data           (router_029_src_data),                                          //          .data
		.src_channel        (router_029_src_channel),                                       //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (21),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clk_sys_clk_clk),                                      //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                 //          .valid
		.cmd_sink_data          (router_002_src_data),                                  //          .data
		.cmd_sink_channel       (router_002_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                   //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                 //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                    //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),             //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (74),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (66),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_sys_clk_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                             //      sink.ready
		.sink_channel       (router_src_channel),                                           //          .channel
		.sink_data          (router_src_data),                                              //          .data
		.sink_startofpacket (router_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                    //      sink.ready
		.sink_channel        (router_001_src_channel),                  //          .channel
		.sink_data           (router_001_src_data),                     //          .data
		.sink_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid          (router_001_src_valid),                    //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                //          .valid
		.src0_data           (cmd_demux_001_src0_data),                 //          .data
		.src0_channel        (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                //          .valid
		.src1_data           (cmd_demux_001_src1_data),                 //          .data
		.src1_channel        (cmd_demux_001_src1_channel),              //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                //          .valid
		.src2_data           (cmd_demux_001_src2_data),                 //          .data
		.src2_channel        (cmd_demux_001_src2_channel),              //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                //          .valid
		.src3_data           (cmd_demux_001_src3_data),                 //          .data
		.src3_channel        (cmd_demux_001_src3_channel),              //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                //          .valid
		.src4_data           (cmd_demux_001_src4_data),                 //          .data
		.src4_channel        (cmd_demux_001_src4_channel),              //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                //          .valid
		.src5_data           (cmd_demux_001_src5_data),                 //          .data
		.src5_channel        (cmd_demux_001_src5_channel),              //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                //          .valid
		.src6_data           (cmd_demux_001_src6_data),                 //          .data
		.src6_channel        (cmd_demux_001_src6_channel),              //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),          //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                //          .valid
		.src7_data           (cmd_demux_001_src7_data),                 //          .data
		.src7_channel        (cmd_demux_001_src7_channel),              //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                //          .valid
		.src8_data           (cmd_demux_001_src8_data),                 //          .data
		.src8_channel        (cmd_demux_001_src8_channel),              //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                //          .valid
		.src9_data           (cmd_demux_001_src9_data),                 //          .data
		.src9_channel        (cmd_demux_001_src9_channel),              //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),          //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),               //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),               //          .valid
		.src10_data          (cmd_demux_001_src10_data),                //          .data
		.src10_channel       (cmd_demux_001_src10_channel),             //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),         //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),               //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),               //          .valid
		.src11_data          (cmd_demux_001_src11_data),                //          .data
		.src11_channel       (cmd_demux_001_src11_channel),             //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),         //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),               //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),               //          .valid
		.src12_data          (cmd_demux_001_src12_data),                //          .data
		.src12_channel       (cmd_demux_001_src12_channel),             //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),         //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),               //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),               //          .valid
		.src13_data          (cmd_demux_001_src13_data),                //          .data
		.src13_channel       (cmd_demux_001_src13_channel),             //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),         //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),               //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),               //          .valid
		.src14_data          (cmd_demux_001_src14_data),                //          .data
		.src14_channel       (cmd_demux_001_src14_channel),             //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),         //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),               //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),               //          .valid
		.src15_data          (cmd_demux_001_src15_data),                //          .data
		.src15_channel       (cmd_demux_001_src15_channel),             //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),         //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),               //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),               //          .valid
		.src16_data          (cmd_demux_001_src16_data),                //          .data
		.src16_channel       (cmd_demux_001_src16_channel),             //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),         //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),               //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),               //          .valid
		.src17_data          (cmd_demux_001_src17_data),                //          .data
		.src17_channel       (cmd_demux_001_src17_channel),             //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),         //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),               //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),               //          .valid
		.src18_data          (cmd_demux_001_src18_data),                //          .data
		.src18_channel       (cmd_demux_001_src18_channel),             //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),         //          .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),               //     src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),               //          .valid
		.src19_data          (cmd_demux_001_src19_data),                //          .data
		.src19_channel       (cmd_demux_001_src19_channel),             //          .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),       //          .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),         //          .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),               //     src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),               //          .valid
		.src20_data          (cmd_demux_001_src20_data),                //          .data
		.src20_channel       (cmd_demux_001_src20_channel),             //          .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),         //          .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),               //     src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),               //          .valid
		.src21_data          (cmd_demux_001_src21_data),                //          .data
		.src21_channel       (cmd_demux_001_src21_channel),             //          .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),       //          .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),         //          .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),               //     src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),               //          .valid
		.src22_data          (cmd_demux_001_src22_data),                //          .data
		.src22_channel       (cmd_demux_001_src22_channel),             //          .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),       //          .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),         //          .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),               //     src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),               //          .valid
		.src23_data          (cmd_demux_001_src23_data),                //          .data
		.src23_channel       (cmd_demux_001_src23_channel),             //          .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),       //          .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),         //          .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),               //     src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),               //          .valid
		.src24_data          (cmd_demux_001_src24_data),                //          .data
		.src24_channel       (cmd_demux_001_src24_channel),             //          .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),       //          .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket),         //          .endofpacket
		.src25_ready         (cmd_demux_001_src25_ready),               //     src25.ready
		.src25_valid         (cmd_demux_001_src25_valid),               //          .valid
		.src25_data          (cmd_demux_001_src25_data),                //          .data
		.src25_channel       (cmd_demux_001_src25_channel),             //          .channel
		.src25_startofpacket (cmd_demux_001_src25_startofpacket),       //          .startofpacket
		.src25_endofpacket   (cmd_demux_001_src25_endofpacket),         //          .endofpacket
		.src26_ready         (cmd_demux_001_src26_ready),               //     src26.ready
		.src26_valid         (cmd_demux_001_src26_valid),               //          .valid
		.src26_data          (cmd_demux_001_src26_data),                //          .data
		.src26_channel       (cmd_demux_001_src26_channel),             //          .channel
		.src26_startofpacket (cmd_demux_001_src26_startofpacket),       //          .startofpacket
		.src26_endofpacket   (cmd_demux_001_src26_endofpacket)          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),          //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),        //          .channel
		.sink_data          (limiter_pipeline_source0_data),           //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),          //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.src1_data          (cmd_demux_002_src1_data),                 //          .data
		.src1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                //          .valid
		.src2_data          (cmd_demux_002_src2_data),                 //          .data
		.src2_channel       (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),              //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),              //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),            //          .channel
		.sink0_data          (mux_pipeline_source0_data),               //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),        //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.sink2_ready         (mux_pipeline_002_source0_ready),          //     sink2.ready
		.sink2_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.sink2_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.sink2_data          (mux_pipeline_002_source0_data),           //          .data
		.sink2_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_002_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_004_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_004_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_004_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_006_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_006_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_006_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                        //          .valid
		.src_data            (cmd_mux_003_src_data),                                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                        //          .valid
		.src_data            (cmd_mux_004_src_data),                                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                        //          .valid
		.src_data            (cmd_mux_006_src_data),                                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_011_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_011_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_011_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_009 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_010 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                        //          .valid
		.src_data            (cmd_mux_010_src_data),                                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_011 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                        //          .valid
		.src_data            (cmd_mux_011_src_data),                                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_012 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                        //          .valid
		.src_data            (cmd_mux_012_src_data),                                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_013 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                        //          .valid
		.src_data            (cmd_mux_013_src_data),                                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_017_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_017_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_017_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_017_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_017_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_017_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_014 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                        //          .valid
		.src_data            (cmd_mux_014_src_data),                                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_018_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_018_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_018_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_018_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_018_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_018_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_015 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                        //          .valid
		.src_data            (cmd_mux_015_src_data),                                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_019_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_019_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_019_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_019_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_019_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_019_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_016 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                        //          .valid
		.src_data            (cmd_mux_016_src_data),                                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_020_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_020_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_020_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_020_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_020_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_020_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_017 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                        //          .valid
		.src_data            (cmd_mux_017_src_data),                                         //          .data
		.src_channel         (cmd_mux_017_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_021_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_021_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_021_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_021_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_021_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_021_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_018 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                        //          .valid
		.src_data            (cmd_mux_018_src_data),                                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_022_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_022_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_022_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_022_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_022_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_022_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_019 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                        //          .valid
		.src_data            (cmd_mux_019_src_data),                                         //          .data
		.src_channel         (cmd_mux_019_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_023_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_023_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_023_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_023_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_023_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_023_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_020 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                        //          .valid
		.src_data            (cmd_mux_020_src_data),                                         //          .data
		.src_channel         (cmd_mux_020_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_024_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_024_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_024_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_024_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_024_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_024_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_021 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                        //          .valid
		.src_data            (cmd_mux_021_src_data),                                         //          .data
		.src_channel         (cmd_mux_021_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_025_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_025_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_025_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_025_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_025_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_025_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_022 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                        //          .valid
		.src_data            (cmd_mux_022_src_data),                                         //          .data
		.src_channel         (cmd_mux_022_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_026_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_026_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_026_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_026_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_026_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_026_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_023 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                        //          .valid
		.src_data            (cmd_mux_023_src_data),                                         //          .data
		.src_channel         (cmd_mux_023_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_027_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_027_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_027_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_027_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_027_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_027_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_024 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                        //          .valid
		.src_data            (cmd_mux_024_src_data),                                         //          .data
		.src_channel         (cmd_mux_024_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_028_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_028_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_028_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_028_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_028_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_028_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_025 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                        //          .valid
		.src_data            (cmd_mux_025_src_data),                                         //          .data
		.src_channel         (cmd_mux_025_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_029_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_029_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_029_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_029_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_029_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_029_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_026 (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                        //          .valid
		.src_data            (cmd_mux_026_src_data),                                         //          .data
		.src_channel         (cmd_mux_026_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_030_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_030_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_030_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_030_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_030_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_030_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 rsp_demux (
		.clk                (clk_sys_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_src2_data),                          //          .data
		.src2_channel       (rsp_demux_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_003 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                         //      sink.ready
		.sink_channel       (router_006_src_channel),                                       //          .channel
		.sink_data          (router_006_src_data),                                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_004 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                         //      sink.ready
		.sink_channel       (router_007_src_channel),                                       //          .channel
		.sink_data          (router_007_src_data),                                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_005 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_006 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                         //      sink.ready
		.sink_channel       (router_009_src_channel),                                       //          .channel
		.sink_data          (router_009_src_data),                                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_007 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_008 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_009 (
		.clk                (clk_sys_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_010 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                         //      sink.ready
		.sink_channel       (router_013_src_channel),                                       //          .channel
		.sink_data          (router_013_src_data),                                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_011 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                         //      sink.ready
		.sink_channel       (router_014_src_channel),                                       //          .channel
		.sink_data          (router_014_src_data),                                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_012 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                         //      sink.ready
		.sink_channel       (router_015_src_channel),                                       //          .channel
		.sink_data          (router_015_src_data),                                          //          .data
		.sink_startofpacket (router_015_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_015_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_013 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                         //      sink.ready
		.sink_channel       (router_016_src_channel),                                       //          .channel
		.sink_data          (router_016_src_data),                                          //          .data
		.sink_startofpacket (router_016_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_016_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_014 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                         //      sink.ready
		.sink_channel       (router_017_src_channel),                                       //          .channel
		.sink_data          (router_017_src_data),                                          //          .data
		.sink_startofpacket (router_017_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_017_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_015 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                         //      sink.ready
		.sink_channel       (router_018_src_channel),                                       //          .channel
		.sink_data          (router_018_src_data),                                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_016 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                         //      sink.ready
		.sink_channel       (router_019_src_channel),                                       //          .channel
		.sink_data          (router_019_src_data),                                          //          .data
		.sink_startofpacket (router_019_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_019_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_017 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                         //      sink.ready
		.sink_channel       (router_020_src_channel),                                       //          .channel
		.sink_data          (router_020_src_data),                                          //          .data
		.sink_startofpacket (router_020_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_020_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_018 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                         //      sink.ready
		.sink_channel       (router_021_src_channel),                                       //          .channel
		.sink_data          (router_021_src_data),                                          //          .data
		.sink_startofpacket (router_021_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_021_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_018_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_019 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                         //      sink.ready
		.sink_channel       (router_022_src_channel),                                       //          .channel
		.sink_data          (router_022_src_data),                                          //          .data
		.sink_startofpacket (router_022_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_022_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_019_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_020 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                         //      sink.ready
		.sink_channel       (router_023_src_channel),                                       //          .channel
		.sink_data          (router_023_src_data),                                          //          .data
		.sink_startofpacket (router_023_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_023_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_021 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                         //      sink.ready
		.sink_channel       (router_024_src_channel),                                       //          .channel
		.sink_data          (router_024_src_data),                                          //          .data
		.sink_startofpacket (router_024_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_024_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_021_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_022 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                                         //      sink.ready
		.sink_channel       (router_025_src_channel),                                       //          .channel
		.sink_data          (router_025_src_data),                                          //          .data
		.sink_startofpacket (router_025_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_025_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_022_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_023 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                                         //      sink.ready
		.sink_channel       (router_026_src_channel),                                       //          .channel
		.sink_data          (router_026_src_data),                                          //          .data
		.sink_startofpacket (router_026_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_026_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_023_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_024 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                         //      sink.ready
		.sink_channel       (router_027_src_channel),                                       //          .channel
		.sink_data          (router_027_src_data),                                          //          .data
		.sink_startofpacket (router_027_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_027_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_024_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_025 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                                         //      sink.ready
		.sink_channel       (router_028_src_channel),                                       //          .channel
		.sink_data          (router_028_src_data),                                          //          .data
		.sink_startofpacket (router_028_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_028_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_025_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux_026 (
		.clk                (clk_sys_clk_clk),                                              //       clk.clk
		.reset              (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                                         //      sink.ready
		.sink_channel       (router_029_src_channel),                                       //          .channel
		.sink_data          (router_029_src_data),                                          //          .data
		.sink_startofpacket (router_029_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_029_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_026_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_sys_clk_clk),                                              //       clk.clk
		.reset               (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                                            //          .valid
		.src_data            (rsp_mux_src_data),                                             //          .data
		.src_channel         (rsp_mux_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (mux_pipeline_031_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_031_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_031_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_031_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_031_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_031_source0_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_sys_clk_clk),                         //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                   //          .valid
		.src_data             (rsp_mux_001_src_data),                    //          .data
		.src_channel          (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready          (mux_pipeline_032_source0_ready),          //     sink0.ready
		.sink0_valid          (mux_pipeline_032_source0_valid),          //          .valid
		.sink0_channel        (mux_pipeline_032_source0_channel),        //          .channel
		.sink0_data           (mux_pipeline_032_source0_data),           //          .data
		.sink0_startofpacket  (mux_pipeline_032_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket    (mux_pipeline_032_source0_endofpacket),    //          .endofpacket
		.sink1_ready          (mux_pipeline_033_source0_ready),          //     sink1.ready
		.sink1_valid          (mux_pipeline_033_source0_valid),          //          .valid
		.sink1_channel        (mux_pipeline_033_source0_channel),        //          .channel
		.sink1_data           (mux_pipeline_033_source0_data),           //          .data
		.sink1_startofpacket  (mux_pipeline_033_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket    (mux_pipeline_033_source0_endofpacket),    //          .endofpacket
		.sink2_ready          (mux_pipeline_034_source0_ready),          //     sink2.ready
		.sink2_valid          (mux_pipeline_034_source0_valid),          //          .valid
		.sink2_channel        (mux_pipeline_034_source0_channel),        //          .channel
		.sink2_data           (mux_pipeline_034_source0_data),           //          .data
		.sink2_startofpacket  (mux_pipeline_034_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket    (mux_pipeline_034_source0_endofpacket),    //          .endofpacket
		.sink3_ready          (mux_pipeline_035_source0_ready),          //     sink3.ready
		.sink3_valid          (mux_pipeline_035_source0_valid),          //          .valid
		.sink3_channel        (mux_pipeline_035_source0_channel),        //          .channel
		.sink3_data           (mux_pipeline_035_source0_data),           //          .data
		.sink3_startofpacket  (mux_pipeline_035_source0_startofpacket),  //          .startofpacket
		.sink3_endofpacket    (mux_pipeline_035_source0_endofpacket),    //          .endofpacket
		.sink4_ready          (mux_pipeline_036_source0_ready),          //     sink4.ready
		.sink4_valid          (mux_pipeline_036_source0_valid),          //          .valid
		.sink4_channel        (mux_pipeline_036_source0_channel),        //          .channel
		.sink4_data           (mux_pipeline_036_source0_data),           //          .data
		.sink4_startofpacket  (mux_pipeline_036_source0_startofpacket),  //          .startofpacket
		.sink4_endofpacket    (mux_pipeline_036_source0_endofpacket),    //          .endofpacket
		.sink5_ready          (mux_pipeline_037_source0_ready),          //     sink5.ready
		.sink5_valid          (mux_pipeline_037_source0_valid),          //          .valid
		.sink5_channel        (mux_pipeline_037_source0_channel),        //          .channel
		.sink5_data           (mux_pipeline_037_source0_data),           //          .data
		.sink5_startofpacket  (mux_pipeline_037_source0_startofpacket),  //          .startofpacket
		.sink5_endofpacket    (mux_pipeline_037_source0_endofpacket),    //          .endofpacket
		.sink6_ready          (mux_pipeline_038_source0_ready),          //     sink6.ready
		.sink6_valid          (mux_pipeline_038_source0_valid),          //          .valid
		.sink6_channel        (mux_pipeline_038_source0_channel),        //          .channel
		.sink6_data           (mux_pipeline_038_source0_data),           //          .data
		.sink6_startofpacket  (mux_pipeline_038_source0_startofpacket),  //          .startofpacket
		.sink6_endofpacket    (mux_pipeline_038_source0_endofpacket),    //          .endofpacket
		.sink7_ready          (mux_pipeline_039_source0_ready),          //     sink7.ready
		.sink7_valid          (mux_pipeline_039_source0_valid),          //          .valid
		.sink7_channel        (mux_pipeline_039_source0_channel),        //          .channel
		.sink7_data           (mux_pipeline_039_source0_data),           //          .data
		.sink7_startofpacket  (mux_pipeline_039_source0_startofpacket),  //          .startofpacket
		.sink7_endofpacket    (mux_pipeline_039_source0_endofpacket),    //          .endofpacket
		.sink8_ready          (mux_pipeline_040_source0_ready),          //     sink8.ready
		.sink8_valid          (mux_pipeline_040_source0_valid),          //          .valid
		.sink8_channel        (mux_pipeline_040_source0_channel),        //          .channel
		.sink8_data           (mux_pipeline_040_source0_data),           //          .data
		.sink8_startofpacket  (mux_pipeline_040_source0_startofpacket),  //          .startofpacket
		.sink8_endofpacket    (mux_pipeline_040_source0_endofpacket),    //          .endofpacket
		.sink9_ready          (mux_pipeline_041_source0_ready),          //     sink9.ready
		.sink9_valid          (mux_pipeline_041_source0_valid),          //          .valid
		.sink9_channel        (mux_pipeline_041_source0_channel),        //          .channel
		.sink9_data           (mux_pipeline_041_source0_data),           //          .data
		.sink9_startofpacket  (mux_pipeline_041_source0_startofpacket),  //          .startofpacket
		.sink9_endofpacket    (mux_pipeline_041_source0_endofpacket),    //          .endofpacket
		.sink10_ready         (mux_pipeline_042_source0_ready),          //    sink10.ready
		.sink10_valid         (mux_pipeline_042_source0_valid),          //          .valid
		.sink10_channel       (mux_pipeline_042_source0_channel),        //          .channel
		.sink10_data          (mux_pipeline_042_source0_data),           //          .data
		.sink10_startofpacket (mux_pipeline_042_source0_startofpacket),  //          .startofpacket
		.sink10_endofpacket   (mux_pipeline_042_source0_endofpacket),    //          .endofpacket
		.sink11_ready         (mux_pipeline_043_source0_ready),          //    sink11.ready
		.sink11_valid         (mux_pipeline_043_source0_valid),          //          .valid
		.sink11_channel       (mux_pipeline_043_source0_channel),        //          .channel
		.sink11_data          (mux_pipeline_043_source0_data),           //          .data
		.sink11_startofpacket (mux_pipeline_043_source0_startofpacket),  //          .startofpacket
		.sink11_endofpacket   (mux_pipeline_043_source0_endofpacket),    //          .endofpacket
		.sink12_ready         (mux_pipeline_044_source0_ready),          //    sink12.ready
		.sink12_valid         (mux_pipeline_044_source0_valid),          //          .valid
		.sink12_channel       (mux_pipeline_044_source0_channel),        //          .channel
		.sink12_data          (mux_pipeline_044_source0_data),           //          .data
		.sink12_startofpacket (mux_pipeline_044_source0_startofpacket),  //          .startofpacket
		.sink12_endofpacket   (mux_pipeline_044_source0_endofpacket),    //          .endofpacket
		.sink13_ready         (mux_pipeline_045_source0_ready),          //    sink13.ready
		.sink13_valid         (mux_pipeline_045_source0_valid),          //          .valid
		.sink13_channel       (mux_pipeline_045_source0_channel),        //          .channel
		.sink13_data          (mux_pipeline_045_source0_data),           //          .data
		.sink13_startofpacket (mux_pipeline_045_source0_startofpacket),  //          .startofpacket
		.sink13_endofpacket   (mux_pipeline_045_source0_endofpacket),    //          .endofpacket
		.sink14_ready         (mux_pipeline_046_source0_ready),          //    sink14.ready
		.sink14_valid         (mux_pipeline_046_source0_valid),          //          .valid
		.sink14_channel       (mux_pipeline_046_source0_channel),        //          .channel
		.sink14_data          (mux_pipeline_046_source0_data),           //          .data
		.sink14_startofpacket (mux_pipeline_046_source0_startofpacket),  //          .startofpacket
		.sink14_endofpacket   (mux_pipeline_046_source0_endofpacket),    //          .endofpacket
		.sink15_ready         (mux_pipeline_047_source0_ready),          //    sink15.ready
		.sink15_valid         (mux_pipeline_047_source0_valid),          //          .valid
		.sink15_channel       (mux_pipeline_047_source0_channel),        //          .channel
		.sink15_data          (mux_pipeline_047_source0_data),           //          .data
		.sink15_startofpacket (mux_pipeline_047_source0_startofpacket),  //          .startofpacket
		.sink15_endofpacket   (mux_pipeline_047_source0_endofpacket),    //          .endofpacket
		.sink16_ready         (mux_pipeline_048_source0_ready),          //    sink16.ready
		.sink16_valid         (mux_pipeline_048_source0_valid),          //          .valid
		.sink16_channel       (mux_pipeline_048_source0_channel),        //          .channel
		.sink16_data          (mux_pipeline_048_source0_data),           //          .data
		.sink16_startofpacket (mux_pipeline_048_source0_startofpacket),  //          .startofpacket
		.sink16_endofpacket   (mux_pipeline_048_source0_endofpacket),    //          .endofpacket
		.sink17_ready         (mux_pipeline_049_source0_ready),          //    sink17.ready
		.sink17_valid         (mux_pipeline_049_source0_valid),          //          .valid
		.sink17_channel       (mux_pipeline_049_source0_channel),        //          .channel
		.sink17_data          (mux_pipeline_049_source0_data),           //          .data
		.sink17_startofpacket (mux_pipeline_049_source0_startofpacket),  //          .startofpacket
		.sink17_endofpacket   (mux_pipeline_049_source0_endofpacket),    //          .endofpacket
		.sink18_ready         (mux_pipeline_050_source0_ready),          //    sink18.ready
		.sink18_valid         (mux_pipeline_050_source0_valid),          //          .valid
		.sink18_channel       (mux_pipeline_050_source0_channel),        //          .channel
		.sink18_data          (mux_pipeline_050_source0_data),           //          .data
		.sink18_startofpacket (mux_pipeline_050_source0_startofpacket),  //          .startofpacket
		.sink18_endofpacket   (mux_pipeline_050_source0_endofpacket),    //          .endofpacket
		.sink19_ready         (mux_pipeline_051_source0_ready),          //    sink19.ready
		.sink19_valid         (mux_pipeline_051_source0_valid),          //          .valid
		.sink19_channel       (mux_pipeline_051_source0_channel),        //          .channel
		.sink19_data          (mux_pipeline_051_source0_data),           //          .data
		.sink19_startofpacket (mux_pipeline_051_source0_startofpacket),  //          .startofpacket
		.sink19_endofpacket   (mux_pipeline_051_source0_endofpacket),    //          .endofpacket
		.sink20_ready         (mux_pipeline_052_source0_ready),          //    sink20.ready
		.sink20_valid         (mux_pipeline_052_source0_valid),          //          .valid
		.sink20_channel       (mux_pipeline_052_source0_channel),        //          .channel
		.sink20_data          (mux_pipeline_052_source0_data),           //          .data
		.sink20_startofpacket (mux_pipeline_052_source0_startofpacket),  //          .startofpacket
		.sink20_endofpacket   (mux_pipeline_052_source0_endofpacket),    //          .endofpacket
		.sink21_ready         (mux_pipeline_053_source0_ready),          //    sink21.ready
		.sink21_valid         (mux_pipeline_053_source0_valid),          //          .valid
		.sink21_channel       (mux_pipeline_053_source0_channel),        //          .channel
		.sink21_data          (mux_pipeline_053_source0_data),           //          .data
		.sink21_startofpacket (mux_pipeline_053_source0_startofpacket),  //          .startofpacket
		.sink21_endofpacket   (mux_pipeline_053_source0_endofpacket),    //          .endofpacket
		.sink22_ready         (mux_pipeline_054_source0_ready),          //    sink22.ready
		.sink22_valid         (mux_pipeline_054_source0_valid),          //          .valid
		.sink22_channel       (mux_pipeline_054_source0_channel),        //          .channel
		.sink22_data          (mux_pipeline_054_source0_data),           //          .data
		.sink22_startofpacket (mux_pipeline_054_source0_startofpacket),  //          .startofpacket
		.sink22_endofpacket   (mux_pipeline_054_source0_endofpacket),    //          .endofpacket
		.sink23_ready         (mux_pipeline_055_source0_ready),          //    sink23.ready
		.sink23_valid         (mux_pipeline_055_source0_valid),          //          .valid
		.sink23_channel       (mux_pipeline_055_source0_channel),        //          .channel
		.sink23_data          (mux_pipeline_055_source0_data),           //          .data
		.sink23_startofpacket (mux_pipeline_055_source0_startofpacket),  //          .startofpacket
		.sink23_endofpacket   (mux_pipeline_055_source0_endofpacket),    //          .endofpacket
		.sink24_ready         (mux_pipeline_056_source0_ready),          //    sink24.ready
		.sink24_valid         (mux_pipeline_056_source0_valid),          //          .valid
		.sink24_channel       (mux_pipeline_056_source0_channel),        //          .channel
		.sink24_data          (mux_pipeline_056_source0_data),           //          .data
		.sink24_startofpacket (mux_pipeline_056_source0_startofpacket),  //          .startofpacket
		.sink24_endofpacket   (mux_pipeline_056_source0_endofpacket),    //          .endofpacket
		.sink25_ready         (mux_pipeline_057_source0_ready),          //    sink25.ready
		.sink25_valid         (mux_pipeline_057_source0_valid),          //          .valid
		.sink25_channel       (mux_pipeline_057_source0_channel),        //          .channel
		.sink25_data          (mux_pipeline_057_source0_data),           //          .data
		.sink25_startofpacket (mux_pipeline_057_source0_startofpacket),  //          .startofpacket
		.sink25_endofpacket   (mux_pipeline_057_source0_endofpacket),    //          .endofpacket
		.sink26_ready         (mux_pipeline_058_source0_ready),          //    sink26.ready
		.sink26_valid         (mux_pipeline_058_source0_valid),          //          .valid
		.sink26_channel       (mux_pipeline_058_source0_channel),        //          .channel
		.sink26_data          (mux_pipeline_058_source0_data),           //          .data
		.sink26_startofpacket (mux_pipeline_058_source0_startofpacket),  //          .startofpacket
		.sink26_endofpacket   (mux_pipeline_058_source0_endofpacket)     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_sys_clk_clk),                         //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_059_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_059_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_059_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_059_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_059_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_059_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_060_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_060_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_060_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_060_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_060_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_060_source0_endofpacket),    //          .endofpacket
		.sink2_ready         (mux_pipeline_061_source0_ready),          //     sink2.ready
		.sink2_valid         (mux_pipeline_061_source0_valid),          //          .valid
		.sink2_channel       (mux_pipeline_061_source0_channel),        //          .channel
		.sink2_data          (mux_pipeline_061_source0_data),           //          .data
		.sink2_startofpacket (mux_pipeline_061_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_061_source0_endofpacket)     //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (66),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (69),
		.IN_PKT_BURST_SIZE_L           (67),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (71),
		.IN_PKT_BURST_TYPE_L           (70),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_003_src_valid),                         //      sink.valid
		.in_channel           (router_003_src_channel),                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_003_src_ready),                         //          .ready
		.in_data              (router_003_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (69),
		.OUT_PKT_BURST_SIZE_L          (67),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (71),
		.OUT_PKT_BURST_TYPE_L          (70),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                            //          .ready
		.in_data              (cmd_mux_src_data),                             //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_sys_clk_clk),                                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_sys_clk_clk),                            //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_002_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_002_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_002_src_data),                       //          .data
		.in_channel        (rsp_mux_002_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_sys_clk_clk),                              //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (sdram_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sdram_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sdram_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                  //          .data
		.out_channel       (agent_pipeline_source0_channel),               //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (sdram_s1_agent_rp_ready),                  //     sink0.ready
		.in_valid          (sdram_s1_agent_rp_valid),                  //          .valid
		.in_startofpacket  (sdram_s1_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (sdram_s1_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                     //          .data
		.in_channel        (cmd_mux_001_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),          //          .data
		.out_channel       (agent_pipeline_002_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_sys_clk_clk),                               //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (epcs_epcs_control_port_agent_rp_ready),         //     sink0.ready
		.in_valid          (epcs_epcs_control_port_agent_rp_valid),         //          .valid
		.in_startofpacket  (epcs_epcs_control_port_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (epcs_epcs_control_port_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (epcs_epcs_control_port_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),              //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),              //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),        //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),               //          .data
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_channel       (),                                              // (terminated)
		.in_channel        (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_002_src_data),                     //          .data
		.in_channel        (cmd_mux_002_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),          //          .data
		.out_channel       (agent_pipeline_004_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_sys_clk_clk),                              //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (cpu_jtag_debug_module_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_005_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_003_src_data),                                         //          .data
		.in_channel        (cmd_mux_003_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                              //          .data
		.out_channel       (agent_pipeline_006_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //     sink0.ready
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //          .valid
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_004_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_004_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_004_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_004_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_004_src_data),                                         //          .data
		.in_channel        (cmd_mux_004_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                              //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rp_ready),                    //     sink0.ready
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rp_valid),                    //          .valid
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket),            //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),              //          .endofpacket
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rp_data),                     //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_005_src_data),                     //          .data
		.in_channel        (cmd_mux_005_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),          //          .data
		.out_channel       (agent_pipeline_010_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_sys_clk_clk),                            //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sysid_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),            //          .data
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_channel       (),                                           // (terminated)
		.in_channel        (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_006_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_006_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_006_src_data),                                         //          .data
		.in_channel        (cmd_mux_006_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                              //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (f_engine_frac_cpu_agent_rp_ready),                             //     sink0.ready
		.in_valid          (f_engine_frac_cpu_agent_rp_valid),                             //          .valid
		.in_startofpacket  (f_engine_frac_cpu_agent_rp_startofpacket),                     //          .startofpacket
		.in_endofpacket    (f_engine_frac_cpu_agent_rp_endofpacket),                       //          .endofpacket
		.in_data           (f_engine_frac_cpu_agent_rp_data),                              //          .data
		.out_ready         (agent_pipeline_013_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_007_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_007_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_007_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_007_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_007_src_data),                     //          .data
		.in_channel        (cmd_mux_007_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_014_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),          //          .data
		.out_channel       (agent_pipeline_014_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (timer_0_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (timer_0_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (timer_0_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (timer_0_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_015_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_008_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_008_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_008_src_data),                     //          .data
		.in_channel        (cmd_mux_008_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),          //          .data
		.out_channel       (agent_pipeline_016_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (pio_led_green_s1_agent_rp_ready),          //     sink0.ready
		.in_valid          (pio_led_green_s1_agent_rp_valid),          //          .valid
		.in_startofpacket  (pio_led_green_s1_agent_rp_startofpacket),  //          .startofpacket
		.in_endofpacket    (pio_led_green_s1_agent_rp_endofpacket),    //          .endofpacket
		.in_data           (pio_led_green_s1_agent_rp_data),           //          .data
		.out_ready         (agent_pipeline_017_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_009_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_009_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_009_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_009_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_009_src_data),                     //          .data
		.in_channel        (cmd_mux_009_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),          //          .data
		.out_channel       (agent_pipeline_018_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (clk_sys_clk_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (pio_sw_s1_agent_rp_ready),                 //     sink0.ready
		.in_valid          (pio_sw_s1_agent_rp_valid),                 //          .valid
		.in_startofpacket  (pio_sw_s1_agent_rp_startofpacket),         //          .startofpacket
		.in_endofpacket    (pio_sw_s1_agent_rp_endofpacket),           //          .endofpacket
		.in_data           (pio_sw_s1_agent_rp_data),                  //          .data
		.out_ready         (agent_pipeline_019_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_010_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_010_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_010_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_010_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_010_src_data),                                         //          .data
		.in_channel        (cmd_mux_010_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),                              //          .data
		.out_channel       (agent_pipeline_020_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (touch_panel_busy_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (touch_panel_busy_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (touch_panel_busy_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (touch_panel_busy_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (touch_panel_busy_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_021_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_011_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_011_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_011_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_011_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_011_src_data),                                         //          .data
		.in_channel        (cmd_mux_011_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_022_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),                              //          .data
		.out_channel       (agent_pipeline_022_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (touch_panel_penirq_n_s1_agent_rp_ready),                       //     sink0.ready
		.in_valid          (touch_panel_penirq_n_s1_agent_rp_valid),                       //          .valid
		.in_startofpacket  (touch_panel_penirq_n_s1_agent_rp_startofpacket),               //          .startofpacket
		.in_endofpacket    (touch_panel_penirq_n_s1_agent_rp_endofpacket),                 //          .endofpacket
		.in_data           (touch_panel_penirq_n_s1_agent_rp_data),                        //          .data
		.out_ready         (agent_pipeline_023_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_024 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_012_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_012_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_012_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_012_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_012_src_data),                                         //          .data
		.in_channel        (cmd_mux_012_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_024_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_024_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_024_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_024_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_024_source0_data),                              //          .data
		.out_channel       (agent_pipeline_024_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_025 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_a_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_a_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_a_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_a_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_a_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_025_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_025_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_025_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_025_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_025_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_026 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_013_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_013_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_013_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_013_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_013_src_data),                                         //          .data
		.in_channel        (cmd_mux_013_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_026_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_026_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_026_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_026_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_026_source0_data),                              //          .data
		.out_channel       (agent_pipeline_026_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_027 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_b_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_b_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_b_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_b_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_b_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_027_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_027_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_027_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_027_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_027_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_028 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_014_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_014_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_014_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_014_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_014_src_data),                                         //          .data
		.in_channel        (cmd_mux_014_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_028_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_028_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_028_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_028_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_028_source0_data),                              //          .data
		.out_channel       (agent_pipeline_028_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_029 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_x_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_x_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_x_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_x_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_x_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_029_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_029_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_029_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_029_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_029_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_030 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_015_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_015_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_015_src_data),                                         //          .data
		.in_channel        (cmd_mux_015_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_030_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_030_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_030_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_030_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_030_source0_data),                              //          .data
		.out_channel       (agent_pipeline_030_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_031 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_y_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_y_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_y_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_y_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_y_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_031_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_031_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_031_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_031_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_031_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_032 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_016_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_016_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_016_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_016_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_016_src_data),                                         //          .data
		.in_channel        (cmd_mux_016_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_032_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_032_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_032_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_032_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_032_source0_data),                              //          .data
		.out_channel       (agent_pipeline_032_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_033 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_l_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_l_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_l_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_l_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_l_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_033_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_033_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_033_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_033_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_033_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_034 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_017_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_017_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_017_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_017_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_017_src_data),                                         //          .data
		.in_channel        (cmd_mux_017_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_034_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_034_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_034_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_034_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_034_source0_data),                              //          .data
		.out_channel       (agent_pipeline_034_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_035 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_r_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (boton_r_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (boton_r_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (boton_r_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (boton_r_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_035_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_035_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_035_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_035_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_035_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_036 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_018_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_018_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_018_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_018_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_018_src_data),                                         //          .data
		.in_channel        (cmd_mux_018_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_036_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_036_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_036_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_036_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_036_source0_data),                              //          .data
		.out_channel       (agent_pipeline_036_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_037 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_up_s1_agent_rp_ready),                                   //     sink0.ready
		.in_valid          (boton_up_s1_agent_rp_valid),                                   //          .valid
		.in_startofpacket  (boton_up_s1_agent_rp_startofpacket),                           //          .startofpacket
		.in_endofpacket    (boton_up_s1_agent_rp_endofpacket),                             //          .endofpacket
		.in_data           (boton_up_s1_agent_rp_data),                                    //          .data
		.out_ready         (agent_pipeline_037_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_037_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_037_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_037_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_037_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_038 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_019_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_019_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_019_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_019_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_019_src_data),                                         //          .data
		.in_channel        (cmd_mux_019_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_038_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_038_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_038_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_038_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_038_source0_data),                              //          .data
		.out_channel       (agent_pipeline_038_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_039 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_down_s1_agent_rp_ready),                                 //     sink0.ready
		.in_valid          (boton_down_s1_agent_rp_valid),                                 //          .valid
		.in_startofpacket  (boton_down_s1_agent_rp_startofpacket),                         //          .startofpacket
		.in_endofpacket    (boton_down_s1_agent_rp_endofpacket),                           //          .endofpacket
		.in_data           (boton_down_s1_agent_rp_data),                                  //          .data
		.out_ready         (agent_pipeline_039_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_039_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_039_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_039_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_039_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_040 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_020_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_020_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_020_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_020_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_020_src_data),                                         //          .data
		.in_channel        (cmd_mux_020_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_040_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_040_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_040_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_040_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_040_source0_data),                              //          .data
		.out_channel       (agent_pipeline_040_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_041 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_left_s1_agent_rp_ready),                                 //     sink0.ready
		.in_valid          (boton_left_s1_agent_rp_valid),                                 //          .valid
		.in_startofpacket  (boton_left_s1_agent_rp_startofpacket),                         //          .startofpacket
		.in_endofpacket    (boton_left_s1_agent_rp_endofpacket),                           //          .endofpacket
		.in_data           (boton_left_s1_agent_rp_data),                                  //          .data
		.out_ready         (agent_pipeline_041_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_041_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_041_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_041_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_041_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_042 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_021_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_021_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_021_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_021_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_021_src_data),                                         //          .data
		.in_channel        (cmd_mux_021_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_042_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_042_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_042_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_042_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_042_source0_data),                              //          .data
		.out_channel       (agent_pipeline_042_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_043 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (boton_right_s1_agent_rp_ready),                                //     sink0.ready
		.in_valid          (boton_right_s1_agent_rp_valid),                                //          .valid
		.in_startofpacket  (boton_right_s1_agent_rp_startofpacket),                        //          .startofpacket
		.in_endofpacket    (boton_right_s1_agent_rp_endofpacket),                          //          .endofpacket
		.in_data           (boton_right_s1_agent_rp_data),                                 //          .data
		.out_ready         (agent_pipeline_043_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_043_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_043_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_043_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_043_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_044 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_022_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_022_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_022_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_022_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_022_src_data),                                         //          .data
		.in_channel        (cmd_mux_022_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_044_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_044_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_044_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_044_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_044_source0_data),                              //          .data
		.out_channel       (agent_pipeline_044_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_045 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (analog1_x_s1_agent_rp_ready),                                  //     sink0.ready
		.in_valid          (analog1_x_s1_agent_rp_valid),                                  //          .valid
		.in_startofpacket  (analog1_x_s1_agent_rp_startofpacket),                          //          .startofpacket
		.in_endofpacket    (analog1_x_s1_agent_rp_endofpacket),                            //          .endofpacket
		.in_data           (analog1_x_s1_agent_rp_data),                                   //          .data
		.out_ready         (agent_pipeline_045_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_045_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_045_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_045_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_045_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_046 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_023_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_023_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_023_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_023_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_023_src_data),                                         //          .data
		.in_channel        (cmd_mux_023_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_046_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_046_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_046_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_046_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_046_source0_data),                              //          .data
		.out_channel       (agent_pipeline_046_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_047 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (analog1_y_s1_agent_rp_ready),                                  //     sink0.ready
		.in_valid          (analog1_y_s1_agent_rp_valid),                                  //          .valid
		.in_startofpacket  (analog1_y_s1_agent_rp_startofpacket),                          //          .startofpacket
		.in_endofpacket    (analog1_y_s1_agent_rp_endofpacket),                            //          .endofpacket
		.in_data           (analog1_y_s1_agent_rp_data),                                   //          .data
		.out_ready         (agent_pipeline_047_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_047_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_047_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_047_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_047_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_048 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_024_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_024_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_024_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_024_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_024_src_data),                                         //          .data
		.in_channel        (cmd_mux_024_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_048_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_048_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_048_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_048_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_048_source0_data),                              //          .data
		.out_channel       (agent_pipeline_048_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_049 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (analog2_x_s1_agent_rp_ready),                                  //     sink0.ready
		.in_valid          (analog2_x_s1_agent_rp_valid),                                  //          .valid
		.in_startofpacket  (analog2_x_s1_agent_rp_startofpacket),                          //          .startofpacket
		.in_endofpacket    (analog2_x_s1_agent_rp_endofpacket),                            //          .endofpacket
		.in_data           (analog2_x_s1_agent_rp_data),                                   //          .data
		.out_ready         (agent_pipeline_049_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_049_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_049_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_049_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_049_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_050 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_025_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_025_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_025_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_025_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_025_src_data),                                         //          .data
		.in_channel        (cmd_mux_025_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_050_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_050_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_050_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_050_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_050_source0_data),                              //          .data
		.out_channel       (agent_pipeline_050_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_051 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (analog2_y_s1_agent_rp_ready),                                  //     sink0.ready
		.in_valid          (analog2_y_s1_agent_rp_valid),                                  //          .valid
		.in_startofpacket  (analog2_y_s1_agent_rp_startofpacket),                          //          .startofpacket
		.in_endofpacket    (analog2_y_s1_agent_rp_endofpacket),                            //          .endofpacket
		.in_data           (analog2_y_s1_agent_rp_data),                                   //          .data
		.out_ready         (agent_pipeline_051_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_051_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_051_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_051_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_051_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_052 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_026_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_026_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_026_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_026_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_026_src_data),                                         //          .data
		.in_channel        (cmd_mux_026_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_052_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_052_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_052_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_052_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_052_source0_data),                              //          .data
		.out_channel       (agent_pipeline_052_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_053 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (touch_panel_spi_spi_control_port_agent_rp_ready),              //     sink0.ready
		.in_valid          (touch_panel_spi_spi_control_port_agent_rp_valid),              //          .valid
		.in_startofpacket  (touch_panel_spi_spi_control_port_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (touch_panel_spi_spi_control_port_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (touch_panel_spi_spi_control_port_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_053_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_053_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_053_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_053_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_053_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src0_data),                     //          .data
		.in_channel        (cmd_demux_src0_channel),                  //          .channel
		.out_ready         (mux_pipeline_source0_ready),              //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),              //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),        //          .endofpacket
		.out_data          (mux_pipeline_source0_data),               //          .data
		.out_channel       (mux_pipeline_source0_channel),            //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                 //          .data
		.in_channel        (cmd_demux_001_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),           //          .data
		.out_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                //     sink0.ready
		.in_valid          (cmd_demux_002_src0_valid),                //          .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_002_src0_data),                 //          .data
		.in_channel        (cmd_demux_002_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),           //          .data
		.out_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                 //          .data
		.in_channel        (cmd_demux_001_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_002_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_002_src1_data),                 //          .data
		.in_channel        (cmd_demux_002_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),           //          .data
		.out_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                 //          .data
		.in_channel        (cmd_demux_001_src2_channel),              //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),           //          .data
		.out_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src2_ready),                //     sink0.ready
		.in_valid          (cmd_demux_002_src2_valid),                //          .valid
		.in_startofpacket  (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_002_src2_data),                 //          .data
		.in_channel        (cmd_demux_002_src2_channel),              //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),           //          .data
		.out_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                                      //          .data
		.in_channel        (cmd_demux_001_src3_channel),                                   //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                                //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                                      //          .data
		.in_channel        (cmd_demux_001_src4_channel),                                   //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                                //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src5_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src5_data),                 //          .data
		.in_channel        (cmd_demux_001_src5_channel),              //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),           //          .data
		.out_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src6_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src6_data),                                      //          .data
		.in_channel        (cmd_demux_001_src6_channel),                                   //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                                //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src7_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src7_data),                 //          .data
		.in_channel        (cmd_demux_001_src7_channel),              //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),           //          .data
		.out_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src8_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src8_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src8_data),                 //          .data
		.in_channel        (cmd_demux_001_src8_channel),              //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),           //          .data
		.out_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src9_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src9_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src9_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src9_data),                 //          .data
		.in_channel        (cmd_demux_001_src9_channel),              //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),           //          .data
		.out_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src10_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src10_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src10_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src10_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src10_data),                                     //          .data
		.in_channel        (cmd_demux_001_src10_channel),                                  //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                                //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src11_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src11_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src11_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src11_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src11_data),                                     //          .data
		.in_channel        (cmd_demux_001_src11_channel),                                  //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                                //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src12_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src12_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src12_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src12_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src12_data),                                     //          .data
		.in_channel        (cmd_demux_001_src12_channel),                                  //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                                //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src13_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src13_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src13_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src13_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src13_data),                                     //          .data
		.in_channel        (cmd_demux_001_src13_channel),                                  //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                                //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src14_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src14_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src14_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src14_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src14_data),                                     //          .data
		.in_channel        (cmd_demux_001_src14_channel),                                  //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                                //          .data
		.out_channel       (mux_pipeline_018_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src15_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src15_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src15_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src15_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src15_data),                                     //          .data
		.in_channel        (cmd_demux_001_src15_channel),                                  //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                                //          .data
		.out_channel       (mux_pipeline_019_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src16_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src16_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src16_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src16_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src16_data),                                     //          .data
		.in_channel        (cmd_demux_001_src16_channel),                                  //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),                                //          .data
		.out_channel       (mux_pipeline_020_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src17_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src17_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src17_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src17_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src17_data),                                     //          .data
		.in_channel        (cmd_demux_001_src17_channel),                                  //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),                                //          .data
		.out_channel       (mux_pipeline_021_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src18_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src18_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src18_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src18_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src18_data),                                     //          .data
		.in_channel        (cmd_demux_001_src18_channel),                                  //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),                                //          .data
		.out_channel       (mux_pipeline_022_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src19_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src19_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src19_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src19_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src19_data),                                     //          .data
		.in_channel        (cmd_demux_001_src19_channel),                                  //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),                                //          .data
		.out_channel       (mux_pipeline_023_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src20_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src20_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src20_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src20_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src20_data),                                     //          .data
		.in_channel        (cmd_demux_001_src20_channel),                                  //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),                                //          .data
		.out_channel       (mux_pipeline_024_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src21_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src21_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src21_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src21_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src21_data),                                     //          .data
		.in_channel        (cmd_demux_001_src21_channel),                                  //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),                                //          .data
		.out_channel       (mux_pipeline_025_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src22_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src22_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src22_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src22_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src22_data),                                     //          .data
		.in_channel        (cmd_demux_001_src22_channel),                                  //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),                                //          .data
		.out_channel       (mux_pipeline_026_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src23_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src23_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src23_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src23_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src23_data),                                     //          .data
		.in_channel        (cmd_demux_001_src23_channel),                                  //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),                                //          .data
		.out_channel       (mux_pipeline_027_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src24_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src24_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src24_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src24_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src24_data),                                     //          .data
		.in_channel        (cmd_demux_001_src24_channel),                                  //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),                                //          .data
		.out_channel       (mux_pipeline_028_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src25_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src25_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src25_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src25_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src25_data),                                     //          .data
		.in_channel        (cmd_demux_001_src25_channel),                                  //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),                                //          .data
		.out_channel       (mux_pipeline_029_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src26_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_001_src26_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_001_src26_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src26_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_001_src26_data),                                     //          .data
		.in_channel        (cmd_demux_001_src26_channel),                                  //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),                                //          .data
		.out_channel       (mux_pipeline_030_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (clk_sys_clk_clk),                                              //       cr0.clk
		.reset             (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                          //          .data
		.in_channel        (rsp_demux_src0_channel),                                       //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),                                //          .data
		.out_channel       (mux_pipeline_031_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_032 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                    //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                    //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),            //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),              //          .endofpacket
		.in_data           (rsp_demux_src1_data),                     //          .data
		.in_channel        (rsp_demux_src1_channel),                  //          .channel
		.out_ready         (mux_pipeline_032_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_032_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_032_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_032_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_032_source0_data),           //          .data
		.out_channel       (mux_pipeline_032_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_033 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                 //          .data
		.in_channel        (rsp_demux_001_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_033_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_033_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_033_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_033_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_033_source0_data),           //          .data
		.out_channel       (mux_pipeline_033_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_034 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                 //          .data
		.in_channel        (rsp_demux_002_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_034_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_034_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_034_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_034_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_034_source0_data),           //          .data
		.out_channel       (mux_pipeline_034_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_035 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                 //          .data
		.in_channel        (rsp_demux_003_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_035_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_035_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_035_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_035_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_035_source0_data),           //          .data
		.out_channel       (mux_pipeline_035_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_036 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                 //          .data
		.in_channel        (rsp_demux_004_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_036_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_036_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_036_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_036_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_036_source0_data),           //          .data
		.out_channel       (mux_pipeline_036_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_037 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                 //          .data
		.in_channel        (rsp_demux_005_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_037_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_037_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_037_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_037_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_037_source0_data),           //          .data
		.out_channel       (mux_pipeline_037_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_038 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                 //          .data
		.in_channel        (rsp_demux_006_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_038_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_038_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_038_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_038_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_038_source0_data),           //          .data
		.out_channel       (mux_pipeline_038_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_039 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                 //          .data
		.in_channel        (rsp_demux_007_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_039_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_039_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_039_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_039_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_039_source0_data),           //          .data
		.out_channel       (mux_pipeline_039_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_040 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                 //          .data
		.in_channel        (rsp_demux_008_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_040_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_040_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_040_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_040_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_040_source0_data),           //          .data
		.out_channel       (mux_pipeline_040_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_041 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                 //          .data
		.in_channel        (rsp_demux_009_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_041_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_041_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_041_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_041_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_041_source0_data),           //          .data
		.out_channel       (mux_pipeline_041_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_042 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_010_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_010_src0_data),                 //          .data
		.in_channel        (rsp_demux_010_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_042_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_042_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_042_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_042_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_042_source0_data),           //          .data
		.out_channel       (mux_pipeline_042_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_043 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_011_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_011_src0_data),                 //          .data
		.in_channel        (rsp_demux_011_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_043_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_043_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_043_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_043_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_043_source0_data),           //          .data
		.out_channel       (mux_pipeline_043_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_044 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_012_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_012_src0_data),                 //          .data
		.in_channel        (rsp_demux_012_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_044_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_044_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_044_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_044_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_044_source0_data),           //          .data
		.out_channel       (mux_pipeline_044_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_045 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_013_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_013_src0_data),                 //          .data
		.in_channel        (rsp_demux_013_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_045_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_045_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_045_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_045_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_045_source0_data),           //          .data
		.out_channel       (mux_pipeline_045_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_046 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_014_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_014_src0_data),                 //          .data
		.in_channel        (rsp_demux_014_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_046_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_046_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_046_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_046_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_046_source0_data),           //          .data
		.out_channel       (mux_pipeline_046_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_047 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_015_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_015_src0_data),                 //          .data
		.in_channel        (rsp_demux_015_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_047_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_047_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_047_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_047_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_047_source0_data),           //          .data
		.out_channel       (mux_pipeline_047_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_048 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_016_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_016_src0_data),                 //          .data
		.in_channel        (rsp_demux_016_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_048_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_048_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_048_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_048_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_048_source0_data),           //          .data
		.out_channel       (mux_pipeline_048_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_049 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_017_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_017_src0_data),                 //          .data
		.in_channel        (rsp_demux_017_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_049_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_049_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_049_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_049_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_049_source0_data),           //          .data
		.out_channel       (mux_pipeline_049_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_050 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_018_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_018_src0_data),                 //          .data
		.in_channel        (rsp_demux_018_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_050_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_050_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_050_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_050_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_050_source0_data),           //          .data
		.out_channel       (mux_pipeline_050_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_051 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_019_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_019_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_019_src0_data),                 //          .data
		.in_channel        (rsp_demux_019_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_051_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_051_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_051_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_051_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_051_source0_data),           //          .data
		.out_channel       (mux_pipeline_051_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_052 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_020_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_020_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_020_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_020_src0_data),                 //          .data
		.in_channel        (rsp_demux_020_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_052_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_052_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_052_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_052_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_052_source0_data),           //          .data
		.out_channel       (mux_pipeline_052_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_053 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_021_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_021_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_021_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_021_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_021_src0_data),                 //          .data
		.in_channel        (rsp_demux_021_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_053_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_053_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_053_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_053_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_053_source0_data),           //          .data
		.out_channel       (mux_pipeline_053_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_054 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_022_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_022_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_022_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_022_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_022_src0_data),                 //          .data
		.in_channel        (rsp_demux_022_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_054_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_054_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_054_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_054_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_054_source0_data),           //          .data
		.out_channel       (mux_pipeline_054_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_055 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_023_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_023_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_023_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_023_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_023_src0_data),                 //          .data
		.in_channel        (rsp_demux_023_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_055_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_055_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_055_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_055_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_055_source0_data),           //          .data
		.out_channel       (mux_pipeline_055_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_056 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_024_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_024_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_024_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_024_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_024_src0_data),                 //          .data
		.in_channel        (rsp_demux_024_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_056_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_056_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_056_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_056_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_056_source0_data),           //          .data
		.out_channel       (mux_pipeline_056_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_057 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_025_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_025_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_025_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_025_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_025_src0_data),                 //          .data
		.in_channel        (rsp_demux_025_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_057_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_057_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_057_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_057_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_057_source0_data),           //          .data
		.out_channel       (mux_pipeline_057_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_058 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_026_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_026_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_026_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_026_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_026_src0_data),                 //          .data
		.in_channel        (rsp_demux_026_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_058_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_058_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_058_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_058_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_058_source0_data),           //          .data
		.out_channel       (mux_pipeline_058_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_059 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src2_ready),                    //     sink0.ready
		.in_valid          (rsp_demux_src2_valid),                    //          .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),            //          .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),              //          .endofpacket
		.in_data           (rsp_demux_src2_data),                     //          .data
		.in_channel        (rsp_demux_src2_channel),                  //          .channel
		.out_ready         (mux_pipeline_059_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_059_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_059_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_059_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_059_source0_data),           //          .data
		.out_channel       (mux_pipeline_059_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_060 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                //     sink0.ready
		.in_valid          (rsp_demux_001_src1_valid),                //          .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_001_src1_data),                 //          .data
		.in_channel        (rsp_demux_001_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_060_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_060_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_060_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_060_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_060_source0_data),           //          .data
		.out_channel       (mux_pipeline_060_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (27),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_061 (
		.clk               (clk_sys_clk_clk),                         //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                //     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                //          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                 //          .data
		.in_channel        (rsp_demux_002_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_061_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_061_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_061_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_061_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_061_source0_data),           //          .data
		.out_channel       (mux_pipeline_061_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)            //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (epcs_epcs_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (epcs_epcs_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (epcs_epcs_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_jtag_debug_module_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_jtag_debug_module_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_jtag_debug_module_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (f_engine_frac_cpu_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (f_engine_frac_cpu_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (f_engine_frac_cpu_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)        //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (pio_led_green_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pio_led_green_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pio_led_green_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)            //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_sw_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (pio_sw_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (pio_sw_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)        //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (touch_panel_busy_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (touch_panel_busy_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (touch_panel_busy_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (touch_panel_penirq_n_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (touch_panel_penirq_n_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (touch_panel_penirq_n_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_a_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_a_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_a_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_b_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_b_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_b_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_x_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_x_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_x_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_y_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_y_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_y_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_l_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_l_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_l_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_r_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (boton_r_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (boton_r_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_up_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (boton_up_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (boton_up_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_down_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (boton_down_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (boton_down_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_left_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (boton_left_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (boton_left_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boton_right_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (boton_right_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (boton_right_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (analog1_x_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (analog1_x_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (analog1_x_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (analog1_y_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (analog1_y_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (analog1_y_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (analog2_x_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (analog2_x_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (analog2_x_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (analog2_y_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (analog2_y_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (analog2_y_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_master_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (touch_panel_spi_spi_control_port_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                             //         .error
	);

endmodule
